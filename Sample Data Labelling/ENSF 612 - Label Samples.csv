Dave,Steve,Graeme,html_url,number,title,labels,state,locked,milestone,comments,created_at,updated_at,closed_at,author_association,state_reason,assignee.login,body
,,,https://github.com/facebook/react/issues/10,10,Can't require() react-tools module,[],closed,False,,3,2013-05-30T03:46:02Z,2013-05-30T18:55:49Z,2013-05-30T12:14:18Z,NONE,completed,,"I'm trying to programatically invoke the JSX transformer (using the version of `react-tools` in the npm registry) by running something like

```
require('react-tools').transform(someCode);
```

Which then throws this error:

```
Error: Cannot find module './build/React'
```

If I comment out the lines in `main.js` that require/use `./build/React` the `react-tools` module loads fine and the transformer runs correctly.
"
,,,https://github.com/facebook/react/issues/90,90,Mocking not working with EventPluginRegistry,[],closed,False,,1,2013-06-14T01:37:03Z,2014-09-28T16:16:00Z,2013-06-14T21:39:10Z,MEMBER,completed,benjamn,"Since tests are injecting plugins with the same name multiple times, they fail. This shouldn't be happening since we `dumpCache` https://github.com/facebook/react/blob/master/src/eventPlugins/__tests__/AnalyticsEventPlugin-test.js#L33
"
,,,https://github.com/facebook/react/issues/98,98,React + Browserify module issues,[],closed,False,,4,2013-06-16T06:12:51Z,2013-08-14T17:01:34Z,2013-08-14T17:01:34Z,CONTRIBUTOR,completed,,"Hello! I've been using React and combining it with Browserify. My goal for this was to be able to use Node modules with React, by using this workflow:
1. Write JSX logic, include require()'s to installed Node modules
2. Use react-tools to compile the JSX to JS
3. Browserify said JS, which would then include the Node modules

However, the compiled JSX from react-tools changes something like `require('foo')` to `require('./foo')`, and creates a stub file. This very much breaks importing modules. This seems to happens because of `commoner`, which is part of the compiling workflow.

Is there a workaround for this? 
"
,,,https://github.com/facebook/react/issues/80,80,bin/jsx should not relativize required module IDs unless --relativize is passed,"[{""id"":40929153,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement"",""name"":""Type: Enhancement"",""color"":""84b6eb"",""default"":false,""description"":null}]",closed,False,,2,2013-06-11T16:17:39Z,2013-06-11T23:22:18Z,2013-06-11T23:22:18Z,CONTRIBUTOR,completed,benjamn,"Inspired by https://github.com/facebook/react/issues/71#issuecomment-19143496

This will reduce the number of assumptions imposed by `bin/jsx` considerably.

We should still use `--relativize` for our grunt tasks, but that's our poison to pick.

cc @petehunt @zpao
"
,,,https://github.com/facebook/react/issues/133,133,Consider allowing `setState` while UNMOUNTING,[],closed,False,,1,2013-06-28T03:32:56Z,2014-01-06T21:35:15Z,2014-01-06T21:35:15Z,CONTRIBUTOR,completed,,"Should we let people invoke `setState` in `componentWillUnmount`? It seems harmless, but currently we throw. In theory, `this.state` should be cleared out when unmounting (but we do not for backward compatibility reasons).

Aside, as we get better at clearing asynchronous callbacks on unmount, we should seriously consider clearing `this.state` and `this.props` when unmounting.
"
,,,https://github.com/facebook/react/issues/180,180,Auto-assigned keys can conflict with user-specified ones,[],closed,False,,3,2013-07-09T20:53:17Z,2013-09-06T16:38:46Z,2013-09-06T16:38:46Z,COLLABORATOR,completed,,"If you render

```
<div>
    <span key={1}>hello,</span>
    <span>world</span>
</div>
```

then React throws a duplicate-key error because the second span (""world"") is assigned a key of `1`, its index in the div's children.

Presumably it's best to simply avoid specifying only some keys but it would be nice if React could use separate namespaces for different key types (or at least provide a slightly more informative error message).
"
,,,https://github.com/facebook/react/issues/183,183,Parsing error for HTML entity in nested JSX.,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,11,2013-07-10T23:17:50Z,2016-01-13T22:19:43Z,2014-02-15T23:49:29Z,CONTRIBUTOR,completed,,"The html entity in the following causes a `SyntaxError: Unexpected token ;`  in both current master and React 0.3.

```
/** @jsx React.DOM */
var mylist = ['a', 'b', 'c'];
// Fails with entity below
React.renderComponent(
    <p>
        {mylist.map(function (id) {
            return (<span>{id} &nbsp;</span>);
        })}
    </p>, document.body);
```

JSFiddle: http://jsfiddle.net/VLmQt/
"
,,,https://github.com/facebook/react/issues/174,174,Pass rootNode for componentWillUnmount,"[{""id"":40929153,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement"",""name"":""Type: Enhancement"",""color"":""84b6eb"",""default"":false,""description"":null},{""id"":40929156,""node_id"":""MDU6TGFiZWw0MDkyOTE1Ng=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Wontfix"",""name"":""Resolution: Wontfix"",""color"":""ffffff"",""default"":false,""description"":null}]",closed,False,,3,2013-07-07T02:28:43Z,2013-10-09T19:55:49Z,2013-10-09T19:55:49Z,CONTRIBUTOR,completed,,"Just like for `componentDidMount` and others.
"
,,,https://github.com/facebook/react/issues/238,238,Attaching of onclick handler causes unexpected highlighting in Mobile Safari,[],closed,False,,4,2013-07-29T01:12:58Z,2014-05-27T22:15:00Z,2014-05-27T20:44:08Z,COLLABORATOR,completed,,"@yungsters's recent commit 4deb0d619c06e8f0d30f972a6412d65f19b7f921 makes onClick work in Mobile Safari by attaching an empty `onclick` handler on touchstart. However, this causes subtly different behavior from DOM events without React. Consider the JSX:

``` html
<div onClick={...}>
    <img src=""a.png"" />
    <img src=""b.png"" />
</div>
```

When an image is tapped, the onclick handler is attached to the image and so when the browser draws the light gray touch highlight, only the image is highlighted.

Compare with the HTML

``` html
<div onclick=...>
    <img src=""a.png"">
    <img src=""b.png"">
</div>
```

where the entire div is highlighted when clicking.
"
,,,https://github.com/facebook/react/issues/271,271,React should support Content Security Policy,"[{""id"":40929153,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement"",""name"":""Type: Enhancement"",""color"":""84b6eb"",""default"":false,""description"":null}]",closed,False,,2,2013-08-16T22:48:45Z,2013-09-09T23:23:21Z,2013-09-09T23:23:21Z,NONE,completed,,"React is currently incompatible with sites that enable a Content Security Policy:

> Uncaught EvalError: Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of script in the following Content Security Policy directive: ""default-src 'self'"". [1]

From some quick testing, there appears to be only one place in React currently preforming evaluation from a string: https://github.com/facebook/react/blob/master/src/environment/ExecutionEnvironment.js#L39

```
- global: new Function('return this;')()
+ global: function() { return this; }()
```

This one-off is easy enough to fix in a single pull request that I'll gladly submit. However, I'm uneasy deploying React on a CSP-enabled site without a bit of integration testing and an understanding of whether CSP incompatibility issues even qualify as bugs. What's the official stance on React+Content-Security-Policy?

[1] https://dvcs.w3.org/hg/content-security-policy/raw-file/tip/csp-specification.dev.html#usage
"
,,,https://github.com/facebook/react/issues/272,272,Generate docs using JSDoc (or something).,[],closed,False,,31,2013-08-17T04:45:20Z,2015-10-02T14:02:27Z,2015-02-09T17:51:24Z,CONTRIBUTOR,completed,,"We've tried to be consistent about documenting the React core using markdown style comments, and JSDoc style annotations, so it would be easy to create a utility that auto-generates documentation pages for the core itself. Ideally this would only rely on node.js/npm and not Java.

Using the ""good first bug"" label, but we should rename that label to ""good first contribution"".
"
,,,https://github.com/facebook/react/issues/315,315,"Inputs are uneditable if the ""value"" attribute is present","[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,2,2013-09-04T04:18:12Z,2013-09-07T20:25:45Z,2013-09-07T20:25:39Z,NONE,completed,,"See here: http://jsfiddle.net/XdNHU/1/

If an `<input>` element is rendered with its value attribute already present/set, the input seems to be uneditable. I thought it might have been something in handleChange, but I'm not sure.

Hopefully I'm not just misusing JSX...

Thanks!
"
,,,https://github.com/facebook/react/issues/337,337,Fails on whole-document rendering,[],closed,False,,0,2013-09-11T05:18:30Z,2013-09-11T23:54:32Z,2013-09-11T23:54:32Z,CONTRIBUTOR,completed,,"See the issue reported here: https://github.com/facebook/react/commit/647731e399fc824c02fdf851d91ce4477958e7fe

This causes react-page to fail.
"
,,,https://github.com/facebook/react/issues/348,348,nowrap doesn't work table cell,"[{""id"":40929156,""node_id"":""MDU6TGFiZWw0MDkyOTE1Ng=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Wontfix"",""name"":""Resolution: Wontfix"",""color"":""ffffff"",""default"":false,""description"":null}]",closed,False,,4,2013-09-15T06:21:48Z,2016-06-14T01:44:23Z,2013-09-19T03:28:31Z,NONE,completed,,"I am creating horizontal scrolling webpage. I m using table with nowrap as hack of not calculating width of screen every time.

<td nowrap></td>

It seems react ignore nowrap, is there any work around.
"
,,,https://github.com/facebook/react/issues/408,408,Add a link in each warning to doc pages ,[],closed,False,,0,2013-10-06T04:42:43Z,2014-01-06T21:31:30Z,2014-01-06T21:31:30Z,COLLABORATOR,completed,,"relevant IRC log:

```
04:37 <+balpert> I wonder if we should link to a doc/cookbook page for every warning
04:37 < chenglou> balpert: I was thinking of that just now, but that kinda bloats it up
04:37 < chenglou> it'd be faster to notice in the console that it's wrong
04:37 < chenglou> than to check cookbook entries
04:37 <+balpert> no, I mean
04:37 <+balpert> each warning can have a link where you can learn more
04:38 < chenglou> oh damn, directly from the console?
04:38 < matnel> ""I got this kind of stuff, what should I do"" kind of stuff
04:38 <+balpert> akin to d2bf50c63d4390f4b73a65d6ec620e1ad842fa47
04:38 <@petehunt> i'm thinking
04:38 <@petehunt> a z-index: 10000; clippy character appears on the screen
04:38 < chenglou> balpert: that's actually a great idea
04:38 <@petehunt> instead of this dev console bs
04:38 < matnel> so when a noob coder (like me) gets an error, then you can just google it :)
04:38 <@petehunt> ""it looks like you're missing a key!""
04:39 < chenglou> mantel: when you have the link to the cookbook entry, why even bother googling it
04:39 <@petehunt> balpert: chenglou: chrome will actually make hyperlinks clickable in warnings
04:39 <+balpert> yup!
04:39 < chenglou> that's a great idea omg
04:39 < chenglou> nice integration
04:39 < matnel> petehunt: :D :D https://www.smore.com/clippy-js
```
"
,,,https://github.com/facebook/react/issues/415,415,Perhaps warn when writing a bad propTypes spec,"[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null}]",closed,False,,2,2013-10-09T21:26:53Z,2013-12-20T06:37:58Z,2013-12-20T06:37:58Z,COLLABORATOR,completed,,"If you do `.required` instead of `.isRequired`, you just end up with it silently ignoring the prop type because it ends up undefined. Maybe we could warn for undefined or use fancy magic in newer browsers to warn on accessing unknown properties.

```
propTypes: {
  completed: React.PropTypes.bool.required  // oops! now undefined.
}
```
"
,,,https://github.com/facebook/react/issues/427,427,Use the right document in iframe selection events,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":332720629,""node_id"":""MDU6TGFiZWwzMzI3MjA2Mjk="",""url"":""https://api.github.com/repos/facebook/react/labels/HTML"",""name"":""HTML"",""color"":""f7c6c7"",""default"":false,""description"":null}]",closed,False,,3,2013-10-15T21:01:09Z,2018-08-04T00:07:24Z,2018-08-04T00:07:23Z,MEMBER,completed,,"We use `document` directly a bunch where that might not be the right thing if the event is occurring in an `iframe`. We should do it right. (split from #373)
"
,,,https://github.com/facebook/react/issues/557,557,Inconvenient __owner__ assignment prevents updating a component,[],closed,False,,0,2013-11-17T20:58:38Z,2013-12-05T23:56:08Z,2013-12-05T23:56:08Z,COLLABORATOR,completed,,"Take a look at this component:

[![](http://i.stack.imgur.com/c2ihl.png)](http://jsfiddle.net/spicyj/PLcWJ/)
http://jsfiddle.net/spicyj/PLcWJ/

The second time you click to show the popover, React throws:

> Invariant Violation: replaceProps(...): You called `setProps` or `replaceProps` on a component with an owner. This is an anti-pattern since props will get reactively updated when rendered. Instead, change the owner's `render` method to pass the correct value as props to the component where it is created.

This happens because the second time the line

``` js
React.renderComponent(content, $tip.find('.popover-content')[0]);
```

is executed, it calls `.replaceProps` on the old `content` component, which throws because its `__owner__` is the PopoverDemo component, despite that PopoverDemo only creates the component, but doesn't actually mount it:

``` js
return <BsPopover content={<div>The time is <Time />.</div>} />;
```

---

I've concluded that `__owner__` is the wrong thing for `.replaceProps` to check. Instead, some property should be set on each child component upon mounting, probably by `ReactMultiChild.Mixin.mountComponent`. (Or conversely, on each root component by `ReactComponent.Mixin._mountComponentIntoNode`.)
"
,,,https://github.com/facebook/react/issues/556,556,React.PropTypes.component would be nice,[],closed,False,,4,2013-11-17T19:22:21Z,2013-12-22T02:02:10Z,2013-12-22T02:02:10Z,COLLABORATOR,completed,,"React.PropTypes.component would be nice. I wrote this instead:

``` js
function propTypeComponentChecker(required, props, propName, componentName) {
    if (props[propName] == null) {
        if (required) {
            throw new Error(
                'Required prop `' + propName + '` was not specified in `' +
                componentName + '`.'
            );
        }
    } else if (!React.isValidComponent(props[propName])) {
        throw new Error(
            'Invalid prop `' + propName + '` supplied to `' + componentName +
            '`, expected component.'
        );
    }
}
var propTypeComponent = propTypeComponentChecker.bind(null, false);
propTypeComponent.isRequired = propTypeComponentChecker.bind(null, true);
```
"
,,,https://github.com/facebook/react/issues/521,521,React.addons.TransitionGroup should not throw on `undefined` children,"[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null}]",closed,False,,2,2013-11-12T23:39:28Z,2013-12-14T16:03:54Z,2013-12-14T16:03:54Z,CONTRIBUTOR,completed,,"Consider this example:

```
var foo;

if (this.state.bar) foo = <Foo/>;

<TransitionGroup transitionName='baz'>
  {foo}
</TransitionGroup>
```

If `state` is false or undefined, `foo` will be `undefined` and React.addons.TransitionGroup will throw `Uncaught TypeError: Object.keys called on non-object`
"
,,,https://github.com/facebook/react/issues/563,563,Make it possible to run a single test,[],closed,False,,2,2013-11-18T20:03:40Z,2013-11-27T19:54:32Z,2013-11-27T19:54:32Z,MEMBER,completed,subtleGradient,"Like we talked about. cc @benjamn
"
,,,https://github.com/facebook/react/issues/551,551,"waitForJsCondition has been deprecated, use waitFor + jsCondition asserter instead",[],closed,False,,2,2013-11-15T21:51:14Z,2013-12-06T01:14:43Z,2013-12-05T22:55:54Z,CONTRIBUTOR,completed,subtleGradient,
,,,https://github.com/facebook/react/issues/517,517,ReactDOMInput should properly control a value of number `0` fails in IE,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null},{""id"":69105383,""node_id"":""MDU6TGFiZWw2OTEwNTM4Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Browser:%20IE"",""name"":""Browser: IE"",""color"":""c7def8"",""default"":false,""description"":null}]",closed,False,,4,2013-11-11T22:29:48Z,2014-02-19T18:58:55Z,2014-02-19T18:58:55Z,CONTRIBUTOR,completed,,"```
ReactDOMInput should properly control a value of number `0`.

Expected 'giraffe' to be '0'.
```
"
,,,https://github.com/facebook/react/issues/608,608,`mutateHTMLNodeWithMarkup` fails in IE8,[],closed,False,,3,2013-11-25T21:04:15Z,2014-05-18T06:08:40Z,2014-05-18T06:08:40Z,CONTRIBUTOR,completed,,"IE8 doesn't support `getAttributeNS`, `setAttributeNS` or  `hasAttributeNS`.
"
,,,https://github.com/facebook/react/issues/679,679,Tutorials docs section,[],closed,False,,4,2013-12-20T08:21:53Z,2016-10-23T13:05:26Z,2016-10-23T13:05:26Z,CONTRIBUTOR,completed,,"I think we need a tutorials section. It should have:
- Getting started (current tutorial)
- Thinking in React blog post
- Using server rendering
- Performance optimization walkthrough

I'll write all of these (well we only need two) unless someone else wants to.
"
,,,https://github.com/facebook/react/issues/726,726,`jsx` compiler compiles to `React.Dom` not `React.DOM`,[],closed,False,,2,2013-12-27T14:21:02Z,2013-12-27T20:10:02Z,2013-12-27T14:24:19Z,NONE,completed,,"I'm pre-compiling my `jsx` assets using the `react-tools`, this produces code like `React.Dom.div(null)`.  The problem is that the version of `react` I'm using doesn't have a variable `Dom` attached to it, it has the variable `DOM`.

`jsx version 0.8.9` and `react version 0.8.0`

A temporary fix I'm using is:

```
React.Dom = React.DOM;
```

after `react` has loaded but before any of my code runs. But this needs to be fixed upstream. 

Unless I'm missing something? A version mismatch?
"
,,,https://github.com/facebook/react/issues/727,727,onDrag* event objects do not have `dataTransfer` property,[],closed,False,,1,2013-12-27T17:15:33Z,2013-12-29T07:16:31Z,2013-12-29T07:16:31Z,CONTRIBUTOR,completed,,"HTML5 drag events include a `dataTransfer` property. React drag events don't. Shimming this for legacy browsers would be difficult but it's something to look into.
More on the `dataTransfer` object:
http://www.html5rocks.com/en/tutorials/dnd/basics/
https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer
"
,,,https://github.com/facebook/react/issues/649,649,ReactAnimationGroup failing to re-add components/reverse animations.,[],closed,False,,2,2013-12-10T08:37:58Z,2013-12-23T23:36:29Z,2013-12-23T23:36:29Z,CONTRIBUTOR,completed,,"Please see: http://jsfiddle.net/LvkNt/10/  and do the following:
1. Click 'Toggle' to make the list-item fade into view.
2. Double-click/Spam-click the 'Toggle' button again to make the item fade-out of view.
3. Click 'Toggle' again to try to make the component come back into view.

You'll see that the item doesn't come back!  If you check the HTML, you can see that the list-item is still there, with the class name ""example-leave example-leave-active"".  

I suspect that React should reverse the animation elegantly in the case of the same component being re-added in the render function during a leave transition.
"
,,,https://github.com/facebook/react/issues/766,766,Source map support for jsx binary,"[{""id"":40929153,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement"",""name"":""Type: Enhancement"",""color"":""84b6eb"",""default"":false,""description"":null},{""id"":71502270,""node_id"":""MDU6TGFiZWw3MTUwMjI3MA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure"",""name"":""Component: Build Infrastructure"",""color"":""f9d0c4"",""default"":false,""description"":null}]",closed,False,,16,2013-12-31T20:03:33Z,2015-07-28T22:04:40Z,2015-07-28T22:04:40Z,COLLABORATOR,completed,,"Would be nice.
"
,,,https://github.com/facebook/react/issues/951,951,[DOCS] Schema for the component lifecycle,[],closed,False,,4,2014-01-22T13:49:46Z,2014-09-23T23:51:45Z,2014-09-23T23:51:45Z,NONE,completed,,"Hello guys,

It would be awesome if the [lifecycle doc page](http://facebook.github.io/react/docs/component-specs.html) had a simple schema that outline the order of methods.
"
,,,https://github.com/facebook/react/issues/812,812,Server rendering is slower with npm react,"[{""id"":71502270,""node_id"":""MDU6TGFiZWw3MTUwMjI3MA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure"",""name"":""Component: Build Infrastructure"",""color"":""f9d0c4"",""default"":false,""description"":null}]",closed,False,,59,2014-01-04T18:09:15Z,2017-03-08T23:32:27Z,2015-04-01T22:49:21Z,CONTRIBUTOR,completed,zpao,"I ran a few benchmarks on the server (modifying https://github.com/paulshen/react-bench to not use jsdom). The results were surprising, as the browserified `react.js` was about **30% faster** than the npm version, even with `NODE_ENV=production`.

The performance ranking (test run time) was `react.min.js` < `react.js` < `NODE_ENV=production node react` < `node react`.

I suspect `process.env` is not a regular js object but perhaps a getter and thus carries a penalty when you test for `""production"" !== process.env.NODE_ENV` everywhere. 

Also the minified version might still perform best of all, as at least some time ago V8 used function source length (including comments) as a heuristic for function complexity / compilation time and thus affecting chances for optimization in some cases, but the effect might be negligible.
"
,,,https://github.com/facebook/react/issues/999,999,Should be able to specify types when using React.PropTypes.oneOf(),[],closed,False,,1,2014-01-30T23:33:43Z,2014-01-30T23:38:14Z,2014-01-30T23:38:14Z,CONTRIBUTOR,completed,,"I see why it doesn't work (see the implementation of `createObjectFromKeys()`) but it's unfortunate that we can't do this:

```
propTypes:
  size: React.PropTypes.oneOf [16, 24, 36, 48, 64]
```

When I set the `size` prop to a bonafide number, I get this:

```
Invariant Violation: Invalid prop `size` supplied to `FooComponent`, expected one of [""16"",""24"",""36"",""48"",""64""].
```

Of course, `oneOf()` calls `createObjectFromKeys()` which turns my array of numbers into an object where each number gets cast to a string and used as a key to store the value `true`.
"
,,,https://github.com/facebook/react/issues/882,882,Ship 0.8.1,"[{""id"":74359453,""node_id"":""MDU6TGFiZWw3NDM1OTQ1Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Release"",""name"":""Type: Release"",""color"":""00D8EA"",""default"":false,""description"":null}]",closed,False,,4,2014-01-13T23:22:54Z,2014-02-13T07:30:16Z,2014-02-13T07:30:16Z,MEMBER,completed,zpao,"There are a few things that we've fixed which should be safe to put into a 0.8.1, mostly related to `ReactTransitionGroup`.

I wish there were a better tool for this, but here are all the commits to consider (I think):
https://github.com/facebook/react/compare/39037ee...7a9e544 and https://github.com/facebook/react/compare/7a9e544...master

Let's collect commits/PRs we want to take
"
,,,https://github.com/facebook/react/issues/837,837,Detect vendor prefixes for CSS numeric value detection,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,3,2014-01-07T22:19:52Z,2014-02-13T07:55:20Z,2014-02-13T07:55:20Z,MEMBER,completed,chenglou,"If we add support for `flex` in #836, we need to support vendor prefixes as well.

Right now we just hard code the list of properties and check the object (https://github.com/facebook/react/blob/master/src/dom/CSSProperty.js#L24) to see if we should allow a numeric value unchanged. `flex` will need to support checking vendor prefixed values, so I think we should change our lookups.

We should still hard-code the values, but not include all of the possible prefixes. Instead we'll add a method which checks the object and falls back to stripping the prefix (I think `/^-\w-/` should find the prefix) and then checking.
I think we should call a method
"
,,,https://github.com/facebook/react/issues/793,793,Document displayName,[],closed,False,,1,2014-01-03T18:02:23Z,2014-01-04T18:41:57Z,2014-01-04T18:41:57Z,CONTRIBUTOR,completed,,"I couldn't find a reference to the fact that jsx transform attaches `displayName` to the component spec, this would be nice to document somewhere (more importantly, that not using jsx means debugging messages will be littered with `undefined.method`). I found this while using [hyper](https://github.com/xixixao/hyper).
"
,,,https://github.com/facebook/react/issues/972,972,JSXTransformer in used in r.js optimizer can't load SourceMapGenerator,[],closed,False,,4,2014-01-25T19:41:02Z,2014-08-19T01:10:57Z,2014-08-19T01:10:57Z,NONE,completed,,"This is a tricky issue, so I'll do my best to explain:

I've been using the [jsx-requirejs-plugin](https://github.com/philix/jsx-requirejs-plugin) to build my React app using AMD. I've been using a [custom branch](https://github.com/thomasboyt/react/tree/venmo) of React (with [custom builds](https://github.com/thomasboyt/react-build)), which is based off of master.

Until recently, everything was working fine. But since https://github.com/facebook/react/commit/7675611e5f8b89e5e304acceaa645879b45111e1, I've been unable to create optimized builds using the plugin. At first, I assumed it was an issue with the plugin, but it seems that the offending line is the changed `transform` function:

``` js
function transformReact(source) {
  return transform(visitors.react, source, {sourceMap: true});
}

exports.transform = transformReact;
```

Until this change, `{sourceMap: true}` wasn't forced on, and things worked just fine. With this change, it's no longer possible to build in an AMD environment, as [this line](https://github.com/facebook/jstransform/blob/master/src/jstransform.js#L228) errors out with:

``` js
Running ""requirejs:dist"" (requirejs) task
>> Tracing dependencies for: js/lib/requirejs/require
Error 0
TypeError: undefined is not a function
    at Object../array-set (eval at <anonymous> (/Users/thomasboyt/venmo-devops/venmo-web-views-base/node_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:23690:38)
, <anonymous>:8707:1)
    at s (eval at <anonymous> (/Users/thomasboyt/venmo-devops/venmo-web-views-base/node_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:23690:38), <anonymous>:4:5
21)
    at i (eval at <anonymous> (/Users/thomasboyt/venmo-devops/venmo-web-views-base/node_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:23690:38), <anonymous>:4:5
72)
    at Object../source-map/source-map-consumer (eval at <anonymous> (/Users/thomasboyt/venmo-devops/venmo-web-views-base/node_modules/grunt-contrib-requirejs/node_modules/require
js/bin/r.js:23690:38), <anonymous>:7854:30)
    at s (eval at <anonymous> (/Users/thomasboyt/venmo-devops/venmo-web-views-base/node_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:23690:38), <anonymous>:4:5
21)
    at i (eval at <anonymous> (/Users/thomasboyt/venmo-devops/venmo-web-views-base/node_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:23690:38), <anonymous>:4:5
72)
    at transform (eval at <anonymous> (/Users/thomasboyt/venmo-devops/venmo-web-views-base/node_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:23690:38), <anonym
ous>:10274:30)
    at Object.transformReact [as transform] (eval at <anonymous> (/Users/thomasboyt/venmo-devops/venmo-web-views-base/node_modules/grunt-contrib-requirejs/node_modules/requirejs/
bin/r.js:23690:38), <anonymous>:11686:10)
    at jsx.load.onLoad (eval at <anonymous> (/Users/thomasboyt/venmo-devops/venmo-web-views-base/node_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:23690:38), <
anonymous>:39:36)
    at Object.text.finishLoad (eval at <anonymous> (/Users/thomasboyt/venmo-devops/venmo-web-views-base/node_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:23690
:38), <anonymous>:152:13)
```

My best guess is that the [array-set module](https://github.com/mozilla/source-map/blob/master/lib/source-map/array-set.js) isn't being correctly loaded (although it is included [in the built file](https://github.com/thomasboyt/react-build/blob/master/JSXTransformer.js#L7866)), but I don't know enough about Browserify to debug this. Hoping someone else can take a look and find out what's going on.

(in the meantime, I suppose I'll update my branch to undo the change that set `{sourceMap: true}`)
"
,,,https://github.com/facebook/react/issues/839,839,"Warning for <option selected=""..."">","[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null}]",closed,False,,2,2014-01-08T00:29:23Z,2014-01-08T00:38:35Z,2014-01-08T00:38:35Z,CONTRIBUTOR,completed,,"Using `<option selected=""..."">` is the standard way to set a value on a `<select>` component. Yet, React uses another convention: http://facebook.github.io/react/docs/forms.html#why-select-value

We should add a warning when the value is being set on the `<option>` and tell the developer to put `value` on the `<select>` in DEV.

Example: http://jsfiddle.net/vjeux/LT6Bw/
"
,,,https://github.com/facebook/react/issues/883,883,problem with `getInitialState` returning `null`,[],closed,False,,2,2014-01-14T01:52:44Z,2014-01-14T21:06:07Z,2014-01-14T21:06:07Z,CONTRIBUTOR,completed,,"Right now it's accepted to return `null` from `getInitialState`, but if a mixin also defines a `getInitialState`, and if one of the two returns `null` then the merge throws an error when trying to merge an object with `null`. What should be the correct behavior here?

@cpojer 
"
,,,https://github.com/facebook/react/issues/1191,1191,renderIntoDocument is not working.,[],closed,False,,2,2014-02-27T08:28:24Z,2014-03-24T05:06:38Z,2014-03-24T05:06:38Z,NONE,completed,,"hi guys. 

rails4, jasmine 2.0.0, backbone 1.1.2.
Is this my fault?

``` javascript
describe(""cNotice"", function () {
    it(""lol"", function () {
        console.log(Notice); // present
        console.log(<Notice message=""show me the message"" />); // return Constructor

        var instance = <Notice message=""show me the message"" />;
        var component = React.addons.TestUtils.renderIntoDocument(instance);
        expect(component.getDOMNode().childNodes[0].className).toBe('notice');
    });
});
```

> Error: Invariant Violation: addComponentAsRefTo(...): Only a ReactOwner can have refs. This usually means that you're trying to add a ref to a component that doesn't have an owner (that is, was not created inside of another component's render method). Try rendering this component inside of a new top-level component which will hold the ref.

this code is no problem

``` javascript
describe(""cNotice"", function () {
    var Notice = null;
    beforeEach(function () { Notice = React.createClass({...}); });

    it(""lol"", function () {
        var instance = <Notice message=""show me the message"" />;
        var component = React.addons.TestUtils.renderIntoDocument(instance);
        expect(component.getDOMNode().childNodes[0].className).toBe('notice');
    });
});
```

but i want to import Notice component from external file

Thanks!!
"
,,,https://github.com/facebook/react/issues/1164,1164,ReactComponent.isValidComponent returns true for component classes,[],closed,False,"{""url"":""https://api.github.com/repos/facebook/react/milestones/5"",""html_url"":""https://github.com/facebook/react/milestone/5"",""labels_url"":""https://api.github.com/repos/facebook/react/milestones/5/labels"",""id"":570060,""node_id"":""MDk6TWlsZXN0b25lNTcwMDYw"",""number"":5,""title"":""0.9.1"",""description"":""To collect things that should definitely going into a 0.9.1 release."",""creator"":{""login"":""zpao"",""id"":8445,""node_id"":""MDQ6VXNlcjg0NDU="",""avatar_url"":""https://avatars.githubusercontent.com/u/8445?v=4"",""gravatar_id"":"""",""url"":""https://api.github.com/users/zpao"",""html_url"":""https://github.com/zpao"",""followers_url"":""https://api.github.com/users/zpao/followers"",""following_url"":""https://api.github.com/users/zpao/following{/other_user}"",""gists_url"":""https://api.github.com/users/zpao/gists{/gist_id}"",""starred_url"":""https://api.github.com/users/zpao/starred{/owner}{/repo}"",""subscriptions_url"":""https://api.github.com/users/zpao/subscriptions"",""organizations_url"":""https://api.github.com/users/zpao/orgs"",""repos_url"":""https://api.github.com/users/zpao/repos"",""events_url"":""https://api.github.com/users/zpao/events{/privacy}"",""received_events_url"":""https://api.github.com/users/zpao/received_events"",""type"":""User"",""site_admin"":false},""open_issues"":0,""closed_issues"":8,""state"":""closed"",""created_at"":""2014-02-15T01:59:57Z"",""updated_at"":""2014-08-16T01:37:42Z"",""due_on"":null,""closed_at"":""2014-05-17T18:11:05Z""}",5,2014-02-24T00:42:06Z,2014-07-14T17:23:03Z,2014-04-12T03:48:29Z,COLLABORATOR,completed,,"The last two assertions in this new test don't pass because of the duck-typing check added in fc2805fe.

@sebmarkbage Not quite sure what you had in mind here. Not every object whose `.type` is a component class is a valid descriptor… right?

``` js
it('should identify valid components correctly', function() {
  var Component = React.createClass({
    render: function() {
      return <div />;
    }
  });

  expect(ReactComponent.isValidComponent(<div />)).toEqual(true);
  expect(ReactComponent.isValidComponent(<Component />)).toEqual(true);

  expect(ReactComponent.isValidComponent(null)).toEqual(false);
  expect(ReactComponent.isValidComponent(true)).toEqual(false);
  expect(ReactComponent.isValidComponent({})).toEqual(false);
  expect(ReactComponent.isValidComponent(""string"")).toEqual(false);
  expect(ReactComponent.isValidComponent(React.DOM.div)).toEqual(false);  // FAIL
  expect(ReactComponent.isValidComponent(Component)).toEqual(false);  // FAIL
});
```
"
,,,https://github.com/facebook/react/issues/1089,1089,Tutorial revamp,[],closed,False,,1,2014-02-14T21:05:54Z,2014-05-23T09:08:26Z,2014-05-23T09:08:03Z,CONTRIBUTOR,completed,,"Would like to include:
- Routing
- Model objects
- Integration with a jQuery plugin (sortable?)

Related: https://github.com/facebook/react/issues/971
"
,,,https://github.com/facebook/react/issues/1111,1111,CSSTransitionGroup not working in Safari 5.1,[],closed,False,"{""url"":""https://api.github.com/repos/facebook/react/milestones/5"",""html_url"":""https://github.com/facebook/react/milestone/5"",""labels_url"":""https://api.github.com/repos/facebook/react/milestones/5/labels"",""id"":570060,""node_id"":""MDk6TWlsZXN0b25lNTcwMDYw"",""number"":5,""title"":""0.9.1"",""description"":""To collect things that should definitely going into a 0.9.1 release."",""creator"":{""login"":""zpao"",""id"":8445,""node_id"":""MDQ6VXNlcjg0NDU="",""avatar_url"":""https://avatars.githubusercontent.com/u/8445?v=4"",""gravatar_id"":"""",""url"":""https://api.github.com/users/zpao"",""html_url"":""https://github.com/zpao"",""followers_url"":""https://api.github.com/users/zpao/followers"",""following_url"":""https://api.github.com/users/zpao/following{/other_user}"",""gists_url"":""https://api.github.com/users/zpao/gists{/gist_id}"",""starred_url"":""https://api.github.com/users/zpao/starred{/owner}{/repo}"",""subscriptions_url"":""https://api.github.com/users/zpao/subscriptions"",""organizations_url"":""https://api.github.com/users/zpao/orgs"",""repos_url"":""https://api.github.com/users/zpao/repos"",""events_url"":""https://api.github.com/users/zpao/events{/privacy}"",""received_events_url"":""https://api.github.com/users/zpao/received_events"",""type"":""User"",""site_admin"":false},""open_issues"":0,""closed_issues"":8,""state"":""closed"",""created_at"":""2014-02-15T01:59:57Z"",""updated_at"":""2014-08-16T01:37:42Z"",""due_on"":null,""closed_at"":""2014-05-17T18:11:05Z""}",2,2014-02-17T18:13:19Z,2014-02-24T07:41:36Z,2014-02-24T07:41:36Z,MEMBER,completed,petehunt,"> After I changed from react-with-addons-0.8.0.js to react-with-addons-0.9.0-rc1.js, and from JSXTransformer-0.8.0.js to JSXTransformer-0.9.0-rc1.js, and replaced React.addons.TransitionGroup with React.addons.CSSTransitionGroup, my transistions (-leave, -leave-active) no longer work in Safari 5.1.10 (Mac OS X). I understand that Safari 5.1.10 is now regarded a bit too old, e.g. by GitHub, but is React 0.9.0 meant to support this browser?
> My transistions work fine in Safari 6.1.1 and Chrome 32.0.1700.107.

https://groups.google.com/forum/#!topic/reactjs/a2CQqym1BIw
"
,,,https://github.com/facebook/react/issues/1035,1035,Allow html conditional comments and doctype,[],closed,False,,56,2014-02-06T16:10:15Z,2020-09-30T01:37:43Z,2017-10-01T22:24:19Z,NONE,completed,,"I'm hacking on an fully server and client compatible app using React. One obstactle I'm running into is it seems react doesn't like exclamation marks in your jsx-style code.

Here's an example of a pretty standard boilerplate for HTML:

```
<!doctype html>
  <!--[if IE 7]>    <html class=""no-js ie ie7 ltie8 ltie9""><![endif]-->
  <!--[if IE 8]>    <html class=""no-js ie ie8 ltie9""><![endif]-->
  <!--[if gt IE 8]> <html class=""no-js ie gtie8""><![endif]-->
  <!--[if !IE]><!--><html class=""no-js"" xmlns:og=""http://opengraphprotocol.org/schema/"" xmlns:fb=""http://www.facebook.com/2008/fbml"" ><!--<![endif]-->
    <head>
      <meta charset=""utf-8"">
      <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"">
      <title></title>
      <meta name=""description"" content="""">
      <meta name=""viewport"" content=""width=device-width, initial-scale=1"">

      <link rel=""stylesheet"" href=""/css/app.css"" type=""text/css"" media=""all"" />
    </head>
    <body>
      <!--[if lt IE 8]>
        <p class=""browsehappy"">You are using an <strong>outdated</strong> browser. Please <a href=""http://browsehappy.com/"">upgrade your browser</a> to improve your experience.</p>
      <![endif]-->

      {this.props.page}

      <!-- <script src=""/js/vendor.js""></script> -->
      <script src=""/js/app.js""></script>
    </body>
  </html>
```

I think it's getting stuck on the conditional comments in this example.

I would prefer to keep this code in the HTML style, and to render it from the server without making major changes, it needs to be inside a react class. I'd be open to trying to hack this together, I may take a stab sometime this coming week.
"
,,,https://github.com/facebook/react/issues/1129,1129,React.renderComponentToString() and ExecutionEnvironment.canUseDOM,[],closed,False,,2,2014-02-19T00:14:14Z,2014-04-07T04:21:45Z,2014-04-07T04:21:45Z,NONE,completed,,"I'm using `React.renderComponentToString()` to test generated output from my [forms library](https://github.com/insin/newforms/tree/react), sharing the same set of QUnit tests between Firefox, Chrome and Node.js (using [qqunit](https://github.com/hornairs/qqunit)).

This function has always thrown errors for me when used in the browser, but my tests still worked because it seemed to call the callback before throwing the error in the [custom assertion function](https://gist.github.com/insin/9005207) I've been using.

Trying 0.9.0-rc1:
- my browser test suites are complaining because the function is now synchronous so the error is being thrown before I can get a hold of generated HTML.
- when run in Node.js, the tests are bombing out on the navigator check for Chrome becuase qqunit fakes out a `window` global using jsdom, but not a `navigator`. If I patch in a check for navigator not being undefined, I then get the same results as when running in a browser.

So I edited the node_modules version of 0.9.0-rc1 to add a process check to `canUseDOM`:

``` javascript
var canUseDOM = typeof window !== 'undefined' && typeof process === 'undefined';
```

Now all my tests run in Node.js, but it complains about some assertions (because boolean HTML attributes no longer have the `=""boolean""` part in the generated markup - no biggie).

I then edited the version of 0.9.0-rc1 my test browsers were using with the following:

``` javascript
var canUseDOM = false;
```

Now there are no more errors being thrown when I call `React.renderComponentToString()` and I have the same errors about HTML differences as I was getting when running in Node.js.

TL;DR: should React always be using the equivalent of `var canUseDOM = false;` when executing `React.renderComponentToString()`? It stops it from throwing errors.
"
,,,https://github.com/facebook/react/issues/1105,1105,handleTopLevel can throw when removing event target,[],closed,False,"{""url"":""https://api.github.com/repos/facebook/react/milestones/3"",""html_url"":""https://github.com/facebook/react/milestone/3"",""labels_url"":""https://api.github.com/repos/facebook/react/milestones/3/labels"",""id"":553899,""node_id"":""MDk6TWlsZXN0b25lNTUzODk5"",""number"":3,""title"":""0.9"",""description"":"""",""creator"":{""login"":""zpao"",""id"":8445,""node_id"":""MDQ6VXNlcjg0NDU="",""avatar_url"":""https://avatars.githubusercontent.com/u/8445?v=4"",""gravatar_id"":"""",""url"":""https://api.github.com/users/zpao"",""html_url"":""https://github.com/zpao"",""followers_url"":""https://api.github.com/users/zpao/followers"",""following_url"":""https://api.github.com/users/zpao/following{/other_user}"",""gists_url"":""https://api.github.com/users/zpao/gists{/gist_id}"",""starred_url"":""https://api.github.com/users/zpao/starred{/owner}{/repo}"",""subscriptions_url"":""https://api.github.com/users/zpao/subscriptions"",""organizations_url"":""https://api.github.com/users/zpao/orgs"",""repos_url"":""https://api.github.com/users/zpao/repos"",""events_url"":""https://api.github.com/users/zpao/events{/privacy}"",""received_events_url"":""https://api.github.com/users/zpao/received_events"",""type"":""User"",""site_admin"":false},""open_issues"":0,""closed_issues"":36,""state"":""closed"",""created_at"":""2014-01-31T01:55:33Z"",""updated_at"":""2014-02-20T23:49:55Z"",""due_on"":""2014-02-20T08:00:00Z"",""closed_at"":""2014-02-20T23:49:55Z""}",0,2014-02-17T07:44:41Z,2014-02-18T01:53:51Z,2014-02-18T01:53:51Z,COLLABORATOR,completed,,"This throws when you click the text:

http://jsbin.com/remixuxu/3/edit
"
,,,https://github.com/facebook/react/issues/1108,1108,Browserify -r react takes almost 7 seconds,[],closed,False,,1,2014-02-17T16:11:36Z,2014-02-18T00:10:14Z,2014-02-18T00:10:14Z,CONTRIBUTOR,completed,,"React 0.8

```
% time browserify -r react > /dev/null
browserify -r react > /dev/null  1.67s user 0.15s system 103% cpu 1.759 total
```

React 0.9

```
wmbp % time browserify -r react > /dev/null            ~/Workspace/test/react09
browserify -r react > /dev/null  6.97s user 0.25s system 101% cpu 7.091 total
```

I think this is because of [envify](https://github.com/hughsk/envify) switched to [recast](https://github.com/benjamn/recast) in 1.0.0. I submitted a [patch](https://github.com/hughsk/envify/pull/5) to envify which uses [jstransform](https://github.com/facebook/jstranform) instead of recast.

This brings us back to 1.5s and delivers the same advantages as recast version (preserves code formatting):

```
wmbp % time browserify -r react > /dev/null
browserify -r react > /dev/null  1.52s user 0.16s system 104% cpu 1.602 total
```

I think this is blocker for 0.9.0.
"
,,,https://github.com/facebook/react/issues/1266,1266,Can't pass props as object,[],closed,False,,2,2014-03-17T22:48:34Z,2014-03-20T18:27:57Z,2014-03-20T18:27:57Z,NONE,completed,,"This is pretty annoying because you can see when editing the compiled version I can do:

```
var props = {href:this.props.anchor_href, className:titleClass}

for (key in this.props.data_attributes.items){
      name = ""data-"" + key
      props[name] = this.props.data_attributes.items[key];
   }

```

As you can see I loop through to create new attributes then just do `React.DOM.a(props)` but before compiling, through jsx, I don't see a possible way to do this.
"
,,,https://github.com/facebook/react/issues/1302,1302,Make React.createClass warn/throw if mixins contains undefined value,"[{""id"":40929153,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement"",""name"":""Type: Enhancement"",""color"":""84b6eb"",""default"":false,""description"":null}]",closed,False,,5,2014-03-26T07:46:39Z,2016-02-10T20:58:27Z,2016-02-10T20:58:27Z,CONTRIBUTOR,completed,,"Code below could be a result of a typo in a mixin name or an attempt to use a mixin from a module which has no `module.exports` (by a mistakte).

```
var Component = React.createClass({
  mixins: [undefined],
  ...
});
```

It would be nice if React can warn/throw on such condition.
"
,,,https://github.com/facebook/react/issues/1304,1304,Trigger animations when component did mount if needed,[],closed,False,,9,2014-03-26T16:09:11Z,2014-06-26T18:01:39Z,2014-05-23T01:33:48Z,NONE,completed,,"Current animations triggered when changes occured in component, but in some cases we need launch an animation when component did mount. What if we add `componentDidMount` in `ReactTransitionGroup` with this code:

```
componentDidMount: function () {
  if (this.props.transitionImmediately) {
      var nextChildMapping = this.state.children;
      var key;

      for (key in nextChildMapping) {
        if (!this.currentlyTransitioningKeys[key]) {
          this.keysToEnter.push(key);
        }
      }

      var keysToEnter = this.keysToEnter;
      this.keysToEnter = [];
      keysToEnter.forEach(this.performEnter);
    }
}
```

and then we can pass `transitionImmediately` to `CSSTransitionGroup` that would launch animation.
"
,,,https://github.com/facebook/react/issues/1227,1227,Event handlers from different component trees should batch together,[],closed,False,,2,2014-03-07T06:06:53Z,2014-04-12T00:16:05Z,2014-04-12T00:16:05Z,COLLABORATOR,completed,,"Right now, ReactUpdates.batchedUpdates is called in ReactEventEmitterMixin.js but should probably be higher up in ReactTopLevelEventCallback.js so that with nested roots, updates are queued into the same batch.
"
,,,https://github.com/facebook/react/issues/1331,1331,Don't give key warning when rendering to static markup,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null}]",closed,False,,2,2014-03-30T03:51:57Z,2017-10-01T22:40:35Z,2017-10-01T22:40:35Z,MEMBER,completed,,"Not a huge deal, but a bit silly since this markup won't be mounted.
"
,,,https://github.com/facebook/react/issues/1416,1416,componentDidMount runs once !,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,4,2014-04-16T10:42:00Z,2019-03-19T19:56:02Z,2014-04-16T17:47:43Z,NONE,completed,,"hi

im trying to do something always after render()

but the componentDidMount only called once after the state change and after render()

is there any way to run a method always after render()? even the state or prop change?
"
,,,https://github.com/facebook/react/issues/1360,1360,Debounce and onChange,[],closed,False,,14,2014-04-06T17:35:16Z,2020-04-05T16:15:34Z,2014-04-08T19:48:15Z,NONE,completed,,"Hello. I have some problem about text input and onChange event. I need debouncing user input, but if I debounce onChange handle, there's no e.target and no opportunity for extract input value. How can I hack this situation?

Example: http://jsfiddle.net/e6JQn/
"
,,,https://github.com/facebook/react/issues/1398,1398,React.renderComponentToStaticMarkup doesn't generate selected attributes from value/defaultValue,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,9,2014-04-11T11:16:02Z,2015-04-07T23:49:10Z,2015-04-07T23:49:10Z,NONE,completed,,"I'm using static markup for unit testing [newforms](https://github/insin/newforms) output and I'd also like to support using it to render forms as static HTML.

Adding a `value` or `defaultValue` to a `<select>` doesn't generate static HTML with the appropriate `selected` attributes. However, they do get generated if you manually add them to `<option>` components, but then you get warning messages in the console when using the development build of React.

Is it possible to support both use cases without manually setting `selected` attributes, or will I just have to live with the warnings? :)

JSFiddle showing `<select>` static HTML output: http://jsfiddle.net/insin/2tvb7/3/
"
,,,https://github.com/facebook/react/issues/1400,1400,ReactMount: Two valid but unequal nodes with the same `%s`: %s,[],closed,False,,32,2014-04-11T15:59:59Z,2015-09-23T00:10:18Z,2015-05-17T19:00:16Z,CONTRIBUTOR,completed,,"https://github.com/facebook/react/blob/master/src/browser/ui/ReactMount.js#L81

It seems this is mainly the cause of invalid nesting of tags, `<a><div /></a>`, `<table><tr></tr></table>`, etc. I know there are some issues/PRs regarding this already but AFAIK they're trying to solve/detect it, it seems reasonable to just improve this (very non-informative) error message in the meantime.

PS. I've probably seen 2-3 people get bitten by it myself now that I think about it.
"
,,,https://github.com/facebook/react/issues/1408,1408,Update refs example code to use onChange,[],closed,False,,0,2014-04-14T22:53:48Z,2014-04-14T23:23:35Z,2014-04-14T23:23:35Z,MEMBER,completed,,"As mentioned in the comments: http://facebook.github.io/react/docs/more-about-refs.html?fb_comment_id=fbc_1394712857412174_310071_1479291902287602#f282e34228
"
,,,https://github.com/facebook/react/issues/1375,1375,RFC Pointer events,[],closed,False,,5,2014-04-08T20:00:44Z,2014-04-09T20:40:36Z,2014-04-09T20:40:36Z,CONTRIBUTOR,completed,,"http://handjs.codeplex.com/

Stumbled across this a few days ago, MS is seemingly pushing for it to become a standard and looking at other solutions/implementations they seem to align. http://www.w3.org/TR/pointerevents/

Practically it seems like a great thing to support, even if React doesn't provide a core polyfill. Simply adding support for the events so that users are free to polyfill themselves using a library of their choice seems like a great thing.

I don't mind providing a PR (should be a simple matter) if you agree.
"
,,,https://github.com/facebook/react/issues/1584,1584,Parse error is confusing when trying to return two elements,[],closed,False,,1,2014-05-21T23:34:16Z,2014-05-23T03:16:45Z,2014-05-23T03:16:45Z,COLLABORATOR,completed,,"(Opening here because esprima-fb apparently doesn't accept issues.)

If you write

```
return <div className=""one"" /><div className=""two"" />;
```

then you get ""Unexpected identifier"" because it tries to parse it as

```
return React.DOM.div({className: ""one""})  < div className ...
```

That is, the `<` of the second div is interpreted as a less than. I think we can give nicer errors here if we disallow the less than operator directly after an XJSElement. I don't think this prevents any real uses but if it did, you could always wrap it in parens:

```
return (<div className=""one"" />) < threshold;
```

cc @jeffmo @syranide
"
,,,https://github.com/facebook/react/issues/1582,1582,Warn when using PropTypes.instanceOf incorrectly,[],closed,False,,1,2014-05-21T18:19:44Z,2015-04-01T22:25:32Z,2015-04-01T22:25:32Z,COLLABORATOR,completed,,"Someone here wrote

```
React.PropTypes.instanceOf(React.PropTypes.object).isRequired
```

instead of

```
React.PropTypes.object.isRequired
```

Would be nice if we could give some sort of warning here; not sure if it's possible though.

cc @zgotsch
"
,,,https://github.com/facebook/react/issues/1524,1524,Add support for strokeDasharray,[],closed,False,,1,2014-05-14T03:07:50Z,2014-05-14T16:42:42Z,2014-05-14T16:42:42Z,NONE,completed,,"This didn't work when I tried to set it, and it's not on the list of supported svg attributes, so adding it would be nice.
"
,,,https://github.com/facebook/react/issues/1588,1588,Being able to mixin `propTypes` as defined in Mixin,[],closed,False,,2,2014-05-22T11:09:37Z,2014-05-22T18:27:26Z,2014-05-22T18:27:26Z,CONTRIBUTOR,completed,,"Imho it would be useful to be able to define `propTypes` per `Mixin`. I.e.: sometimes the Mixin-code may rely on methods defined on the `Component` that mixes-in the `Mixin`. 

In such a case it would make sense to combine/mixin `propTypes` as defined on the `Component` with `propTypes` of each of the included `Mixins`. 

What do you think? 
"
,,,https://github.com/facebook/react/issues/1573,1573,SVG dy attribute is ignored,[],closed,False,,8,2014-05-20T03:40:37Z,2014-05-20T08:23:56Z,2014-05-20T04:27:24Z,NONE,completed,,"Rendering a `text` element with a `dy` attribute in react does not actually render the `dy` element.  It is simply ignored.

Repro: http://jsfiddle.net/avh4/B2R5s/
"
,,,https://github.com/facebook/react/issues/1519,1519,Using routes + server rendering,[],closed,False,,4,2014-05-12T11:05:41Z,2015-04-01T22:54:20Z,2015-04-01T22:50:13Z,NONE,completed,,"Could you please show an example of using FLUX with routing?
You say that each data store is for a domain, that means that each route has it's own data store and event helpers... So does it mean that we can use any router script to dispatch actions on route change?

In this case what's about server side routing, yes I know that we speak about client side apps, but react was designd also to be server rendered. Is it possible to use kind of the FLUX code on server in case we want to add server rendering for SEO purposes?
"
,,,https://github.com/facebook/react/issues/1718,1718,IFrame onLoad event with React,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,15,2014-06-18T21:09:06Z,2019-07-05T07:10:39Z,2015-04-29T09:00:32Z,CONTRIBUTOR,completed,,"I have the following iframe element rendered in one of my React components:

``` html
<iframe ref=""iframe"" src={this.props.url} width=""100%"" height=""100%"" frameBorder=""0""></iframe>
```

I have tried adding `onLoad` event as well as attaching `onload` directly to DOM like so:

``` js
this.refs.iframe.getDOMNode().setAttribute('onload', this.getUrl);
```

Where `getUrl` is the function of my React component:

``` js
getUrl: function() {
    var path = this.refs.iframe.getDOMNode().contentWindow.location.pathname;
    console.log(path);
},
```

Except that won't work. if I set attribute to `""getUrl()""` - IFrame will look for that function in the global scope, if i set it to the above, IFrame won't recognize React component's `this.getUrl` function.
##### In Short: I want to notify the React component whenever a URL changes inside the iframe.
"
,,,https://github.com/facebook/react/issues/1764,1764,Key enter on anchor should fire click event. ,[],closed,False,,0,2014-06-30T05:40:22Z,2014-06-30T05:50:09Z,2014-06-30T05:50:09Z,NONE,completed,,"Key enter on focused anchor fires click event in raw DOM. React should mimics this browser behaviour.
"
,,,https://github.com/facebook/react/issues/1667,1667,Unrecognized entities give strange `undefined`,[],closed,False,,6,2014-06-10T02:58:32Z,2015-10-09T18:14:20Z,2015-10-09T18:14:20Z,COLLABORATOR,completed,,"If you compile this JSX:

```
<CalEvent href=""/events?fields=(id,summary)&key=YOUR_KEY"" />
```

it turns into:

```
CalEvent( {href:""/events?fields=(id,summary)undefinedEY""} )
```

which seems subpar. I'd expect this to throw an error.
"
,,,https://github.com/facebook/react/issues/1694,1694,How about using listenTo instead of removeListener in Flux?,[],closed,False,,2,2014-06-15T08:02:45Z,2014-06-15T12:08:36Z,2014-06-15T08:39:23Z,NONE,completed,,"I noticed in the demo of Flux, there is:
http://facebook.github.io/react/docs/flux-todo-list.html

``` js
var TodoApp = React.createClass({ 

  getInitialState: function() { 
  }, 

  componentDidMount: function() { 
    TodoStore.addChangeListener(this._onChange); 
  }, 

  componentWillUnmount: function() { 
    TodoStore.removeChangeListener(this._onChange); 
  }, 

  render: function() {
  }, 

  _onChange: function() { 
    this.setState(getTodoState()); 
  } 
}); 
```

While we got this problem in Backbone too, where it as solved with a method called `listenTo`.
http://backbonejs.org/#Events-listenTo
How about introducin similar solution in React to solve the similar problem?
"
,,,https://github.com/facebook/react/issues/1751,1751,Incorrect component name when using JSX and browserify,[],closed,False,,6,2014-06-27T16:31:38Z,2014-06-28T12:52:08Z,2014-06-28T00:55:50Z,CONTRIBUTOR,completed,,"This is not a big deal, but in some Browserify cases the React component name is not correctly inferred from the variable name it is assigned, like it is normally the case during JSX transformation.

This works fine:

```
var Footer = React.createClass({
    ...
});
module.exports = Footer;
```

And produce error messages like: `Warning: Required prop ""appState"" was not specified in ""Footer""`. In this error message, the component name `Footer` was correctly inferred.

Now with another kind of node module declaration:

```
module.exports = React.createClass({
    ...
});
```

This does not work: `Warning: Required prop ""appState"" was not specified in ""exports""`

This is quite annoying because it's then not so easy to know in which component we didn't inject the required props, and I guess some other usecases.

In case the React class is assigned to `module.exports`, I guess the component name should rather be the filename.

Don't know if it's a bug or a feature request, just wanted to mention that
"
,,,https://github.com/facebook/react/issues/1695,1695,JSX transform is difficult to compose,[],closed,False,,5,2014-06-15T19:15:54Z,2015-06-18T18:30:53Z,2015-06-18T18:30:53Z,NONE,completed,,"Hi,

I would like to use all the available es6 transforms, the jsx transform and the [es6-module-jstransform](https://github.com/andreypopp/es6-module-jstransform) for my JavaScript code.

What I'm using is this:

``` js
var transform = require('jstransform').transform;

var visitors = Array.prototype.concat.apply([], [
  require('es6-module-jstransform').visitorList,
  require('jstransform/visitors/es6-arrow-function-visitors').visitorList,
  require('jstransform/visitors/es6-object-concise-method-visitors.js').visitorList,
  require('jstransform/visitors/es6-class-visitors').visitorList,
  require('jstransform/visitors/es6-object-short-notation-visitors').visitorList,
  require('jstransform/visitors/es6-rest-param-visitors').visitorList,
  require('jstransform/visitors/es6-template-visitors').visitorList,
  require('./transforms/react').visitorList,
  require('./transforms/reactDisplayName').visitorList
]);
var es5 = transform(visitors, sourcecode);
```

The problem is that it's difficult to use those jsx transforms without depending on the whole `react-tools` package which would essentially download a lot of dependencies (another jstransform, etc.) just for those two files, which is why I copied them into a transforms directory in my source tree, but that's obviously a bad solution. Wouldn't it be better to put those jsx-transforms into a separate npm package?

Also, I found a reference to something called `typechecks` in [/vendor/fbtransform/syntax.js](https://github.com/facebook/react/blob/2d048f1f34a7d10cca81336446920822ad7ea67c/vendor/fbtransform/syntax.js#L23), but the appropriate visitor doesn't seem to be open source. In my above example I essentially skipped all the typecheck code that's in syntax.js. Could that be a problem in the future?

Awesome library, by the way!
"
,,,https://github.com/facebook/react/issues/1698,1698,Controlled input cursor jumps when used with layers,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,5,2014-06-16T21:45:53Z,2015-02-12T21:02:10Z,2014-07-30T03:15:59Z,COLLABORATOR,completed,,"See http://jsfiddle.net/Bobris/ZZtXn/2/ (try typing at the beginning of the text box).
"
,,,https://github.com/facebook/react/issues/1917,1917,React with JSX error,[],closed,False,,1,2014-07-24T03:01:56Z,2014-08-06T14:12:42Z,2014-07-24T03:57:00Z,CONTRIBUTOR,completed,,"Open http://jsfiddle.net/vjeux/kb3gN/ on Chrome 35.0.1916.153 (Official Build 274914).
The page should show 'Hello world, but nothing shown on page and got error:

```
Uncaught SyntaxError: Variable 'loadScripts' has already been declared
```
"
,,,https://github.com/facebook/react/issues/1789,1789,Can't move `this.props.children` to a different position,[],closed,False,,5,2014-07-04T06:27:01Z,2014-07-05T06:48:28Z,2014-07-04T06:46:29Z,CONTRIBUTOR,completed,,"Heya,

It seems that if I move `this.props.children` from one div to another in `render()`, I get an error if `this.props.children` contains any react components, since they have already been mounted. Intuitively, this feels like something that should work. If you use raw strings as `this.props.children`, this behaves as expected.

Here's a jsfiddle demonstrating it: http://jsfiddle.net/MBNBW/3/
If you remove the `<i>` tag from the children ( http://jsfiddle.net/MBNBW/2/ ), it works as expected.

I tried using `cloneWithProps` to get around this, but since `cloneWithProps` doesn't clone children, it just nests this problem one level deeper (`<i>` works, but `<i><b>` doesn't).
"
,,,https://github.com/facebook/react/issues/1962,1962,ReactTextComponent's string props clashes with cloneWithProps,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,4,2014-07-30T16:54:33Z,2014-09-29T23:15:48Z,2014-09-29T23:15:48Z,CONTRIBUTOR,completed,,"The effect of this can be seen in this gist which uses react-bootstrap: http://jsfiddle.net/Hhc8z/1/

Relevant excerpts from the source:
https://github.com/react-bootstrap/react-bootstrap/blob/master/src/Navbar.jsx#L80
https://github.com/react-bootstrap/react-bootstrap/blob/master/src/utils/ValidComponentChildren.js#L19
https://github.com/react-bootstrap/react-bootstrap/blob/master/src/utils/cloneWithProps.js#L149

I'm trying to fix this in the boostrap lib, but it does seem like a bit of a gotcha anyway.

Is there a documented way to decide if `cloneWithProps` is safe to do, or is this supposed to just work in the current descriptor scheme of things?
"
,,,https://github.com/facebook/react/issues/1855,1855,Minify JSXTransformer.js ,[],closed,False,,2,2014-07-17T03:06:46Z,2014-08-04T22:57:10Z,2014-07-17T04:45:20Z,NONE,completed,,"Can the JSXTransformer.js  in the /build directory be minify?  Provide JSXTransformer.min.js
"
,,,https://github.com/facebook/react/issues/1790,1790,Disabled input still clickable in IE11,"[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,2,2014-07-04T16:32:17Z,2016-08-03T00:48:09Z,2016-04-14T18:40:22Z,NONE,completed,,"http://jsfiddle.net/Brj8m/
"
,,,https://github.com/facebook/react/issues/1805,1805,Tips navigation has titles that run together,"[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null}]",closed,False,,1,2014-07-09T21:38:27Z,2014-12-10T02:21:46Z,2014-07-15T04:33:17Z,COLLABORATOR,completed,,"Hard to tell here where each tip title starts and ends since there's no padding between them:

![image](https://cloud.githubusercontent.com/assets/6820/3531567/3a14207a-07b1-11e4-8765-086c6ca7737e.png)

Ideally there would be some small amount of padding to set them apart.
"
,,,https://github.com/facebook/react/issues/1933,1933,Speed up min builds,"[{""id"":71502270,""node_id"":""MDU6TGFiZWw3MTUwMjI3MA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure"",""name"":""Component: Build Infrastructure"",""color"":""f9d0c4"",""default"":false,""description"":null}]",closed,False,,8,2014-07-25T18:26:47Z,2015-07-28T22:01:43Z,2015-07-28T22:01:43Z,MEMBER,completed,,"We're minifiying twice thanks to `uglifyify`. We need this to remove dead requires. But it also doesn't minify all the way, so we still need `uglify` as well. I haven't actually looked to see if there's a better way.
"
,,,https://github.com/facebook/react/issues/1836,1836,PropTypes: define children component type,[],closed,False,,11,2014-07-15T03:54:07Z,2017-12-06T19:56:03Z,2016-12-11T12:05:39Z,CONTRIBUTOR,completed,,"I was looking for something like:

```
propTypes: {
  children: React.PropTypes.instanceOf(OtherComponent)
}
```

However this doesn't work of course and couldn't find another way of doing this.

Would be nice if this was supported.
"
,,,https://github.com/facebook/react/issues/1856,1856,Add more immutability helpers.,[],closed,False,,9,2014-07-17T07:50:45Z,2016-03-18T21:02:26Z,2016-03-18T21:02:26Z,NONE,completed,,"Hello, I like Idea of immutability helpers in react, but I find them incomplete. I still from time to time switch to Underscore for complex operations on data. Does it make sense to add more helpers like:
- $map
- $filter
- $fold
- set like operations (union/difference/intersection), of course they can be implemented in terms of fold.

What do you think guys? Thanks.
"
,,,https://github.com/facebook/react/issues/2069,2069,SVG Image Element,[],closed,False,,8,2014-08-19T22:18:58Z,2017-03-23T18:58:51Z,2014-08-19T22:19:37Z,NONE,completed,,"Can you please add support for SVG Image Element?
Thanks.
"
,,,https://github.com/facebook/react/issues/2064,2064,Update TestUtils docs on website,[],closed,False,,4,2014-08-19T03:08:32Z,2014-10-21T00:23:50Z,2014-10-21T00:23:50Z,CONTRIBUTOR,completed,,"The file https://github.com/facebook/react/blob/master/docs/docs/09.4-test-utils.md is up to date with `isDescriptorOfType` etc but the website is out of date: http://facebook.github.io/react/docs/test-utils.html
"
,,,https://github.com/facebook/react/issues/2017,2017,No support for <dialog> tag.,[],closed,False,,4,2014-08-10T15:19:35Z,2014-09-03T21:47:41Z,2014-09-03T21:47:41Z,CONTRIBUTOR,completed,,"The `dialog` tag is available in Chrome 37 (and in Chrome 36 behind a flag). I'm trying to use it, and was initially confused when it wasn't being added to the DOM.

Adding it to [ReactDOM.js](https://github.com/facebook/react/blob/master/src/browser/ReactDOM.js) seems to be enough for it to work (but I'm not really familiar with React's code). So I'm hoping that support will be added for it soon.

(http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#the-dialog-element documents the element, there is more info and demos at http://demo.agektmr.com/dialog/.)
"
,,,https://github.com/facebook/react/issues/2073,2073,Component life-cycle methods for update ,[],closed,False,,11,2014-08-20T11:44:31Z,2016-10-27T13:56:26Z,2016-10-27T13:56:26Z,CONTRIBUTOR,completed,,"```
getInitialState
componentWillMount (setState is applied without side-effects)
componentDidMount (setState causes an update)
```

All good, everything makes sense for mounting.

```
componentWillReceiveProps (setState is applied without side-effects)
shouldComponentUpdate
componentWillUpdate (setState is disallowed)
componentDidUpdate (setState causes an update)
```

If you need to update state and it isn't based on the new props, there is no place to do it it seems. Sure, you can stick it in componentWillReceiveProps, but that puts it before shouldComponentUpdate which is bad. componentWillUpdate seems like the obvious choice but it's not allowed, is there a good reason for this or is it ""because you shouldn't""?

Personally, I don't think there are very many reasons to call setState from componentWillUpdate, but I have encountered a scenario or two where I would like to call setState after shouldComponentUpdate (i.e. in componentWIllUpdate).
"
,,,https://github.com/facebook/react/issues/2059,2059,Props and Immutable objects?,[],closed,False,,10,2014-08-18T08:39:00Z,2016-10-27T14:02:49Z,2016-10-27T14:02:49Z,NONE,completed,,"I've started using immutablejs together with reactjs.

However, I've noticed that passing around immutable objects doesn't quite fit together with reactjs, i.e. {...myObject}, {myObjects.map(object => React.DOM.div()} and propTypes don't quite support them without first converting to JS object which has an unnecessary overhead.

Any thoughts or advice on this issue?
"
,,,https://github.com/facebook/react/issues/2011,2011,relatedTarget in blur event in Firefox returns null always,"[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,42,2014-08-07T21:28:00Z,2022-03-11T21:36:29Z,2017-09-19T19:05:32Z,NONE,completed,,"Basically that, the relatedTarget is returning null all the time, when in Chrome it is returning the correct value if clicking on an actual element (will return null if clicking outside the document, which is ok).

This is something that Firefox is doing natively, so there should be some ""patch"" in that case to make it cross browser as a syntethic event.

Here is an example: http://jsfiddle.net/leoasis/kb3gN/4476/ Click the first input and then the second, and you'll see in the console: a) the relatedTarget if in Chrome, or b) null if in Firefox.
"
,,,https://github.com/facebook/react/issues/2166,2166,null props considered differently in getDefaultProps vs. isRequired,[],closed,False,,29,2014-09-09T09:11:52Z,2017-09-20T16:43:01Z,2017-09-19T21:08:24Z,CONTRIBUTOR,completed,,"In the case a `null` argument is passed to a property marked as `isRequired`:
http://jsfiddle.net/jeanlauliac/0n6snb6b/1/

We'll get a proper warning in the console: `Warning: Required prop `name` was not specified in `Hello`.` (though it should probably be ""prop was null"" and not ""prop was not specified"", but anyway)

On the other hand, the default value is only used when the prop is `undefined`, but not when it's `null`. Is this the explicitly wanted behavior? If it is, then we should probably make the documentation explicit about it (http://facebook.github.io/react/docs/reusable-components.html), giving the entire responsibility to component callers of safeguarding against `null`.
"
,,,https://github.com/facebook/react/issues/2157,2157,How to add additional html tag to React.DOM?,"[{""id"":126382236,""node_id"":""MDU6TGFiZWwxMjYzODIyMzY="",""url"":""https://api.github.com/repos/facebook/react/labels/SVG"",""name"":""SVG"",""color"":""f7c6c7"",""default"":false,""description"":null}]",closed,False,,1,2014-09-06T14:19:32Z,2014-09-07T23:57:09Z,2014-09-07T23:57:09Z,NONE,completed,,"I would like to use tag [foreignObject](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject) inside React.

I need this tag for inserting html tags like input and textarea inside svg elements.

Do you plan to officially support this tag in the future and how can I add it my self until then?
"
,,,https://github.com/facebook/react/issues/2229,2229,Remove flux docs,[],closed,False,,3,2014-09-22T20:48:27Z,2014-12-10T02:21:46Z,2014-09-26T14:05:43Z,MEMBER,completed,,"We're basically keeping 2 copies of documentation in sync and failing. We should just point at http://facebook.github.io/flux/docs/overview.html and http://facebook.github.io/flux/docs/todo-list.html.

We should maybe make the permalinks on our site redirect or just link offsite. We should also look for links in our docs pointing to those pages and update.
"
,,,https://github.com/facebook/react/issues/2123,2123,Wanted: blessed access _owner,[],closed,False,,8,2014-09-01T00:52:06Z,2014-09-02T16:19:31Z,2014-09-02T16:18:13Z,CONTRIBUTOR,completed,,"Over in the [react-router](https://github.com/rackt/react-router) project we would really, really like a ""blessed"" way to access the component that was on the bottom of the render stack at the time another was rendered. `ReactCompositeComponent`s currently have a reference to their ""owner"" component using `this._owner`, but [it looks like it's going to be removed](https://github.com/facebook/react/blob/820210fd9e3d18d7c7f3a4550cbcbec1b43fcc43/src/core/ReactCompositeComponent.js#L1083).

I'm currently trying to understand the reasons for wanting to get rid of `_owner` so that we can find a way to satisfy those concerns but still preserve access to a component's owner in some way.

There are lots of places in the DOM API where you can go back up the tree, including [`parentNode`](https://developer.mozilla.org/en-US/docs/Web/API/Node.parentNode), [`ownerDocument`](https://developer.mozilla.org/en-US/docs/Web/API/Node.ownerDocument), [`parent`](https://developer.mozilla.org/en-US/docs/Web/API/Window.parent), and [`ownerNode`](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet.ownerNode). Being able to essentially do the same thing in React's component API would be incredibly useful.
"
,,,https://github.com/facebook/react/issues/2210,2210,Throw warning when undefined passed in as event callback,[],closed,False,,1,2014-09-19T00:50:28Z,2015-04-11T18:21:44Z,2015-04-11T18:21:44Z,NONE,completed,,"Maybe there's a valid use case for this, but I had something like:

``` javascript
module.exports = React.createClass({
    _onsave: function() {
    },
    render: function() {
        return (
            <button className=""btn btn-green btn-regular"" onClick={ this._onSave }>Save</button>
        );
    }
});
```

if it'd yelled at me, it would have been easier to debug :-)
"
,,,https://github.com/facebook/react/issues/2215,2215,Warn when a component is passed props that it doesn't need,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null}]",closed,False,,6,2014-09-19T19:14:45Z,2015-05-07T18:23:17Z,2015-05-07T18:23:17Z,NONE,completed,,"It would be cool to be able to get warnings for typoed or otherwise extraneous props passed to a component, similar to how `React.DOM` warns if you pass `class` when you meant `className`.

With `PropTypes.shape` you could probably even ensure deep validity of the passed data. This would not only be useful for finding bugs, but also for optimizing hot components by making sure the shapes are aligned.

Obviously this would need some sort of opt-in, like propTypes.
"
,,,https://github.com/facebook/react/issues/2128,2128,Define a better way to add missing JSX tags or React Nodes,"[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":126382236,""node_id"":""MDU6TGFiZWwxMjYzODIyMzY="",""url"":""https://api.github.com/repos/facebook/react/labels/SVG"",""name"":""SVG"",""color"":""f7c6c7"",""default"":false,""description"":null}]",closed,False,,1,2014-09-02T09:06:01Z,2014-10-08T21:23:15Z,2014-10-08T21:23:15Z,NONE,completed,,"There are SVG tags like `<animate>` and few other standard tags which didn't find its way into React. I request you to provide a simple API to add an existing and standard HTML5 tag.
"
,,,https://github.com/facebook/react/issues/2391,2391,Feature Request: Dynamic Object Literal Property Keys,[],closed,False,,5,2014-10-21T16:38:19Z,2015-01-12T14:42:17Z,2014-10-28T00:23:29Z,NONE,completed,,"From the es6 spec:

http://wiki.ecmascript.org/doku.php?id=harmony:object_literals#object_literal_computed_property_keys

This would come in handy with `React.addons.classSet`, allowing you to do something like this:

``` js
var classes = React.addons.classSet({
  oneClass: true,
  [this.props.className]: !!this.props.className
});
```
"
,,,https://github.com/facebook/react/issues/2328,2328,Figure out why `ownerDocument` is sometimes undefined in IE8,[],closed,False,,1,2014-10-11T20:51:22Z,2014-10-12T20:54:49Z,2014-10-12T20:54:49Z,CONTRIBUTOR,completed,,"```
// TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
```

Exists in a few places in the code, I have not been able to reproduce this myself, anyone have any idea?
"
,,,https://github.com/facebook/react/issues/2346,2346,Mixin to render in unordered mode (Like sets),"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null}]",closed,False,,10,2014-10-14T14:03:14Z,2016-10-27T14:22:17Z,2016-10-27T14:22:17Z,CONTRIBUTOR,completed,,"Similar to #2296.

I would love to tell a REACT component : ""I don't care in what order you render the elements, just minimize the DOM operations and maintain the elements by key""

In effect: whenever a re-render happens React removes the elements that are no longer there. And new elements are appended to the end. The order is never accounted for.

While ES6 Sets may not be available in many browsers, I would love a similar feature implemented with Objects now.

Explanation:

Right now, when passing an array of children with keys as property, their order is preserved. This is usually the correct behavior.

However, I have projects where I'm using the trick from famo.us to render elements using `transform: translate` values instead. In this case, all elements have `position; absolute; top: 0; left: 0;` anyway and their actual order on the DOM does not matter.

The major benefit is that with this trick, it eliminates almost all DOM operations (except updating styles) and any page reflow or paints for great performance.

The problem is that with React maintaining the order of the children, React, reorders the DOM elements anyway.

There are ways where I have to keep track of every render and manually reorder the data to prevent re-renders, but there has got to be a better way.
"
,,,https://github.com/facebook/react/issues/2319,2319,Unhelpful error when two react components are responsible for updating the same div,"[{""id"":40929153,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement"",""name"":""Type: Enhancement"",""color"":""84b6eb"",""default"":false,""description"":null}]",closed,False,,4,2014-10-10T09:51:50Z,2014-11-12T11:04:47Z,2014-11-12T11:04:47Z,NONE,completed,,"I was a moron and had two separate React components both responsible for the same div:

```
var Component1 = React.createClass({
    render: function() {
        React.renderComponent(<Component2/>, document.getElementById('my_div'));
        return (<div id=""my_div""><span>Some stuff goes here</span></div>);
    }    
});
```

It wasn't quite as obvious as that in real life, but ultimately that's what it boiled down to. It caused the whole page to freeze until the browser killed it. But the warning / error that React gave me was no help at all in trying to diagnose the issue:

> ""React attempted to use reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injectednew markup to compensate which works but you have lost many of  the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server.""
"
,,,https://github.com/facebook/react/issues/2402,2402,Warn when two versions of React are used alongside,[],closed,False,,59,2014-10-23T14:00:11Z,2022-10-04T08:18:59Z,2015-08-12T00:20:21Z,MEMBER,completed,,"People lose hours of work debugging a simple issue: two versions of React being loaded at the same time.

https://github.com/gaearon/react-hot-loader/issues/32#issuecomment-60043061
https://github.com/KyleAMathews/coffee-react-quickstart/issues/10#issuecomment-50655116
https://github.com/gaearon/react-document-title/issues/1#issuecomment-60241045
https://github.com/clayallsopp/react.backbone/issues/26

Because there is no warning right away when this happens, they usually discover the problem through invariant violations. Some of them are descriptive (e.g. `Uncaught Error: Invariant Violation: The handler for Route ""hello"" must be a valid React component`) and I think I even saw warning that said something like ""check if two copies of React are loaded"", but some are really cryptic: `Invariant Violation: addComponentAsRefTo(...): Only a ReactOwner can have refs...`.

Is there a reason why we don't want to warn _right away_ when two copies of React are loaded?
"
,,,https://github.com/facebook/react/issues/2365,2365,Rendered markup roots should be added to ReactMount node cache,"[{""id"":40929153,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement"",""name"":""Type: Enhancement"",""color"":""84b6eb"",""default"":false,""description"":null}]",closed,False,,8,2014-10-16T20:41:03Z,2016-03-14T22:41:48Z,2016-03-14T22:41:48Z,CONTRIBUTOR,completed,,"ReactMount caches all children for each parent it visits, this avoids worst-case exponential cost. However, use of ReactDOMIDOperations for updates forces ReactMount to populate the cache with the previous children.

If a newly rendered node needs to be found, then ""the children of the parent"" of ""the newly rendered root"" has to be re-traversed as it does not exist in the node cache. Since it's guaranteed that all the siblings of newly rendered roots are cached and that we have a reference to the node, it's trivial to manually add it to the node cache which should avoid ""double-traversals"" entirely.
"
,,,https://github.com/facebook/react/issues/2440,2440,Merge className when using spread operator,[],closed,False,,5,2014-10-31T04:51:26Z,2020-03-25T19:04:59Z,2014-10-31T08:07:56Z,NONE,completed,,"When using transferPropsTo the className property would be merged, this is not true when using the new spread operator.  This was one of the nicest features in transferPropsTo, it made extending existing components much easier.  I created a couple of fiddles to illustrate:

0.12:
http://jsfiddle.net/kb3gN/7005/

0.11.2:
http://jsfiddle.net/qjohd7ut/

I'm not sure if this would be considered a bug, I can understand there would be reasons not to do it, but it is incredibly convenient.  If this is not possible it would be nice to have some utility method or something to do className merging, maybe as part of add-ons.
"
,,,https://github.com/facebook/react/issues/2326,2326,Using `react` and `react/addons` side-by-side provokes Invariant errors with Browserify,[],closed,False,,2,2014-10-11T19:08:57Z,2014-10-13T20:17:23Z,2014-10-13T20:17:23Z,CONTRIBUTOR,completed,,"Using `require('react')` and `require('react/addons')` in different modules provoke Invariant errors when mixed together. So you have to only use either `react` or `react/addons`. Components required from `react/lib/*` also provoke Invariant errors when used inside components from `react`.

This a regression, since [react-addons](https://github.com/STRML/react-addons) was made specifically for this reason, and has since been marked as deprecated.
"
,,,https://github.com/facebook/react/issues/2626,2626,Silent exception from error in componentWillReceiveProps,[],closed,False,,2,2014-11-29T18:40:18Z,2015-02-27T00:55:25Z,2015-02-27T00:55:25Z,NONE,completed,,"So i had a function call to undefined in componentWillReceiveProps:

``` javascript
componentWillReceiveProps: function(nextProps) {
        var ends = Component.getTimeEnds(nextProps.ends);    // static method
        var diff = ends.clone().subtract(this.state.ends) // ends.clone is undefined;
    this.setState({ 
        diff: diff
    })
 }
```

well never mind what it does but since i call undefined it throws, which is caught in ReactMultiChild.updateChildren and not re-thrown for some reason i can't find and can't reproduce in a fiddle.
Anyways it took me a while to realize it was the culprit, anyone knows why in heaven's name doesn't it throw?
"
,,,https://github.com/facebook/react/issues/2607,2607,Making React warn the user when `createElement` is called with `undefined` for the `type` argument,"[{""id"":139653724,""node_id"":""MDU6TGFiZWwxMzk2NTM3MjQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities"",""name"":""Component: Core Utilities"",""color"":""c5def5"",""default"":false,""description"":null}]",closed,False,,12,2014-11-26T13:01:37Z,2016-06-15T10:30:14Z,2014-12-17T18:46:49Z,NONE,completed,,"I spent the last hour trying to fix an issue that was caused by me trying to render a `CSSTransitionGroup` when the actual variable was undefined.

The root cause was me misinterpreting that `require(""react/addons"")` would return the whole `React` instead of just `React.addons` (which is my bad), but the error itself and the stack trace were extremely cryptic and it took me a while to even get a clue that the reason why it wasn't working was that I was just trying to render an undefined type.

This is the actual exception:

```
Uncaught TypeError: Cannot read property 'defaultProps' of undefined
```

And here's the stack trace:

![developer tools - http___localhost_3000_requests_new from_template 3](https://cloud.githubusercontent.com/assets/886011/5201545/dda098f6-7573-11e4-9bed-4db35dbc520d.png)

You can see that, ultimately, execution comes crashing down when React tries to look at `defaultProps` on my undefined type, which of course raises an exception.

The reason why this was confusing to me is that the exception happened quite far away from the source cause and, as a secondary factor, this code worked completely fine before I started porting it to Browserify and made my mistake with `react/addons`. This lead me to a wild set of hypotheses as to why it wasn't working, such as assuming it might be due to a regression in React 0.12 (since it's been migrating from `React.renderComponent` to `React.render` and I thought `CSSTransitionGroup` might have been lagging behind), to thinking it could be a problem with `CSSTransitionGroup` itself.

The reason why I raise this issue is that, since passing an `undefined` type won't work anyway, it would make sense if React could check for `undefined` and warn about it or maybe even raise an exception (since it would crash soon after anyway). 

My instance was a bit more extreme and if something like this happens to someone else they'll probably know where they screwed up in the first place, but some help from React would always be welcome!
"
,,,https://github.com/facebook/react/issues/2517,2517,How to implement shouldComponentUpdate with this.context?,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":739777675,""node_id"":""MDU6TGFiZWw3Mzk3Nzc2NzU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API"",""name"":""Component: Component API"",""color"":""d4c5f9"",""default"":false,""description"":null}]",closed,False,,126,2014-11-13T16:42:38Z,2018-05-08T02:14:45Z,2018-01-25T12:19:53Z,MEMBER,completed,,"I know `this.context` is not officially there but quite a few libraries rely on it, and it seems like it's getting into shape with #2509.

I'm trying to understand how exactly `shouldComponentUpdate` is supposed to be implemented with `context` in mind. I noticed it accepts a third argument (`nextContext`) and I can extend `PureRenderMixin` to also check it:

``` javascript
  shouldComponentUpdate: function(nextProps, nextState, nextContext) {
    return !shallowEqual(this.props, nextProps) ||
           !shallowEqual(this.state, nextState) ||
           !shallowEqual(this.context, nextContext); // this will throw without context, read on
  }
```

Components that don't opt into `this.context` by not omitting `contextTypes` will not get this third argument, which is understandable.

However this presents a problem when we have a `<Middle />` component in between between `<Top />` context owner and `<Bottom />` context consumer. If `<Middle />` implements a restrictive `shouldComponentUpdate`, there is no way for `<Bottom />` to react to `<Top />`'s context updates at all:

(**[fiddle](http://jsbin.com/radakepusi/2/edit?js,output)**)

``` javascript
var Bottom = React.createClass({
  contextTypes: {
    number: React.PropTypes.number.isRequired
  },

  render: function () {
    return <h1>{this.context.number}</h1>
  }
});

var Middle = React.createClass({
  shouldComponentUpdate: function (nextProps, nextState, nextContext) {
    return false;
  },

  render: function () {
    return <Bottom />;
  }
});

var Top = React.createClass({
  childContextTypes: {
    number: React.PropTypes.number.isRequired
  },

  getInitialState: function () {
    return { number: 0 };
  },

  getChildContext: function () {
    return { number: this.state.number };
  },

  componentDidMount: function () {
    setInterval(function () {
      this.setState({
        number: this.state.number + 1
      });
    }.bind(this), 1000);
  },

  render: function() {
    return <Middle />;    
  }
});

React.render(<Top />, document.body);
```

The same problem would occur if I tried to give `Middle` a generic context-aware `shouldComponentUpdate` as I wrote above, because `Middle` has no `this.context` unless it opts in.

This is possible to work around by adding `contextTypes` to `Middle`, but it doesn't look like a good solution. You'd need to explicitly add necessary `contextTypes` on every level with smart `shouldComponentUpdate` so it's too easy to slip up.

Will this be solved by #2112? Is there another solution in the meantime? What is the recommended way?
"
,,,https://github.com/facebook/react/issues/2547,2547,I simply want to transpile a single .jsx file,[],closed,False,,3,2014-11-17T20:45:23Z,2014-11-17T21:20:55Z,2014-11-17T21:20:55Z,NONE,completed,,"If I do this:
`jsx myfile.jsx`
I can see the transpiled file dumped into my shell. How do I specify an output file?
It sounds retarded but I really couldn't find the answer in any of the documentation.
"
,,,https://github.com/facebook/react/issues/2488,2488,non jsx spread operators depend on Object.assign,[],closed,False,,7,2014-11-08T17:51:17Z,2014-12-10T21:39:33Z,2014-12-10T21:39:33Z,CONTRIBUTOR,completed,,"``` js
var c = { ...a, x: 1 }
```

transpiles to 

``` js
var c = Object.assign({}, a, { x: 1 })
```

It works all nice and dandy but it implicitly requires a polyfill that is undocumented. I assume this is because of the recent change to move the polyfill into a module? Perhaps react (react-tools) should not use the jstransform spread visitor, using one that leverages `React.__spread` as in the jsx case? Or at perhaps just a note in the docs somewhere that you will need `Object.assign` polyfilled. 
"
,,,https://github.com/facebook/react/issues/2569,2569,"[EDIT]: No error thrown on missing mixin (Formerly named ""Mixin lifecycle methods not called server-side"")",[],closed,False,,7,2014-11-19T20:39:47Z,2014-11-20T20:10:03Z,2014-11-20T20:10:03Z,NONE,completed,,"`MyComponentWithMyMixin.componentWillMount` gets called, but `MyMixin.componentWillMount` never does.

Granted I'm using an older version and didn't dig into latest source too hard, but I didn't see this pop up in an issues search.
"
,,,https://github.com/facebook/react/issues/2535,2535,missing SVG mask attribute,[],closed,False,,1,2014-11-16T08:05:39Z,2014-11-16T08:12:34Z,2014-11-16T08:12:34Z,NONE,completed,,"mask attribute is ignored on SVG elements
"
,,,https://github.com/facebook/react/issues/2542,2542,Throw error on wrong input to dangerouslySetInnerHTML / dangerousInnerHTML,[],closed,False,,4,2014-11-17T01:08:34Z,2015-02-27T01:30:59Z,2015-02-27T01:12:54Z,CONTRIBUTOR,completed,,"Not passing in __html fails silently (checked on the website). That makes its use incredibly hard to debug (if you forget the __html). It should throw an error instead.
"
,,,https://github.com/facebook/react/issues/2789,2789,Component with mixins: componentWillUnmount should be called in reverse order (of componentDidMount),[],closed,False,,13,2014-12-31T03:23:18Z,2015-10-22T15:19:33Z,2015-04-28T18:49:29Z,CONTRIBUTOR,completed,,"`componentDidMount()` and `componentWillUnmount()` allow for DOM manipulation outside React's reach. DOM manipulations done in `componentDidMount()` should be undone in reverse order in `componentWillUnmount()`. This is currently not possible in components with mixins (see footnote) due to the order in which the events are fired:

Current order:
1. mixin1.componentDidMount()
2. mixin2.componentDidMount()
3. component.componentDidMount()
4. mixin1.componentWillUnmount()
5. mixin2.componentWillUnmount()
6. component.componentWillUnmount()

Correct order:
1. mixin1.componentDidMount()
2. mixin2.componentDidMount()
3. component.componentDidMount()
4. component.componentWillUnmount()
5. mixin2.componentWillUnmount()
6. mixin1.componentWillUnmount()

JSFiddle: http://jsfiddle.net/rickbeerendonk/3cm3sso5/

Full lifecycle example: https://github.com/rickbeerendonk/react-om-examples/blob/d59eda2b67e07d345a44f9552a2ab231b4127f8a/Extra%2002a.%20ComponentLifecycle%20with%20Mixins/jsx/index.html 

Footnote: If all the mixins and the component with those mixins are manipulating the DOM.
"
,,,https://github.com/facebook/react/issues/2775,2775,Drop IE8 support,[],closed,False,,2,2014-12-26T07:09:59Z,2014-12-26T08:01:25Z,2014-12-26T08:01:25Z,NONE,completed,,"How about dropping support for IE 8? It'll 2015 in 7 days :) And statistics show that IE8 take 2.5% in wolrdwide. [w3counter](http://www.w3counter.com/globalstats.php) statistics and [w3schools](http://www.w3schools.com/browsers/browsers_explorer.asp).
"
,,,https://github.com/facebook/react/issues/2692,2692,Accessing a component through prototype of another component warns about plain functions,[],closed,False,,1,2014-12-11T19:54:44Z,2017-10-02T00:13:42Z,2017-10-02T00:13:42Z,NONE,completed,,"Not really sure if this is expected behaviour or not, but simply moving a component from `require('...')` to `this` warns about plain functions and calling components directly.

Here's a simplified test case:

``` javascript
var EmptyComponent = React.createClass({
  render () {
    return <div />
  }
})

var TestCase = React.createClass({
  EmptyComponent: EmptyComponent,

  getDefaultProps () {
    return {
      useComponentOnObject: false
    }
  },

  render () {
    var __component

    if (this.props.useComponentOnObject) {
      __component = <this.EmptyComponent />
    } else {
      __component = <EmptyComponent />
    }

    return <div>
      {__component}
    </div>
  }
})

React.renderToString(<TestCase />)

// This warns about using plain functions and rendering a component directly
React.renderToString(<TestCase useComponentOnObject={true} />)
```
"
,,,https://github.com/facebook/react/issues/2721,2721,"Inline style with 0 value doesn't add ""px""",[],closed,False,,3,2014-12-16T14:33:17Z,2014-12-16T16:17:32Z,2014-12-16T16:09:56Z,NONE,completed,,"Hello,

The [docs](http://facebook.github.io/react/tips/style-props-value-px.html) say :

`When specifying a pixel value for your inline style prop, React automatically appends the string ""px"" for you after your number value`.

But not for 0 (the number). On purpose ?
"
,,,https://github.com/facebook/react/issues/2657,2657,React and legacy/custom elements/attributes,"[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null}]",closed,False,,1,2014-12-04T13:48:58Z,2014-12-05T00:07:16Z,2014-12-05T00:07:16Z,NONE,completed,,"I noticed that legacy attributes like align, cellpadding, cellspacing wasn't rendered by React (at least on the server side).

It is annoying for me since i was trying to convert our email templating system to use React in order to be able to display them in our frontend app.

The fact is that i'm unable to complete this task with React. It led to another question. How am i supposed to make React and WebComponents work together if custom element/attributes names are filtered by React rendering engine ?
"
,,,https://github.com/facebook/react/issues/2741,2741,Update release grunt task for modern times,"[{""id"":71502270,""node_id"":""MDU6TGFiZWw3MTUwMjI3MA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure"",""name"":""Component: Build Infrastructure"",""color"":""f9d0c4"",""default"":false,""description"":null}]",closed,False,,2,2014-12-18T20:38:08Z,2017-04-04T19:01:44Z,2017-04-04T15:47:34Z,MEMBER,completed,zpao,"- [ ] don't delete LICENSE, PATENTS from bower repo
- [ ] better messages about post-process
"
,,,https://github.com/facebook/react/issues/2712,2712,Strange behaviour with underscores in classes,[],closed,False,,3,2014-12-15T14:30:06Z,2014-12-21T12:29:54Z,2014-12-18T00:30:10Z,NONE,completed,,"When using the JSX compiler with the `--harmony` flag, an ES6 Class like the following:

```
class Foo {
  bar() {
    console.log(baz._id);
  }
}
```

gets transformed to:

```
function Foo(){""use strict"";}
  Foo.prototype.bar=function() {""use strict"";
    console.log(baz.$Foo_id);
  };
```

Notice how `""baz._id""` becomes `""baz.$Foo_id""`. As far as I'm aware, this isn't ES6, and [traceur](https://google.github.io/traceur-compiler/demo/repl.html#class%20Foo%20%7B%0A%20%20bar%28%29%20%7B%0A%20%20%20%20console.log%28baz._id%29%3B%0A%20%20%7D%0A%7D%0A) also gives the expected output of `""baz._id""`.

Might this be some special treatment intended to make `this._private` properties less susceptible to use from outside, or collisions in class hierarchies..? Regardless, it would be nice to be able to turn this off when not wanted.

Verified with `react-tools@0.12.1` and the [online compiler](http://facebook.github.io/react/jsx-compiler.html).
"
,,,https://github.com/facebook/react/issues/2714,2714,`Object.assign` still being used,[],closed,False,,2,2014-12-15T20:55:16Z,2014-12-15T21:18:27Z,2014-12-15T21:18:27Z,NONE,completed,,"Using `{...props}` outside of JSX markup is still using `Object.assign` instead of `React.__spread`

``` jsx
// This still uses Object.assign
var t = {...bar}

// This uses React.__spread
var component = <div {...props} />
```

... becomes:

``` javascript
// This still uses Object.assign
var t = Object.assign({},bar)

// This uses React.__spread
var component = React.createElement(""div"", React.__spread({},  props))
```

Tested online at http://facebook.github.io/react/jsx-compiler.html
"
,,,https://github.com/facebook/react/issues/2928,2928,Properties of Rx / Observable React-like Experiments,[],closed,False,,2,2015-01-24T02:40:06Z,2017-10-02T00:17:14Z,2017-10-02T00:17:14Z,COLLABORATOR,completed,,"This issue will be used to track some properties / features that are available in some experimental frameworks that build everything around Rx / Observable streams, but with liftable component boundaries.

I've identified a few that already overlap well with existing projects:
- [ ] Error Propagation / Boundaries (Errors propagate up the hierarchy.) https://github.com/facebook/react/issues/2461
- [ ] Completion Propagation (A signal to tell that a component will no longer change. Can be used for memory cleanup/collapsing, async server-side rendering, transition groups that clean up exit animations.)
- [ ] ""Prerendering"" or ""Lifting"" Components (That then become opaque to their containers.)
  https://github.com/reactjs/react-future/tree/master/04%20-%20Layout
- [ ] Async Reconciliation. (Any component can block the entire UI as waiting for data. Useful for server-side rendering or calling out to asynchronous, but fast APIs on the client, )

These features will probably be built in an optimized imperative style into the core but expose the same capabilities as if it was built as Observables.

It is a non-goal of this particular task to provide a similar API surface area to Observables but to track the capabilities exposed by such frameworks. It should be possible to experiment with alternative APIs that heavily rely on Observable semantics on top of these features.
"
,,,https://github.com/facebook/react/issues/2819,2819,The facebook CDN is not serving compressed libraries,[],closed,False,,1,2015-01-07T03:20:14Z,2015-01-08T21:09:25Z,2015-01-08T21:09:25Z,NONE,completed,,"[This](http://fb.me/react-with-addons-0.12.2.min.js), for example, should surely be served with gzip compression.

Quite odd indeed...
"
,,,https://github.com/facebook/react/issues/2988,2988,ReactMount.nodeCache is repopulated with purged nodes that are focused at unmount,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null}]",closed,False,,13,2015-01-30T21:38:23Z,2016-04-02T22:03:37Z,2016-04-02T22:03:37Z,CONTRIBUTOR,completed,,"If you unmount a currently focused node, `nodeCache` is repopulated after being purged and unless that specific ID is revisited later, it will remain there forever. ~~This is mostly likely due to the focus/selection restoration phase after reconciliation.~~

Repro: http://dev.cetrez.com/jsx/nodecache.html (nodeCache is output into the console)
"
,,,https://github.com/facebook/react/issues/2869,2869,Write custom lint rules,"[{""id"":71502270,""node_id"":""MDU6TGFiZWw3MTUwMjI3MA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure"",""name"":""Component: Build Infrastructure"",""color"":""f9d0c4"",""default"":false,""description"":null}]",closed,False,,8,2015-01-16T04:37:46Z,2016-10-27T14:38:12Z,2016-10-27T14:38:12Z,MEMBER,completed,,"- [x] Make sure `warning` and `invariant` have a string literal for first argument
- [ ] Make sure JSDoc args match up
"
,,,https://github.com/facebook/react/issues/2835,2835,Illogical architecture of setState,[],closed,False,,2,2015-01-09T18:19:23Z,2015-01-09T19:45:17Z,2015-01-09T19:45:17Z,NONE,completed,,"Dear React developers and community. Can anyone please explain to me why React throws a hard error if I use setState (or anything that entails setting new state, e.g. replaceState) if setState should work ONLY on a mounted component? If it never works with unmounted component, than what's the harm in using console.warn instead? Because in ALL our code we must use this.isMounted() && this.setState() — which is completely redundant.

Can you please provide an explanation for this? Can you allow using a certain init option for not throwing this error?
"
,,,https://github.com/facebook/react/issues/2809,2809,Umbrella 0.13,[],closed,False,,9,2015-01-06T01:20:45Z,2015-02-21T00:59:08Z,2015-02-21T00:59:08Z,COLLABORATOR,completed,,"- [x] refs - make them callbacks instead of first class (@spicyj / @sebmarkbage)
- [x] Move propType validation to element instead of class (@jsfb)
- [x] Warning if class.type is accessed (@sebmarkbage)
  - [ ] Clean up internal (@jsfb)
- [x] Expose React.Component base class (@sebmarkbage)
  - [x] Fix context (#2898)
- [x] Deprecate keyed objects as children with warning. (@jsfb / @sebmarkbage)
  - [x] Add ReactFragment API, expose as React.addons.fragment?
- [x] Fix ReactPerf
- [x] Change unmounted setState checks from invariant to warning (@zpao)
- [x] Add enqueueStateUpdate (name?) to enqueue updates that depend on this.state being consistent (since this._pendingState is gone). (@sebmarkbage)
- [x] fix devtools (@sebmarkbage)
- [x] do something about refs timing(#3128) (@sebmarkbage)
- [x] warn for `getDOMNode`, `isMounted` uses within `render` (#3171)
- [x] warn for Maps as children (#3171)
- [ ] `@providesModule react` (@zpao) (needs syncup with flow, internal)
- [ ] `--target` option for `jsx` (@zpao)

Won't fix:
- [ ] Expose DOM component refs as the actual DOM nodes. (Monkey patch props, setProps, getDOMNode onto it as an upgrade path.)
- [ ] Warnings on using a DOM Component's ref's getDOMNode or props
- [ ] Fix the error utils guard. See ReactCompositeComponentError-test
- [ ] Deprecate setProps? What's the alternative?
- [ ] expose cloneWithProps on React proper (not actual cloneWithProps but the other one)
- [ ] Deprecate replaceState?
"
,,,https://github.com/facebook/react/issues/2956,2956,Can we have React.Children.filter?,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null}]",closed,False,,35,2015-01-27T16:48:49Z,2021-05-18T18:26:57Z,2015-12-27T19:15:19Z,MEMBER,completed,,"My use case: wrapping all **non-empty** children into divs.

``` js
  render() {
    return (
      <div style={rootStyle} onWheel={this.handleWheel}>
        {Children.map(this.props.children, this.wrapChild)}
      </div>
    );
  },

  wrapChild(child, index) {
    if (!child) { // I know this is probably wrong kind of comparison; don't care
      return (
        <div style={this.getChildStyle(index)}>
          {child}
        </div>
      );
    }
  },
```

This is all nice but I also need to know **how many valid children I have wrapped**.
`Children.count` will return the number of children including the “empty” children. I want to strip them out.

Can we have `Children.filter`?
"
,,,https://github.com/facebook/react/issues/2838,2838,Include key when using React.Children.map and React.Children.forEach,[],closed,False,,2,2015-01-10T00:48:42Z,2015-01-14T20:02:53Z,2015-01-14T20:02:53Z,NONE,completed,,"Currently the key property is stripped from the children when calling React.Children.map and React.Children.forEach.  It seems that it would be useful to retain this property, and leave it to the user to decide how to handle that.

For instance there is an example in the docs showing you to do the following when you want to retain the key while using cloneWithProps:

```
 cloneWithProps(originalComponent, { key : originalComponent.key });
```

http://facebook.github.io/react/docs/clone-with-props.html

This doesn't work if you want to loop over and clone each child because the key is already stripped. Below is some code I made to test this.

```
var Hello = React.createClass({

    render: function() {
        React.Children.map(this.props.children, function(child){
            console.log(child.props)
        });
        React.Children.forEach(this.props.children, function(child){
            console.log(child.props)
        });
        return <div>Hello {this.props.name}</div>;
    }
});

React.render(<Hello name=""World"">
    <li key=""blah1"" myProp=""test""/>
    <li key=""blah2""/>
    <li key=""blah3""/>
</Hello>, document.body);
```

The output of the above omits the key values.
"
,,,https://github.com/facebook/react/issues/2870,2870,All warning calls should use %s,"[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null}]",closed,False,,2,2015-01-16T04:46:48Z,2015-01-27T18:08:35Z,2015-01-27T18:08:35Z,MEMBER,completed,,"Ditto on invariant. But I think those are ok already.
"
,,,https://github.com/facebook/react/issues/3015,3015,Is valueLink working in React ES6?,[],closed,False,,1,2015-02-02T15:13:36Z,2015-02-02T15:17:44Z,2015-02-02T15:17:44Z,NONE,completed,,
,,,https://github.com/facebook/react/issues/3261,3261,hook between componentWillMount and render even at first render,[],closed,False,,2,2015-02-25T11:31:46Z,2015-02-27T05:28:07Z,2015-02-27T01:17:28Z,NONE,completed,,"Would it be feasible to provide a function that allows a developer to hook into the component life-cycle after  componentWillMount() and before render().  This would need to always be possible even during the initial render.

maybe something like this: 

```
_renderValidatedComponentWithoutOwnerOrContext: function() {
  var inst = this._instance;
  if (inst.willRender) {    // Check if hook is defined
    inst.willRender();      // hook called
  }                                 

  var renderedComponent = inst.render();
  if (__DEV__) {
    // We allow auto-mocks to proceed as if they're returning null.
    if (typeof renderedComponent === 'undefined' &&
        inst.render._isMockFunction) {
      // This is probably bad practice. Consider warning here and
      // deprecating this convenience.
      renderedComponent = null;
    }
  }
  return renderedComponent;
},
```

right now we can write mixins that hook in at componentWillMount() which would be called before the equivalent function of the component. This leaves no opportunity to further act on props and state  between whatever the component developer does and the point of render. We are trying to insert various tracking properties for automated testing and validation or debugging which can be switched off by a prop. Allowing us to also to validate and automate UI testing.

Its a real pain having to ask developers to either add in the same code over and over (cut and paste coding) every time they write / amend components, or ask them to call a function on a mixin before they commence the render. Even on very simple render functions Its highly error prone as they tend to forget.

```
render: function () {
    this.someMixinCompIsAboutToRender();
    return React.createElement('section', this.props );
}
```

Its much easier to add in (and its easy to statically verify this has been added)

```
mixins: [Router.State, someMixin],
```

After the initial render there is of course the hook via the use of componentWillUpdate() but this is bypassed during the initial render phase, so doesn't work as a consistent way of being able to hook in after the component has Mounted (developer codes) and Before it Renders.

being able to put something like this in a mixin would make all of this much simpler / less time consuming in general and more importantly significantly less error prone.

```
willRender : function() {
   this.props.x = ... inject the property ...
   this.props.y = ... inject the property ...
   this.props.z = ... inject the property ...
},
```
"
,,,https://github.com/facebook/react/issues/3092,3092,Webworkers,[],closed,False,,30,2015-02-09T06:07:59Z,2020-09-13T12:26:01Z,2017-10-02T00:31:55Z,CONTRIBUTOR,completed,,"There has been discussion about webworkers before, @petehunt made already an implementation and @sebmarkbage has some ideas on how he wants to accomplish it within the current code base. If I remember correctly, React should not just run in a webworker but both in the ""main thread"" and a webworker. 

So, what are we waiting for? @sebmarkbage would be great if you could give a more detailed outline of your ideas so we can get this moving :-).
"
,,,https://github.com/facebook/react/issues/3285,3285,Could we make it less painful to inline ReactElement objects?,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null}]",closed,False,"{""url"":""https://api.github.com/repos/facebook/react/milestones/13"",""html_url"":""https://github.com/facebook/react/milestone/13"",""labels_url"":""https://api.github.com/repos/facebook/react/milestones/13/labels"",""id"":1035426,""node_id"":""MDk6TWlsZXN0b25lMTAzNTQyNg=="",""number"":13,""title"":""0.14"",""description"":null,""creator"":{""login"":""sophiebits"",""id"":6820,""node_id"":""MDQ6VXNlcjY4MjA="",""avatar_url"":""https://avatars.githubusercontent.com/u/6820?v=4"",""gravatar_id"":"""",""url"":""https://api.github.com/users/sophiebits"",""html_url"":""https://github.com/sophiebits"",""followers_url"":""https://api.github.com/users/sophiebits/followers"",""following_url"":""https://api.github.com/users/sophiebits/following{/other_user}"",""gists_url"":""https://api.github.com/users/sophiebits/gists{/gist_id}"",""starred_url"":""https://api.github.com/users/sophiebits/starred{/owner}{/repo}"",""subscriptions_url"":""https://api.github.com/users/sophiebits/subscriptions"",""organizations_url"":""https://api.github.com/users/sophiebits/orgs"",""repos_url"":""https://api.github.com/users/sophiebits/repos"",""events_url"":""https://api.github.com/users/sophiebits/events{/privacy}"",""received_events_url"":""https://api.github.com/users/sophiebits/received_events"",""type"":""User"",""site_admin"":false},""open_issues"":0,""closed_issues"":74,""state"":""closed"",""created_at"":""2015-03-23T23:33:55Z"",""updated_at"":""2015-10-09T17:52:30Z"",""due_on"":null,""closed_at"":""2015-10-08T00:19:55Z""}",9,2015-02-28T05:18:40Z,2015-09-25T20:11:40Z,2015-09-25T20:11:40Z,CONTRIBUTOR,completed,,"Hi!

@spicyj said I should open an issue here. Disclaimer: I'm trying to do sort of sketchy things, and I know this isn't supported, but I think it would be nice.

I'm writing a library that I want to support react output optionally. To do this, right now I'm trying to inline all my ReactElements, such as

``` javascript
    return {
        type: 'hr',
        key: state.key,
        _isReactElement: true
    };
```

instead of

``` javascript
    React.createElement('hr', {
        key: state.key
    })
```

This is almost completely functional, except for the `_store` validation in react dev mode. This is because right now these literals don't have a `_store` key with `.validated` or `.originalProps`, which are assumed by the validators in React **DEV**. I can work around this, but to do so without duplicating props will have to write a wrapper function to create the element, which is a little unideal and slower (and adds unnecessary keys in non-dev mode).

Would it be reasonable to short circuit some of these checks so that they only happen if _store is actually present on the ReactElement? If so, I'd be happy to submit a pull request (no rush for react 0.13 though).

Curious as to your thoughts. Thanks!
Aria
"
,,,https://github.com/facebook/react/issues/3234,3234,How Should Refs Work?,"[{""id"":270986513,""node_id"":""MDU6TGFiZWwyNzA5ODY1MTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Big%20Picture"",""name"":""Type: Big Picture"",""color"":""61dafb"",""default"":false,""description"":null}]",closed,False,,5,2015-02-22T21:38:23Z,2018-08-15T20:06:22Z,2018-08-15T20:06:22Z,COLLABORATOR,completed,,"Spinoff discussion of #1373, #3128 and #3228.

We're pretty sure that we need to change the current way refs work (see above). However, the new ref callbacks are also not ideal because it relies on some imperative code and suffers from timing issues like all imperative life-cycles. It is also not very convenient without arrow functions. Even with arrow functions it might suffer from performance issues.

A few things refs tries to solve:
- Imperative access to APIs that doesn't have declarative counter-parts yet. E.g. DOM layout.
- Fast-path down the tree to update deeply to by-pass reconciliation. Perf-optimization.
- Get the current state of a child that you don't want to control without duplicating state (which might possibly diverge).
- Send signals/pulses downwards.
"
,,,https://github.com/facebook/react/issues/3019,3019,JSX parsing error,[],closed,False,,1,2015-02-02T21:51:48Z,2015-02-02T23:03:45Z,2015-02-02T22:19:35Z,CONTRIBUTOR,completed,,"I'm not entirely sure what's causing the issue here:

This fails

``` jsx
function play(moves) {
    var game = gamelib.create();
    var player = gamelib.createPlayer();
    return moves.reduce(
        ([[g, p], [x, y]]) => gamelib.play(g, x, y, p),
        [game, player],
        moves
    );
}
```

This doesn't

``` js
([[g, p], [x, y]]) => gamelib.play(g, x, y, p),
```
"
,,,https://github.com/facebook/react/issues/3005,3005,Checked attribute not realizing in DOM,[],closed,False,,22,2015-02-01T02:16:56Z,2021-03-17T22:20:35Z,2015-02-02T05:12:42Z,NONE,completed,,"Recently updated to 0.12.2 and a checkbox element hooked up to `this.props` is dynamically updating in the browser. Using the React inspector for Chrome, `this.props.item.isActive` seems to be toggling fine, but for some reason the changes don't propagate into the DOM. Not sure if this is specific to the update, or I've messed something up that I don't realize.

Here's my render function:

``` js
render: function() {
  let className = '';
  if (this.props.item.isActive) className = 'is-active';

  return (
    <li className={className}>
      <div className=""view"">
        <input
          className=""toggle""
          type=""checkbox""
          checked={this.props.item.isActive}
          onChange={this.toggleActive}
        />
        <span>{this.props.item.text}</span>
        <button className=""destroy-item"" onClick={this.destroyItem}></button>
      </div>
    </li>
  );
}
```
"
,,,https://github.com/facebook/react/issues/3270,3270,Lint task fails in master,[],closed,False,,5,2015-02-26T18:19:44Z,2015-02-26T19:40:56Z,2015-02-26T19:34:47Z,CONTRIBUTOR,completed,,"Just caused a pull request I made to fail in Travis as well, even though none of the errors have anything to do with what I changed. You can see for yourself if you checkout master and run grunt lint.

https://travis-ci.org/facebook/react/jobs/52310351
https://github.com/facebook/react/pull/3269
"
,,,https://github.com/facebook/react/issues/3248,3248,Autofocus should warn like for attribute.,"[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null}]",closed,False,,7,2015-02-24T01:56:40Z,2016-10-03T14:51:44Z,2016-10-03T14:51:44Z,NONE,completed,,"If user writes for instead of htmlFor, warning is shown. I suppose autofocus instead of autoFocus should warn too.
"
,,,https://github.com/facebook/react/issues/3075,3075,Markdown parsing error on docs,[],closed,False,,0,2015-02-06T07:59:06Z,2015-02-09T18:25:01Z,2015-02-09T18:12:23Z,NONE,completed,,"https://raw.githubusercontent.com/facebook/react/master/docs/docs/10.5-clone-with-props.md

The following markdown:

`````` markdown
> Note:
>
> `cloneWithProps` does not transfer `key` to the cloned component. If you wish to preserve the key, add it to the `extraProps` object:
> ```js
> var clonedComponent = cloneWithProps(originalComponent, { key : originalComponent.key });
> ```
> `ref` is similarly not preserved.
``````

Is being parsed incorrectly as can be seen on http://facebook.github.io/react/docs/clone-with-props.html
"
,,,https://github.com/facebook/react/issues/3375,3375,Update the getting started fiddles to v0.13.0,[],closed,False,,4,2015-03-11T05:26:00Z,2015-04-11T11:28:24Z,2015-04-10T20:32:26Z,NONE,completed,,"As of now the js fiddles at [getting-started](http://facebook.github.io/react/docs/getting-started.html) is using old syntax.

It must be:

``` js
class Hello extends React.Component {
  render() {
    return <div>Hello {this.props.name}</div>;
  }
}

React.render(<Hello name=""World"" />, document.getElementById('container'));
```

And the non-jsx version as well.
"
,,,https://github.com/facebook/react/issues/3340,3340,Context not updated on Component mounted with React.render(),"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,5,2015-03-07T01:34:57Z,2015-03-09T20:27:14Z,2015-03-09T20:27:14Z,CONTRIBUTOR,completed,,"This is tough for me to explain so I created a fiddle to demonstrate it. I have a layer/portal/whatever we are calling this pattern, that renders the children of a component to a new tree off of body via `React.render()`. I would expect context to also be passed, and I've taken special care to make sure the child to be passed to `.render()` is created with the correct owner. It all works fine context is passed, but it is never updated at that point. If I inspect the child element to be passed `._context` is correct but `.context` is never updated on the instance. Not sure if perhaps I just have the wrong expectation here?

Here is an illustration: **(updated with simpler example)**
http://jsfiddle.net/69z2wepo/3772/
"
,,,https://github.com/facebook/react/issues/3528,3528,Add ability to find dom component by prop value in the ReactTestUtils?,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":139734344,""node_id"":""MDU6TGFiZWwxMzk3MzQzNDQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils"",""name"":""Component: Test Utils"",""color"":""eb6420"",""default"":false,""description"":null}]",closed,False,,4,2015-03-26T19:16:38Z,2018-01-02T13:16:54Z,2018-01-02T13:16:54Z,NONE,completed,,"In order to make selectors more durable within selenium tests, I will generally add in `data-qa` attributes to any element that needs to be selected.  Developers are free to change classes and IDs as needed but know not to touch or move when refactoring `data-qa` attributes.  It would be nice to allow my unit tests to use the same `data-qa` attribute to select elements as my integration/selenium tests use.  The issue is that currently there is no way to do that with the ReactTestUtils.

I have a test helper object that contains a bunch of things to help with testing my react code.  Two of the methods are as follows:

``` javascript
scryRenderedDOMComponentsWithProp: function scryRenderedDOMComponentsWithProp(root, propName, propValue) {
    return reactTestUtils.findAllInRenderedTree(root, function(inst) {
        var instancePropValue = inst.props[propName];

        return (
            reactTestUtils.isDOMComponent(inst)
            && instancePropValue
            && (' ' + instancePropValue + ' ').indexOf(' ' + propValue + ' ') !== -1
        );
    });
},

findRenderedDOMComponentWithProp: function findRenderedDOMComponentWithProp(root, propName, propValue) {
    var all = this.scryRenderedDOMComponentsWithProp(root, propName, propValue);

    if (all.length !== 1) {
      throw new Error('Did not find exactly one match (found: ' + all.length + ') for prop  ' + propName + ' : ' + propValue);
    }

    return all[0];
}
```

This seems like a useful feature to me and was wondering if there is enough interest into this type of functionality to create a PR to add it directly into the ReactTestUtils?
"
,,,https://github.com/facebook/react/issues/3396,3396,checkAndWarnForMutatedProps fails in 0.13,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,5,2015-03-12T23:29:43Z,2015-04-02T21:26:25Z,2015-04-02T20:22:09Z,NONE,completed,,"This error make some addons (as react-fundation-app) fail. The cause is related with `element._store.originalProps`, that property (originalProps) not exist when you use a DOM element (div, a, p). I don't know the origianl cause of that, but it can be solved by changing
`if (!element._store)` for `if (!element._store || !element._store.originalProps)`.
"
,,,https://github.com/facebook/react/issues/3536,3536,wrong function,[],closed,False,,4,2015-03-28T07:14:06Z,2015-03-28T13:42:48Z,2015-03-28T07:17:12Z,NONE,completed,,"http://facebook.github.io/react/docs/multiple-components.html  in this page :

```
var Avatar = React.createClass({
  render: function() {
    return (
      <div>
        <ProfilePic username={this.props.username} />
        <ProfileLink username={this.props.username} />
      </div>
    );
  }
});

var ProfilePic = React.createClass({
  render: function() {
    return (
      <img src={'http://graph.facebook.com/' + this.props.username + '/picture'} />
    );
  }
});

var ProfileLink = React.createClass({
  render: function() {
    return (
      <a href={'http://www.facebook.com/' + this.props.username}>
        {this.props.username}
      </a>
    );
  }
});

React.render(
  <Avatar username=""pwh"" />,
  document.getElementById('example')
);
```

last function **React.render** is wrong! should be **React.renderComponent**
"
,,,https://github.com/facebook/react/issues/3452,3452,Trying to check whether a button click event calls a function in JSX,[],closed,False,,2,2015-03-18T17:52:24Z,2015-10-15T06:35:03Z,2015-10-15T06:35:03Z,NONE,completed,,"```
Error Result of - Expected: 0 toBe: 1
        at new jasmine.ExpectationResult (\node_modules\jest-cli\vendor\jasmine\jasmine-1.3.0.js:115:32)
        at null.toBe (node_modules\jest-cli\vendor\jasmine\jasmine-1.3.0.js:1236:29)
        at Spec.<anonymous> (\__tests__\Login-Test.js:33:65)
        at jasmine.Block.execute (node_modules\jest-cli\vendor\jasmine\jasmine-1.3.0.js:1065:17)
        at jasmine.Queue.next_ (I\node_modules\jest-cli\vendor\jasmine\jasmine-1.3.0.js:2098:31)
        at null._onTimeout (node_modules\jest-cli\vendor\jasmine\jasmine-1.3.0.js:2088:18)
        at Timer.listOnTimeout [as ontimeout] (timers.js:112:15)
```

---

``` js
// Unit Test case for Login.jsx
jest.dontMock('../src/js/pages/Login.jsx');

describe('login', function() {
    it('should invoke the btnLoginClick click event.', function() {     
        var React = require('react/addons');
        var LoginControl = require('../src/js/pages/Login.jsx');

        var TestUtils = React.addons.TestUtils;

        // Render a checkbox with label in the document
        var LoginUtil = TestUtils.renderIntoDocument(<LoginControl/>);  


       LoginControl.handleLoginClick = jest.genMockFunction();

        var input = TestUtils.findRenderedDOMComponentWithTag(
            LoginUtil, 'button');
        TestUtils.Simulate.click(input );
        expect(LoginControl.handleLoginClick.mock.calls.length).toBe(1);

    });
});
```

---

Login.jsx

``` js
/** @jsx React.DOM */
'use strict';
var React = require('react');
var FluxibleMixin = require('fluxible').Mixin;

var LoginStore = require('../stores/LoginStore.js');
var LoginActions = require('../actions/LoginActions.js');

var Login = React.createClass({
    mixins: [FluxibleMixin],
    statics: {
        storeListeners: [LoginStore]
    },

    getStateFromStores: function () {
        return this.getStore(LoginStore).getUser();

    },

    getInitialState: function () {
      return {
          isAuthenticated:false
      };
    },

    onChange: function () {
      this.setState(this.getStateFromStores());
    },

    handleLoginClick: function(event) {
        this.state.isAuthenticated=true;
        this.executeAction(LoginActions.loginUser, {
          userName: this.refs.userNameInput.getDOMNode().value,
          password: this.refs.passwordInput.getDOMNode().value

        });
        event.preventDefault();
    },

    render: function() {
      return (
          <div className=""container"">
              <form className=""form-signin"">
                  <a id=""tip"" href=""#"" data-toggle=""tooltip"" data-placement=""bottom"" title=""Hover!"">Hover me</a>
                  <h2 className=""form-signin-heading"">Please sign in</h2>
                  <label>{ this.state.loginMessage }</label>
                  <label htmlFor=""inputEmail"" className=""sr-only"">No address</label>
                  <input ref=""userNameInput"" type=""email"" defaultValue={this.state.userName} id=""inputEmail"" className=""form-control"" data-toggle=""tooltip"" data-placement=""bottom"" title=""Please enter a valid email address!"" placeholder=""Email Address"" required autofocus />
                  <label htmlFor=""inputPassword"" className=""sr-only"">Password</label>
                  <input ref=""passwordInput"" type=""password"" id=""inputPassword"" className=""form-control"" placeholder=""Password"" required />
                  <div className=""checkbox"">
                      <label>
                          <input type=""checkbox"" value=""remember-me"" /> Remember me
                      </label>
                  </div>
                  <button ref=""btnSubmit"" className=""btn btn-lg btn-primary btn-block"" onClick={this.handleLoginClick}>Sign in</button>
              </form>
            </div>

      );
    }
});

module.exports = Login;
```

---
"
,,,https://github.com/facebook/react/issues/3495,3495,Error: Cannot find module 'envify' - browserify,[],closed,False,,3,2015-03-24T07:57:26Z,2015-07-23T21:18:54Z,2015-07-23T21:18:54Z,NONE,completed,,"Not sure if this is a React issue or a browserify issue.

`Error: Cannot find module 'envify' from '/Users/d/winstonquery/frontend/node_modules/react'`
## Package.json

``` js
{
  ""name"": ""frontend"",
  ""version"": ""0.0.0"",
  ""description"": """",
  ""main"": ""index.js"",
  ""scripts"": {
    ""test"": ""echo \""Error: no test specified\"" && exit 1""
  },
  ""browserify"": {
    ""transform"": [
      ""browserify-shim""
    ]
  },
  ""browser"": {

  },
  ""browserify-shim"": {

  },
  ""author"": """",
  ""license"": ""ISC"",
  ""dependencies"": {
    ""jquery"": ""^2.1.3"",
    ""lodash"": ""^3.3.1"",
    ""url"": ""^0.10.3"",
    ""qs"": ""^2.3.3"",
    ""react"": ""^0.12.2""
  }
}
```
## gulpfile

``` js
var browserify = require('browserify'),
    gulp = require('gulp'),
    source = require('vinyl-source-stream'),
    uglify = require('gulp-uglify'),
    sourcemaps = require('gulp-sourcemaps'),
    reactify = require('reactify'),
    watchify = require('watchify'),
    neat = require('node-neat'),
    lr = require('gulp-livereload'),
    wait = require('gulp-wait'),
    sass = require('gulp-sass');

// bundler.
var bundler = browserify({
    entries: [__dirname + '/frontend/js/index.js'],
    transform: [reactify],
    debug: true,
    cache: {}, packageCache: {}, fullPaths: true
}),
watcher = watchify(bundler);

gulp.task('sass', function() {
    gulp.src(__dirname + '/frontend/sass/app.scss')
        .pipe(sourcemaps.init())
        .pipe(sass({
            includePaths: neat.includePaths,
            style: 'compressed'
        }))
        .pipe(sourcemaps.write())
        .pipe(gulp.dest(__dirname + '/public'))
        .pipe(lr());
});

gulp.task('realoadViews', function() {
    gulp.src('')
        .pipe(wait(600))
        .pipe(lr());
});

gulp.task('js', function() {
    watcher
        .bundle()
        .pipe(source('bundle.js'))
        .pipe(gulp.dest(__dirname + '/public/js'))
        .pipe(lr());
});

gulp.task('watch', function() {
    lr.listen();

    gulp.watch(__dirname + '/views/**/*.dust', ['realoadViews']);
    gulp.watch(__dirname + '/frontend/sass/**/*.scss', ['sass']);
    gulp.watch(__dirname + '/frontend/js/**/*.js', ['js']);

    watcher.on('update', function() {
        watcher
            .bundle()
            .pipe(source('bundle.js'))
            .pipe(gulp.dest(__dirname + '/public/js'))
            .pipe(lr());
    });
});
```
"
,,,https://github.com/facebook/react/issues/3538,3538,"Allow marking an array as ""static""","[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":139653724,""node_id"":""MDU6TGFiZWwxMzk2NTM3MjQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities"",""name"":""Component: Core Utilities"",""color"":""c5def5"",""default"":false,""description"":null}]",closed,False,,12,2015-03-28T12:08:20Z,2017-11-28T23:21:12Z,2017-11-28T23:21:12Z,CONTRIBUTOR,completed,,"I expected there to be an issue for this already, but couldn't find it. Apologies if this a dupe.

Occasionally it is useful to put a few elements in an array within render, when conditionally building different bits of the view.
React will issue a warning whenever an array is used that doesn't have keys - even if the author knows that this array is literal, and therefore doesn't require keys.

``` js
var label = ""Label"";
if (this.props.important) {
  label = [""Label"", <Tag text=""important"" />];
}
return <div>
  <h3>{label}</h3>
  <p>{this.props.body}</p>
</div>
```

In this example, React will warn about lack of keys, even though they're not needed.

One option would be to extend `React.addons.createFragment` to accept an array, and use the indexes as keys.

``` jsx
label = React.addons.createFragment([""Label"", <Tag text=""important"" />]);
```
"
,,,https://github.com/facebook/react/issues/3415,3415,Render multiple components without a wrapping element,[],closed,False,,3,2015-03-15T10:10:17Z,2017-01-26T12:07:07Z,2015-03-15T11:12:24Z,NONE,completed,,"I haven't found a duplicate issue, only this post https://groups.google.com/forum/#!searchin/reactjs/render$20multiple/reactjs/pHNJe8trFOg/J-zd4jxAkJ4J

I have a valid use case and like to share it.

I'm building a framework for storytelling based on react. Every single element is positioned fixed as I've written a custom layout engine and need full control over everything. My entry level structure looks something like this

``` html
<Story>
    <Grid />
    <UI />
</Story>
```

`<Grid>` renders all the actual items (`<GridItem>`) of the story (text, images, videos, etc.). `<UI />` renders UI elements that are common to every story. For example a `<VolumeControl>` for controling the volume of audio/video items.

If I'd render the structure as given above, this would be the result

``` html
<div>
    <div>
        <!--list of GridItems-->
    </div>
    <div>
        <!--list of UI components-->
    </div>
</div>
```

Since everything is positioned fixed, this does not work. The UI layer covers everything, making it unusable (e.g. can't click on videos). That's why I'm currently forced to do the following in the `render` method of `Story`

``` html
<div>
    <Grid />
    <VolumeControl />
    <Navigation />
    <ShareButtons />
</div>
```

This works but is ugly as I lose separation. I don't want the `Story` component to have to know about every UI component. Sth. like a virtual `<Fragment>` component that renders it's children without a wrapper element would solve the problem as I could return it from the `<UI>` component.

I know this is a rare use-case, I'm rather talented at reaching the edge cases of every framework I touch.

Funny how writing down these things sometimes magically makes your brain do useful stuff. I found another workaround. I'm using `visiblity:none` on the UI layer and `visibility:visible` on the UI components. But it's a hack, nothing more.
"
,,,https://github.com/facebook/react/issues/3359,3359,onSubmit doesn't work with dangerouslySetInnerHTML (but onClick does),[],closed,False,,5,2015-03-10T12:31:53Z,2017-07-11T22:24:35Z,2017-07-11T22:24:35Z,NONE,completed,,"The following JSFiddle demonstrates the issue - clicking the submit for the first form alerts `click` and then `submit`; however the second form only alerts `click` - the submit is not bubbled up from the form that was embedded via `dangerouslySetInnerHTML`.

http://jsfiddle.net/s51q35ys/2/

Code for posterity:

```
var FormTest = React.createClass({
    onSubmit: function(e) {
      alert('submit');
      e.preventDefault();
    },
    onClick: function(e) {
      alert('click');
    },
    render: function() {
      return (
        <div onSubmit={this.onSubmit} onClick={this.onClick}>
          <form>
            <input type='text' />
            <input type='submit' />
          </form>
          <div dangerouslySetInnerHTML={ {__html: ""<form><input type='text' /><input type='submit' /></form>""} } />
        </div>
      );
    }
});

React.render(<FormTest />, document.body);
```
"
,,,https://github.com/facebook/react/issues/3303,3303,Add First Class Support for Immutable-js Records (or maybe Maps) in setState?,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":739777675,""node_id"":""MDU6TGFiZWw3Mzk3Nzc2NzU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API"",""name"":""Component: Component API"",""color"":""d4c5f9"",""default"":false,""description"":null}]",closed,False,,11,2015-03-03T06:56:58Z,2019-10-15T17:10:05Z,2019-10-15T17:10:05Z,COLLABORATOR,completed,,"Seems like this is a common use case for `replaceState` which we would like to deprecate. #3236 

Not quite sure how this would work with Records and mixins since they're fixed type.

cc @leebyron 
"
,,,https://github.com/facebook/react/issues/3620,3620,document is not defined on server,[],closed,True,,39,2015-04-08T09:57:48Z,2018-02-09T11:59:19Z,2017-09-20T00:08:29Z,NONE,completed,,"I saw there was a bug for this a year ago (facebook/react#1866) and it was fixed. I am encountering it now on 0.13.1. 

I am running react on the server to generate html. On one of my parent components I have a variable whose value cannot be determined until it reaches some child component. So I need to implement some way for a child component to pass back data to its parent. I read https://facebook.github.io/react/tips/communicate-between-components.html and I implemented it:

Parent component passes callback function as a prop to child component.
Child component calls callback in componentWillMount function (also tested calling callback in getInitialState).
Callback calls setState to update state variable in parent.

This does not work serverside as an exception is thrown about document not being defined.
"
,,,https://github.com/facebook/react/issues/3623,3623,ReactCSSTransitionGroup warns when removed while transition in progress,"[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null}]",closed,False,,4,2015-04-08T19:05:46Z,2016-06-01T18:20:31Z,2016-06-01T18:20:31Z,MEMBER,completed,,"The [`noEventTimeout` timer](https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/addons/transitions/ReactCSSTransitionGroupChild.js#L80) is not cleared when a child is unmounted while a transition is in progress. This causes a false positive warning.
"
,,,https://github.com/facebook/react/issues/3608,3608,JSX Compiler Issue for Html Element,[],closed,False,,2,2015-04-07T10:38:53Z,2015-04-07T14:30:03Z,2015-04-07T14:30:03Z,NONE,completed,,"Just started out making new UI components in React. Faced the following issue.

I defined the component state.

``` javascript
getInitialState: function() {
    return {checked:false};
}
```

I  use the state in the input tag inside the render function

``` javascript
render: function () {
return(
     <div className={this.state.className} onClick={this.clickHandler} >
       <input type=""checkbox"" ref=""innerinput""  {this.state.checked} />;
       <label>Checkbox</label>
    </div>
)
}
```

It gives the following error:

{ [ReactifyError: /usr/local/src/st/agile/app/App.js: Parse Error: Line 55: Unexpected token this while parsing file: /usr/local/src/st/agile/app/App.js]
  index: 1149,
  lineNumber: 55,
  column: 47,
  description: 'Unexpected token this',
  name: 'ReactifyError',
  fileName: '/usr/local/src/st/agile/app/App.js',
  filename: '/usr/local/src/st/agile/app/App.js',
  stream: 

It seems that the JSX supports only ""type=value"" properties and not property like ""checked"" without value. 
"
,,,https://github.com/facebook/react/issues/3776,3776,"Remove ""V in MVC"" text from the website",[],closed,False,,15,2015-04-29T00:18:43Z,2016-06-11T02:50:00Z,2016-02-18T07:02:47Z,CONTRIBUTOR,completed,,"> Lots of people use React as the V in MVC

I'm sure there was some thought put into this phrase on the website, but I think it breeds the idea that you just dump `React.render` inside of a `Backbone.View.render` as though its a recommended application architecture. In my experience, people end up with all the same problems they had before react: incomprehensible webs of events, cascading updates, etc.

Perhaps something like:

> React is only concerned about rendering UI. Since it makes no assumptions about the rest of your technology stack, it's easy to try it out on a small feature in an existing project, or at the top of a new one.
"
,,,https://github.com/facebook/react/issues/3616,3616,Performance between 2 components,[],closed,False,,4,2015-04-08T01:09:55Z,2015-04-08T12:53:56Z,2015-04-08T12:53:56Z,NONE,completed,,"I'm trying to proof that React is faster than Angular, but I had a problem with my code.

I need to generate a list with 1000 lines and use a input to change the value of specific field inside then, in angular I can do a fast binding, however in react I can't.

This is my code in angular:

``` html
<!DOCTYPE html>
<html>
    <head>
        <script src=""https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js""></script>
    </head>  
    <body ng-app=""myApp"" ng-controller=""MainContrl"">

        <input type=""text"" ng-model=""bind"" />
        <ul>
            <li ng-repeat=""r in range"">
                {{r}} - {{bind}}
            </li>
        </ul>
    <script>
        var app = angular.module('myApp', []);
            app.controller('MainContrl', function($scope) {
                var d = new Date();
                var range = [];

                for(var i = 0; i <= 1000; i++) {
                  range.push(i + ' - ' + d.getTime());
                }

                $scope.range = range;
        });
    </script>
  </body>
</html>
```

And this is my code in react:

``` html
<!DOCTYPE html>
<html>
    <head>
        <script src=""http://fb.me/react-0.13.1.js""></script>
        <script src=""http://fb.me/JSXTransformer-0.13.1.js""></script>
    </head>  
    <body>
        <div id=""content""></div>

        <script type=""text/jsx"">

            var Span = React.createClass({
              getInitialState: function() {
                return {
                  value: ''
                };
              },
              componentDidMount: function() {
                document.addEventListener('event-input',this.handleChange);
              },
              handleChange: function(e) {
                this.setState({msg: e.detail});
              },
              componentWillUnmount: function() {
                document.removeEventListener('event-input');
              },
                render: function () {
                    return (
                        <span key={this.props.chave}>{this.state.msg}</span>
                    );
                }
            });

            var Hello = React.createClass({
            handleChange: function (e) {
              var event = new CustomEvent('event-input', { 'detail': e.target.value });
                    document.dispatchEvent(event);
            },
            render: function() {
                var li = [];
                for (var i = 0; i <= 1000; i++)
            {
                li.push({
                    id: i,
                    time: (new Date()).getTime()
                    });
            }
              return (
                <div>{(new Date()).getTime()}
                  <input type=""text"" onChange={this.handleChange} />
                  <ul>
                            {li.map(function(result) {
                      return <li key={result.id}>{result.id} - {result.time} - <Span chave={'span'+result.id} /></li>;
                    })}
                  </ul>
                </div>
              );
            }
          });

          React.render(<Hello />, document.getElementById('content'));
        </script>
    </body>
</html>
```

Can somebody help me to proof that React is faster than Angular?
"
,,,https://github.com/facebook/react/issues/3751,3751,React's blur may not have relatedTarget in IE 9-11 where it is supported.,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":69105383,""node_id"":""MDU6TGFiZWw2OTEwNTM4Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Browser:%20IE"",""name"":""Browser: IE"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,16,2015-04-26T23:20:12Z,2020-08-10T17:56:47Z,2020-08-10T17:56:47Z,CONTRIBUTOR,completed,,"ReactBrowserEventEmitter has some handling for `onBlur` and `onFocus`.

See:
https://github.com/facebook/react/blob/94a3b0f8a304202bb7c4cc32286e404ac3cc9464/src/browser/ReactBrowserEventEmitter.js#L262-L293

React will first check if it can trap `focus` with a capturing event using `addEventListener`. If it can't and the browser supports `focusin` then it will use `focusin`.

However there is a problem with this pattern. Internet Explorer implements `relatedTarget` on `focusin` and `focusout` but it does not implement it in `focus` and `blur`. As of IE 9, IE supports addEventListener and trapping capturing events.

This means that IE 8 and before React will have `relatedTarget` on `onFocus` and `onBlur` handlers. But in IE 9-11 `relatedTarget` will be null in React's `onFocus` and `onBlur` handlers even though IE would support it if `focusin` and `focusout` had been used.
"
,,,https://github.com/facebook/react/issues/3780,3780,Expose React.addons.* as react/addons/* on npm and deprecate react/addons,"[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null}]",closed,False,,5,2015-04-29T02:22:49Z,2015-04-30T21:41:34Z,2015-04-29T22:31:28Z,COLLABORATOR,completed,,"The current system of packaging react/addons isn't great because you need to pull in all the addons even if you just want to use one of them. Instead, let's make it so you can do `require('react/addons/TransitionGroup')` and similar.

This should be as simple as adding a few files to build/npm-react that require the (private) internal modules.

``` js
// npm-react/addons/TransitionGroup.js
module.exports = require('../lib/ReactTransitionGroup.js');
```
"
,,,https://github.com/facebook/react/issues/3774,3774,npm update broke something relating to react-tools,[],closed,False,,2,2015-04-28T18:57:36Z,2015-04-28T19:23:29Z,2015-04-28T19:23:29Z,CONTRIBUTOR,completed,,"I just ran npm update react-native and it broke my project. Got this error,

Cannot find package main file for package: /Users/blaine/dev/native/evueIOS/node_modules/react-native/node_modules/react-tools/src

It could be something just related to me but thought I'd post it up.
"
,,,https://github.com/facebook/react/issues/3708,3708,Long tap not submitting form,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,4,2015-04-20T19:34:58Z,2016-04-07T04:00:44Z,2016-04-07T04:00:44Z,NONE,completed,,"Hi there,

We've observed that on mobile browsers (specifically Chrome, Firefox, and Safari), if we try to submit a form after holding the submit input button for a while (half second or longer), the onSubmit events for the form do not get triggered.

In comparison, a quick tap triggers our onSubmit callbacks with no issue.
"
,,,https://github.com/facebook/react/issues/3660,3660,React-tools installation fails,[],closed,False,,3,2015-04-13T11:11:16Z,2015-04-14T14:05:57Z,2015-04-14T14:05:57Z,NONE,completed,,"npm-debug.log
/////////////////////////////////////
0 info it worked if it ends with ok
1 verbose cli [ 'C:\Program Files\nodejs\\node.exe',
1 verbose cli   'C:\Program Files\nodejs\node_modules\npm\bin\npm-cli.js',
1 verbose cli   'install',
1 verbose cli   '-g',
1 verbose cli   'react-tools' ]
2 info using npm@2.7.4
3 info using node@v0.12.2
4 verbose node symlink C:\Program Files\nodejs\node.exe
5 silly cache add args [ 'react-tools', null ]
6 verbose cache add spec react-tools
7 silly cache add parsed spec { raw: 'react-tools',
7 silly cache add   scope: null,
7 silly cache add   name: 'react-tools',
7 silly cache add   rawSpec: '',
7 silly cache add   spec: '_',
7 silly cache add   type: 'range' }
8 verbose addNamed react-tools@_
9 silly addNamed semver.valid null
10 silly addNamed semver.validRange *
11 silly addNameRange { name: 'react-tools', range: '*', hasData: false }
12 silly mapToRegistry name react-tools
13 silly mapToRegistry using default registry
14 silly mapToRegistry registry https://registry.npmjs.org/
15 silly mapToRegistry uri https://registry.npmjs.org/react-tools
16 verbose addNameRange registry:https://registry.npmjs.org/react-tools not in flight; fetching
17 verbose request uri https://registry.npmjs.org/react-tools
18 verbose request no auth needed
19 info attempt registry request try #1 at 19:08:18
20 verbose request id 5b79c264902ebbf2
21 http request GET https://registry.npmjs.org/react-tools
22 info retry will retry, error on last attempt: Error: connect EACCES
23 info attempt registry request try #2 at 19:08:29
24 http request GET https://registry.npmjs.org/react-tools
25 info retry will retry, error on last attempt: Error: connect EACCES
26 info attempt registry request try #3 at 19:09:29
27 http request GET https://registry.npmjs.org/react-tools
28 verbose stack Error: connect EACCES
28 verbose stack     at exports._errnoException (util.js:746:11)
28 verbose stack     at TCPConnectWrap.afterConnect [as oncomplete](net.js:1000:19)
29 verbose cwd C:\Windows\System32
30 error Windows_NT 6.1.7601
31 error argv ""C:\Program Files\nodejs\\node.exe"" ""C:\Program Files\nodejs\node_modules\npm\bin\npm-cli.js"" ""install"" ""-g"" ""react-tools""
32 error node v0.12.2
33 error npm  v2.7.4
34 error code EACCES
35 error errno EACCES
36 error syscall connect
37 error Error: connect EACCES
37 error     at exports._errnoException (util.js:746:11)
37 error     at TCPConnectWrap.afterConnect [as oncomplete](net.js:1000:19)
37 error  { [Error: connect EACCES] code: 'EACCES', errno: 'EACCES', syscall: 'connect' }
38 error Please try running this command again as root/Administrator.
39 verbose exit [ 1, true ]

tks~:)
"
,,,https://github.com/facebook/react/issues/3730,3730,Error handling with server side rendering,[],closed,False,,6,2015-04-23T08:36:35Z,2016-06-12T07:38:08Z,2015-04-24T18:14:26Z,NONE,completed,,"Hi.

When running React.renderToString() on my node.js server I get no error messages when there is a error. Instead everything just stops, and the browser get no response. I've added propTypes, and they give me errors. But if a key inside a object isn't there, there is no error message. This is a big problem when I'm trying to learn React to other developers. Is there a callback or anything to detect errors in React.renderToString?

Thanks.
"
,,,https://github.com/facebook/react/issues/3989,3989,SGML comments in JSX,[],closed,False,,1,2015-05-30T10:48:22Z,2015-06-01T23:33:03Z,2015-06-01T23:33:03Z,NONE,completed,,"e.g.

``` XML
<!-- THE COMMENT -->
<ul>
  {this.props.items.map((item, i) =>

    <li key={i}>{item}</li>

  )}
</ul>
```
"
,,,https://github.com/facebook/react/issues/3932,3932,opaque handle to replace rootNodeId,[],closed,False,,4,2015-05-22T00:33:43Z,2015-08-10T20:32:45Z,2015-08-10T20:32:45Z,NONE,completed,,"Losing this in 0.13.X broke Om applications like CircleCI that used this to maintain an snapshot of their entire application (https://www.youtube.com/watch?v=5yHFTN-_mOo). This permitted full serialization and deserialization of all React app state including transient component local state between browsers (powerful for testing purposes) without forcing programmers to write non-modular code via world passing.

While it's understandable that people might rely on the specifics of the handle, we just need some opaque identifier. We don't care about the actual representation of the handle.

This may well be out of scope. But it would be nice for this issue to get some consideration and official feedback.
"
,,,https://github.com/facebook/react/issues/3878,3878,"""Warning: setState(...): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op."" has no context","[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null}]",closed,True,,17,2015-05-14T11:27:59Z,2015-08-10T12:55:24Z,2015-06-05T16:39:26Z,CONTRIBUTOR,completed,,"The ""Warning: setState(...): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op."" warning contains no context of what component setState was run on.

setState can happen at any time and changes to another component can be the cause of an unmount that results in the setState happening when unmounted so it's hard to even link the most recent code chagne you made to what setState call is responsible.

Simply including the `displayName` in the message like other warnings have should help devs at least a little in tracking down the source of this warning.
"
,,,https://github.com/facebook/react/issues/3958,3958,"Upgrade eslint, use babel-eslint",[],closed,False,,2,2015-05-26T18:07:20Z,2015-05-28T18:31:30Z,2015-05-28T18:31:30Z,MEMBER,completed,,"We're a few versions back, it would be good to get all upgraded. There have been a few changes to rules which are a bit annoying so we'll probably have to tweak the configs / make a few changes to code.

cc @pipeep
"
,,,https://github.com/facebook/react/issues/3961,3961,"Missing ""challenge"" and ""keytype"" attributes for ""keygen"" tag","[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,13,2015-05-26T19:12:29Z,2015-05-28T16:32:10Z,2015-05-28T16:32:10Z,NONE,completed,,"I'm using [keygen](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/keygen) tag to generate client certificates and I'm missing _challenge_ and _keytype_ attributes.
"
,,,https://github.com/facebook/react/issues/3867,3867,Feature request: ability pass context to React.render(),[],closed,False,,5,2015-05-13T12:41:03Z,2015-07-30T17:20:19Z,2015-07-29T21:51:37Z,NONE,completed,,"Especially for testing parts of my GUI, I would like to be able to say:

``` javascript

var myContext = foo;
React.render(<MyComponent/>, document.getElementById(""all-content""), myContext)
```

instead of having to make a wrapper component every time and define childContext on that.
"
,,,https://github.com/facebook/react/issues/3865,3865,React.PropTypes.element message is unclear,[],closed,False,,3,2015-05-13T06:07:12Z,2015-05-13T22:14:00Z,2015-05-13T22:14:00Z,CONTRIBUTOR,completed,,"When `React.PropTypes.element` fails, this is the error message:

```
Invalid prop `children` supplied to `MyComponent`, expected a
ReactElement. Check the render method of `App`.
```

I think the error message isn't clear enough for the case that it fails due to you passing multiple elements to the children prop.

Imagine a new user of React is using a component that only accepts a single child and they pass multiple children instead. Seeing this error might lead them to believe they are somehow passing a number, string, null, etc. as children. I don't think their first instinct would be that their mistake is that they're passing multiple children.

To make this kind of mistake easier to diagnose, can the error message emphasize the fact that you can only pass a single element?
"
,,,https://github.com/facebook/react/issues/3832,3832,Debugging CSS Transitions,[],closed,False,,1,2015-05-07T22:19:50Z,2015-12-08T02:54:20Z,2015-12-08T02:54:20Z,NONE,completed,,"Is there any way to debug these warnings? My application is quite large and some hints in the right direction would be helpful. What is the name of the offending transition? What is the DOM element that triggered it?

![wz901](https://cloud.githubusercontent.com/assets/270504/7527019/7427295c-f4e5-11e4-836d-613f2111200c.png)

Also see here: http://stackoverflow.com/questions/30110791/debugging-react-css-transitions
"
,,,https://github.com/facebook/react/issues/3921,3921,Dedupe warnings in validateDOMNesting,[],closed,False,,0,2015-05-20T22:32:52Z,2015-05-22T17:33:36Z,2015-05-22T17:33:36Z,COLLABORATOR,completed,,"We shouldn't log more than once for any particular parent/child/owner-stack trio.
"
,,,https://github.com/facebook/react/issues/4153,4153,Support Stateful Test Renderer,"[{""id"":270986513,""node_id"":""MDU6TGFiZWwyNzA5ODY1MTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Big%20Picture"",""name"":""Type: Big Picture"",""color"":""61dafb"",""default"":false,""description"":null},{""id"":1775958285,""node_id"":""MDU6TGFiZWwxNzc1OTU4Mjg1"",""url"":""https://api.github.com/repos/facebook/react/labels/React%20Core%20Team"",""name"":""React Core Team"",""color"":""9149d1"",""default"":false,""description"":""Opened by a member of the React Core Team""}]",closed,False,,1,2015-06-17T06:03:11Z,2021-03-24T17:23:47Z,2021-03-24T17:23:47Z,COLLABORATOR,completed,,"The plan is to move unnecessary state out of the production renderer. Therefore there will be no public API to introspect the current state of the tree. I.e. no `_renderedChildren`, props inspection etc.

The React DevTools will maintain its own shadow tree for introspection / reflection purposes.

However, this also means that if you use `React.render` to run deeply rendered unit tests, you will no longer be able to use various reflective APIs to inspect the state of the current React tree. Such as `ReactTestUtils.findAllInRenderedTree`, the legacy `reactComponentExpect` utils etc.

Our recommended unit testing solution is shallow testing.

However, it would be possible to create a new renderer that keeps track of the whole React tree, including props, and therefore reenables stateful unit testing. That might be a helpful upgrade path. E.g. something like `ReactTestUtils.render` which would have a forked version of the primary renderer.

See #4151

cc @spicyj , @dataminr
"
,,,https://github.com/facebook/react/issues/4056,4056,Shallow Renderer should expose rendered component instance,"[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null},{""id"":204945357,""node_id"":""MDU6TGFiZWwyMDQ5NDUzNTc="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Shallow%20Renderer"",""name"":""Component: Shallow Renderer"",""color"":""eb6420"",""default"":false,""description"":null}]",closed,False,,7,2015-06-08T02:55:29Z,2015-10-07T19:52:09Z,2015-10-07T19:52:09Z,CONTRIBUTOR,completed,,"Just as `ReactMount.render` returns the rendered component instance, it seems to me that `ReactShallowRenderer.prototype.render` should return the rendered component or expose it in some other way (maybe a `getRenderedComponent` method) so that when testing stateful components via shallow rendering, assertions can be made against the state of the component instance.
"
,,,https://github.com/facebook/react/issues/4055,4055,Automatically populate props.children when not declared,[],closed,False,,3,2015-06-08T01:25:38Z,2015-06-08T22:31:58Z,2015-06-08T22:31:58Z,NONE,completed,,"I am currently writing code to traverse through a form with all its inputs - this to collect form data for a PUT. I'm almost there but there is one problem left: children aren't always populated.

I have something like this recursive function in coffee to collect all form children:

``` coffee
_collectAllChildren: (target) ->
  children = []
  React.Children.forEach(target.props.children, (child) =>
    children.push(child)

    if child.props.children
      children = children.concat(@_collectAllChildren(child))
  )
  children
```

But inside one form component, I have nested React elements (using React bootstrap) like this one called `FirstLastNameInput`:

``` cjsx
  render: ->
    <Row className = {@props.rowClassName}>
      <Input
        hasFeedback
        required
        md               = 6
        type             = 'text'
        name             = 'firstName'
        value            = @props.firstName
      />
      <Input
        hasFeedback
        required
        md               = 6
        type             = 'text'
        name             = 'lastName'
        value            = @props.lastName
      />
    </Row>
```

and here is the problem. When `_collectAllChildren` tries to collect all children for FirstLastNameInput, then it has no children but I wish `@props.children` would return the properties of these two Inputs anyway.

This would make things a lot easier and prevents me from doing dirty React hacks.
"
,,,https://github.com/facebook/react/issues/4245,4245,Add runtime deprecation warning for cloneWithProps,"[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null}]",closed,False,"{""url"":""https://api.github.com/repos/facebook/react/milestones/13"",""html_url"":""https://github.com/facebook/react/milestone/13"",""labels_url"":""https://api.github.com/repos/facebook/react/milestones/13/labels"",""id"":1035426,""node_id"":""MDk6TWlsZXN0b25lMTAzNTQyNg=="",""number"":13,""title"":""0.14"",""description"":null,""creator"":{""login"":""sophiebits"",""id"":6820,""node_id"":""MDQ6VXNlcjY4MjA="",""avatar_url"":""https://avatars.githubusercontent.com/u/6820?v=4"",""gravatar_id"":"""",""url"":""https://api.github.com/users/sophiebits"",""html_url"":""https://github.com/sophiebits"",""followers_url"":""https://api.github.com/users/sophiebits/followers"",""following_url"":""https://api.github.com/users/sophiebits/following{/other_user}"",""gists_url"":""https://api.github.com/users/sophiebits/gists{/gist_id}"",""starred_url"":""https://api.github.com/users/sophiebits/starred{/owner}{/repo}"",""subscriptions_url"":""https://api.github.com/users/sophiebits/subscriptions"",""organizations_url"":""https://api.github.com/users/sophiebits/orgs"",""repos_url"":""https://api.github.com/users/sophiebits/repos"",""events_url"":""https://api.github.com/users/sophiebits/events{/privacy}"",""received_events_url"":""https://api.github.com/users/sophiebits/received_events"",""type"":""User"",""site_admin"":false},""open_issues"":0,""closed_issues"":74,""state"":""closed"",""created_at"":""2015-03-23T23:33:55Z"",""updated_at"":""2015-10-09T17:52:30Z"",""due_on"":null,""closed_at"":""2015-10-08T00:19:55Z""}",0,2015-06-29T05:07:55Z,2015-07-09T15:24:20Z,2015-07-09T15:24:20Z,COLLABORATOR,completed,,
,,,https://github.com/facebook/react/issues/4050,4050,renderToStaticMarkup should not have side effects,[],closed,False,,1,2015-06-06T15:37:09Z,2015-06-08T18:53:33Z,2015-06-08T18:53:33Z,NONE,completed,,"see #3344 

This just seems wrong and completely unexpected. 
"
,,,https://github.com/facebook/react/issues/4213,4213,Forward refs / Support getPublicInstance,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":270986513,""node_id"":""MDU6TGFiZWwyNzA5ODY1MTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Big%20Picture"",""name"":""Type: Big Picture"",""color"":""61dafb"",""default"":false,""description"":null},{""id"":739777675,""node_id"":""MDU6TGFiZWw3Mzk3Nzc2NzU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API"",""name"":""Component: Component API"",""color"":""d4c5f9"",""default"":false,""description"":null}]",closed,False,,25,2015-06-24T21:06:50Z,2018-03-30T01:11:14Z,2018-03-30T01:11:14Z,CONTRIBUTOR,completed,,"For 0.14 we'd like a feature that allows us to forward refs or define what the public instance of a component should be. That way we can make higher order components that are completely transparent.
"
,,,https://github.com/facebook/react/issues/4247,4247,"How to bind(this, event, arg1, arg2) in render function",[],closed,False,,1,2015-06-29T10:12:52Z,2015-06-29T10:24:42Z,2015-06-29T10:24:42Z,NONE,completed,,"Hi friends

``` js
class Test {
   handleChange(event, type) {
      console.log(event); // this shows undefined
   }
   render() {
      return (
         <div>
             <input onChange={this.handleChange.bind(this, event, 'title')}/>
         </div>
      )
   }
} 
```

When I console.log(event); // this shows undefined
How can i access the event thanks !
"
,,,https://github.com/facebook/react/issues/4243,4243,Force element sub tree cleaning ,[],closed,False,,1,2015-06-28T19:16:06Z,2015-06-28T19:18:13Z,2015-06-28T19:18:13Z,NONE,completed,,"Hi all. I have a big search result set rendered as <div><ResultSet /></div>

When I make a new search request, server return new unique results, and I think that in this case there is no need to calculate the optimal DOM difference. Simply right to remove a DOM sub tree of ResultSet and render a new.
Do I understand correctly that the attribute Key solve this problem?

Thanks for the answer!
"
,,,https://github.com/facebook/react/issues/4161,4161,dangerouslySetInnerHTML is putting '[object Object]' into the DOM,[],closed,False,,2,2015-06-18T00:59:22Z,2015-06-18T01:20:00Z,2015-06-18T01:20:00Z,NONE,completed,,"I have my component making method:

``` javascript
// main.js
makeOutput(model) {
    return <Key model={model} />;
},
render() {
    return (
        <ContentEditable html={this.state.value.map(this.makeOutput)} />
    )
}
```

``` javascript
    // contenteditable.js
    makeMarkup() {
        const markup = this.props.html.map(React.renderToString).join('');
        console.log(markup);
        return markup;
    },

    render(){
        return <pre
            contentEditable
            dangerouslySetInnerHTML={{__html: `<span>${this.makeMarkup()}</span>`}}
        ></pre>;
    },
```

The `console.log` logs:

```
<span data-reactid="".2"" data-react-checksum=""-1265038706"">b</span><span data-reactid="".3"" data-react-checksum=""-1264317809"">b</span>
```

However, what's actually put to the DOM is:

```
[object Object][object Object]
```

Any reason for the above?
"
,,,https://github.com/facebook/react/issues/4067,4067,"""passthrough"" children don't re-render when parent changes",[],closed,False,,12,2015-06-09T21:18:10Z,2015-06-10T21:51:52Z,2015-06-10T15:18:01Z,NONE,completed,,"Given the following Components with the following implementations:

**home.js:**

``` js
render () {
  return (
    <div className=""home"">
      <Router>
        <Route path='/'>
          <span>Hi from Index</span>
        </Route>
        <Route path='/user/martin'>
          <span>Hi Martin</span>
        </Route>
      </Router>
    </div>
  )
}
```

**router.js:**

``` js
componentDidMount () {
    var self = this;

    history.on('pushstate', function(pathname) {
      self.setState({});
    })

    history.on('popstate', function(pathname) {
      self.setState({})
    })
}

render () {
    return React.createElement('div', { className: 'Router' }, this.props.children);
}
```

**route.js:**

``` js
render () {
  if (!match(this.props.path)) return null;
  return React.createElement('div', { className: 'Route'}, children);
}
```

---

I'm running into the situation that since I'm not creating the `<Route>` in the parent and passing it through from the owner, the children do not re-render when the parent's state changes.

What's the best way around this? Seems like a pretty common use case.
"
,,,https://github.com/facebook/react/issues/4191,4191,Do not change cursor position in input fields,[],closed,False,,6,2015-06-22T05:08:44Z,2015-06-22T22:22:27Z,2015-06-22T22:06:00Z,NONE,completed,,"This bug happens on the latest FF only, regardless of the platform.

There is this code:

``` js
          React.createElement('input', _extends({
            ref: this.props.id,
            className: 'passwordField__input',
            type: this.state.isPassword ? 'password' : 'text',
            value: this.state.value,
            style: this.state.isPassword ? null : this.unMaskStyle,
            onChange: this.handleChange
          }, props)),
```

When you type something, then change the type in the middle, then the cursor position changes, goes back to the beginning. But it shouldn't.
"
,,,https://github.com/facebook/react/issues/4526,4526,Warning setState on unmounted component with traceback,[],closed,False,,2,2015-07-30T21:07:16Z,2015-07-31T07:07:11Z,2015-07-31T06:21:56Z,NONE,completed,,"> Warning: setState(...): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op.

It would be great to get a stack trace here so I know what this warning is referring to
"
,,,https://github.com/facebook/react/issues/4373,4373,Faster way to show/hide components? Toggle component or toggle display? ,[],closed,True,,17,2015-07-14T08:30:12Z,2018-01-07T12:39:07Z,2015-07-14T18:57:57Z,NONE,completed,,"- Toggle Component

```
render(){
  var Child = something? A : B;
  return (
    <Child />
  ) 
}
```
- Toggle CSS Display is simple

```
className={this.props.shouldHide ? 'hidden' : ''} 
```
"
,,,https://github.com/facebook/react/issues/4304,4304,Using extend to create a class of a react component shows me an error for initialState,[],closed,False,,2,2015-07-06T21:10:25Z,2015-07-06T21:42:02Z,2015-07-06T21:42:02Z,NONE,completed,,"Maybe i don't understand why? But what's the alternative?

Warning: getInitialState was defined on CampaignList, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?
3vendor.js:21739 Warning: setState(...): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op.

``` coffeescript
class CampaignList extends React.Component
  getInitialState: ->
    {empty:true}
```

..and

``` cjsx
 <div className={className}>
      <Sidebar>
        <CampaignForm/>
      </Sidebar>
      <ContentBox>
        <div className=""content-header"">
          <h1 className=""col-xs-12 col-md-6"">Campaigns</h1>
          <div className=""col-xs-10 col-md-3 btn btn-utility btn-campaign col-md-offset-3"" onClick={@handleClick}>+ Create a new Campaign</div>
        </div>
        <CampaignList/>
      </ContentBox>
    </div>
)
```
"
,,,https://github.com/facebook/react/issues/4333,4333,renderToString incorrectly supports select's defaultValue,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,2,2015-07-09T23:03:32Z,2015-07-09T23:13:14Z,2015-07-09T23:13:14Z,NONE,completed,,"[Here is code for reproducing:](https://jsfiddle.net/69z2wepo/11806/)

``` js
var Test = React.createClass({
  render: function() {
    return (
      <select defaultValue={this.props.current}>
        {this.props.items.map((i) => (
          <option value={i} key={i}>{i}</option>
        ))}
      </select>
    );
  }
});

var container = document.getElementById('container');
var code = document.getElementById('code');
var test = <Test items={[1, 2, 3]} current={2} />;
var prerender = React.renderToString(test);
code.innerText = prerender.replace(/></g, '>\n<');

container.innerHTML = prerender;
setTimeout(() => {
  React.render(test, container)
}, 1000);
```

So I'm rendering `select` on  the server and got small lag on the client.
"
,,,https://github.com/facebook/react/issues/4497,4497,React.Children.map index is always 0,[],closed,False,,2,2015-07-27T10:57:40Z,2021-06-17T18:04:05Z,2015-07-27T11:08:14Z,NONE,completed,,"React.Children.map(this.props.children, (item, i) => {
      console.log(i)
})

im trying to add event to each child and need the current index when mapping it. how to i get the correct index?

thanks.
"
,,,https://github.com/facebook/react/issues/4350,4350,How re-rendering should be done in efficient way while data change in flux architecture controller?,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,3,2015-07-11T06:21:56Z,2016-02-18T06:40:13Z,2016-02-18T06:40:13Z,NONE,completed,,"I have a controller which consist of many views in it. Only my controller is having state and I pass data to my views through props. Now problem is suppose  my view depends on number of product.
Say we have more than 100 products and each product consist of number of properties related to it. Now each property also have their own property on it. So if I change value of a sub-property then i have to re-render. No We dispatch the change event so it again start re-rendering from controller and it have to process through all the codes like all condition checks, loops etc which is time consuming. So how should we achieve it flux-react architecture? 
"
,,,https://github.com/facebook/react/issues/4430,4430,Component must raise an error if an unknown property is passed,[],closed,False,,16,2015-07-19T22:09:18Z,2015-08-30T14:47:31Z,2015-08-30T14:47:31Z,CONTRIBUTOR,completed,,"Component declaration should contain a whitelist of properties, e.g. it could require that you list the property name under `propTypes` even if it is assigned `null` (that could mean ""any type"", a broader version of `React.PropTypes.node`).

If a property that is not defined in `propTypes` is passed to a component declaration an error must be raised.

This would provide several benefits:
- Would help to catch TYPOs
- Would promote type declaration
- Would prevent orphan properties
## Catching Typos

Suppose a component that generates a different type of input depending on a `type` value. This component has a default `type` value ""text"".

``` js
var Input = React.createClass({
    getDefaultProps: function () {
        return {
            type: 'text'
        }
    },
    render: function () {
        // Different logic defending on the type name.
        // this.props.type === 'text'

        return <div />;
    }
});
```

If `Input` instance declaration is defined with a typo in the `type` property, it would not be an obvious error.

``` jsx
<Input tupe='password' />
```

Raising an error ""Unknown property 'tupe'."" would help to catch the error.
## Promoting Type Declaration

If property names are required to be listed under `propTypes`, it requires little extra effort to define their types.

``` js
var Input = React.createClass({
    propTypes: {
        type: React.PropTypes.string,
        // type: null
    },
    render: function () {
        return <div />;
    }
});
```

Furthermore, we are used to think about _code-length_ in terms of the lines of code. The fact that type declaration at the moment adds extra lines might be discouraging some developers from doing it. This thought is only to boost the importance of the earlier argument.
## Preventing Orphan Properties

This is especially relevant when using spread operator inheritance.

Suppose an instance of a simple (`Input`) component is declared using a spread operator.

``` jsx
<Input {...generalFormProps} name='foo' />
```

, where `generalFormProps` is an object containing many properties of which just some apply to `Input` component. In this scenario, each `Input` instance would have a copy of those property values (dead weight).
"
,,,https://github.com/facebook/react/issues/4361,4361,Getting Started is confused to new starter,[],closed,False,,2,2015-07-13T02:02:17Z,2015-07-13T19:10:16Z,2015-07-13T05:23:25Z,NONE,completed,,"https://facebook.github.io/react/docs/getting-started.html

I followed the step on this page and not working and need to figure out myself.

Should Add some steps about how to start a local server and run the hello world example.

Compared with AngularJS getting started doc, this one is too bad and waste time.
"
,,,https://github.com/facebook/react/issues/4322,4322,React.TestUtils.Simulate.click on React's label element,[],closed,False,,8,2015-07-09T15:20:55Z,2016-04-01T10:37:47Z,2016-04-01T10:37:47Z,NONE,completed,,"Dear all,

I've faced an issue about testing collaboration between label and checkbox elements.
#### Context:

I have a custom checkbox with label:
![image](https://cloud.githubusercontent.com/assets/2273613/8599001/3ca2f6d2-265e-11e5-9e02-6db5ae8d04b6.png)

My goal is to test few behaviors, and one of them is ""Component should fire `onChange` when user click on title"". Title in our case is ""Create link hotspots..."". So in browser everything is fine, but when I started cover it by tests I faced that click emulation on label doesn't lead to change checkbox's value _immediately_, but works if I hack it with `setTimeout(..., 0)`.
#### My testing stack:

```
├── babel@5.6.14
├── chai@3.0.0
├── chai-spies@0.6.0
├── jsdom@0.3.4
├── mocha@2.2.5
├── react@0.13.3
```
#### Question:

Why it happens and do you have any plans to improve this behavior?
"
,,,https://github.com/facebook/react/issues/4302,4302,Add hooks into the warning output for unit tests and other use cases,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":139653724,""node_id"":""MDU6TGFiZWwxMzk2NTM3MjQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities"",""name"":""Component: Core Utilities"",""color"":""c5def5"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,26,2015-07-06T14:43:22Z,2020-01-19T02:48:27Z,2020-01-19T02:48:27Z,CONTRIBUTOR,completed,bvaughn,"I'd like to configure my testsuite to fail if there are any react warnings triggered.

I'm currently using a variant on this SO answer http://stackoverflow.com/questions/29651950/karma-and-react-have-warnings-to-cause-errors

``` js
console.warn = (function(warn) {
  return function(msg) {

    // Detect react warnings & error
    if (/^Warning: /.test(msg)) {
      throw new Error(""React "" + msg);
    }

    return warn.apply(this, arguments);
  };
})(console.warn);
```

This basically works, but has a problem because there's some global-state memoisation in the code which triggers warning to try not to trigger too often:
https://github.com/facebook/react/blob/500d4c3f8779bce7c7dde129eb2fec9e901cf5ae/src/isomorphic/classic/element/ReactElementValidator.js#L46

Could we provide a way to clear this state, or even better a supported API for opt-in erroring on warnings?
"
,,,https://github.com/facebook/react/issues/4498,4498,Unmount all root components from container,[],closed,False,,6,2015-07-27T12:38:25Z,2015-07-30T13:27:13Z,2015-07-29T17:34:02Z,NONE,completed,,"Hi,

I'm using React for certain modules in a mature project which is primarily built around jQuery and server-side rendered HTML. The main routing mechanism loads a particular URL via `$.ajax` and then replaces the HTML of the content container of the page via `$('#content).html(result)`.

When using React components on a page I noticed that I manually have to unmount the root components before leaving the page and loading a new page with `$('#content).html(...)`. In that case the React components are rendered into a `div` deeply nested somewhere in the '#content' container.

Unmounting the root components rendered into the content container manually via `React.unmountComponentAtNode` works as expected. But I'm concerned that developers could forget to unmount their components which could lead to memory leaks and unexpected behavior I guess.

Therefore I would like to unmount all possible root components in a generic way directly from the router. Unfortunately I don't know how to get all the DOM nodes from a particular parent container in a generic way. 

This doesn't work because the components are not rendered directly into the content container but somewhere in the content container hierarchy:

``` js
React.unmountComponentAtNode(document.getElementById(""content""));
```

Is there any way to retrieve all root components for a given DOM element? Selecting all elements with `data-reactid` would not only select the root components but also child components. 

It would be helpful if React would directly support unmounting of a whole container.

Thanks in advance for your help and keep up the good work!

Benjamin
"
,,,https://github.com/facebook/react/issues/4374,4374,Only render node on Client Side.,[],closed,False,,5,2015-07-14T08:39:38Z,2016-02-11T02:57:52Z,2016-02-11T00:51:18Z,NONE,completed,,"We're using isomorphic rendering in our app, however we want some items to not be present if Javascript is disabled. In our render method we're doing the following:

``` javascript
render: function() {
  if(typeof window === 'undefined') {
    return null;
  }
  return <span>Hello World</span>;
}
```

It works as expected, however we get the warning:

`Warning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:`

The way to make this go away is to store the check like this:

``` javascript
componentDidMount: function() {
  this.setState({ isBrowser: typeof window !== 'undefined' });
},
render: function() {
   if(!this.state.isBrowser) {
    return null;
  }
  return <span>Hello World</span>;
}
```

However, it doesn't seem like this is the ""right"" place for this to live, maybe I'm wrong. I could also use `this.isMounted()`, however as this is deprecated, it doesn't make much sense to use it.

Does anyone else have any thoughts on the best way to approach this?
"
,,,https://github.com/facebook/react/issues/4505,4505,"My new macbook arrived, and i have trouble running the test XD",[],closed,False,,3,2015-07-28T06:27:33Z,2015-07-30T01:35:03Z,2015-07-28T18:34:10Z,CONTRIBUTOR,completed,,":beer:

```
➜  react git:(master) grunt test
Running ""jest"" task
running jest (this may take a while)

  == NOTICE: ==
    Node and io.js will be merging. http://bit.ly/1dOjLVK
    On August 1st, 2015, Jest v0.5.x will work only on io.js until the merger is complete
    Legacy v0.4.x for Node 0.10.x will still be available on
    on npm and from the ""0.4.x"" branch on GitHub.

Using Jest CLI v0.4.17
 FAIL  src/addons/__tests__/ReactComponentWithPureRenderMixin-test.js
Error: Worker process exited before responding! exit code: null, exit signal: SIGSEGV
stderr:


A worker process has quit unexpectedly! This is bad news, shutting down now!
>> jest failed
>> Error

Warning: Task ""jest"" failed. Use --force to continue.

Aborted due to warnings.

```
"
,,,https://github.com/facebook/react/issues/4697,4697,How to 'unfold' children ?,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,6,2015-08-24T13:41:21Z,2016-07-04T19:33:37Z,2015-08-24T16:40:14Z,CONTRIBUTOR,completed,,"Hi,

I'm writing a library which uses JSX as an abstract DSL, a bit like `react-router` have `<Router/>` and `<Route />`, or a bit like `react-canvas` have `<Surface />` and others primitives.

**To explain my question, I will take the example of `react-router`:**

An user could define a CustomRoute component that render() to a `<Route>`. 

and use it like this:

```
<Router>
  <CustomRoute>
</Router>
```

AFAIK This won't be detected by the `<Router/>` , because just traversing the props.children is not enough (router will see a `child.type==CustomRoute`, and won't understand it).

**Do you know if this is possible to solve this?**
Basically I want to descent the render() tree, and stop if it is not a user component (== it is a native component like `<div/>`), or if I reach the `<Route />` I'm looking for.
"
,,,https://github.com/facebook/react/issues/4618,4618,Can't update defaultChecked/defaultValue.,"[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null}]",closed,False,,16,2015-08-12T16:42:46Z,2016-05-25T01:28:01Z,2016-05-25T01:28:01Z,NONE,completed,,"When I rerender a component with ""defaultChecked"" or ""defaultValue"" react fails to update the ""value"" and ""checked"" attribute accordingly.

Before you say ""use a controlled input"" I would argue that this is a bug as it basically disallows uncontrolled forms with ""reset"" buttons. (It will always reset to whatever the initial default value was).
"
,,,https://github.com/facebook/react/issues/4742,4742,Can I listen props from parent component ? ,[],closed,False,,3,2015-08-31T10:52:13Z,2015-08-31T15:54:55Z,2015-08-31T15:43:01Z,NONE,completed,,"Hi, I want to listen props from parent component, like this.

My parent component: 

```
// parent component
let ChartBox = React.createClass({
  mixins: [React.addons.LinkedStateMixin],
  getInitialState() {
    return {
      chartStyle: {
      }
    };
  },
  componentDidMount() {
    let chartWidth = this.refs.chartBox.getDOMNode().offsetWidth;
    let chartHeight = this.refs.chartBox.getDOMNode().offsetHeight;
    let chartStyle = {
      'width': chartWidth,
      'height': chartHeight
    };
    this.setState({'chartStyle': chartStyle});
  },
  render() {
    return (
      <div className=""full-box"">
        <div ref=""chartBox"" chartStyle={this.state.chartStyle}>
          <Chart />
        </div>
      </div>
    );
  }
});

```

Then My child component: 

```
// child component
let Chart = React.createClass({
  componentDidMount() {

    ////// Can I listen this.props.chartStyle when parent's props change  like this ????
    //////  I want to get {width:xx, height:xx}  not just empty { }
    console.log(this.props.chartStyle);  
  },
  render() {
    return <div ref=""chart"" style={styles}></div>;
  }
});



```
"
,,,https://github.com/facebook/react/issues/4616,4616,React renders differently on server and client.,[],closed,False,,24,2015-08-12T14:15:44Z,2017-10-03T22:10:03Z,2017-10-03T22:09:45Z,NONE,completed,,"I have read #3152 and #3879 but this seemed like maybe another but related problem.

When the browser tries to bootstrap React and rerender the page I get this warning.

```
Warning: React attempted to reuse markup in a container but the checksum was invalid. 
This generally means that you are using server rendering and the markup generated on 
the server was not what the client was expecting. React injected new markup to compensate 
which works but you have lost many of the benefits of server rendering. Instead, figure 
out why the markup being generated is different on the client or server:
 (client) e6zyboqo.1.2.1.0.1"">&quot;This is a
 (server) e6zyboqo.1.2.1.0.1"">""This is a test
```

Apart from the case that it is unnecessary to escape the quote it seems to render differently on the server  and browser. This is just static content so I don't really understand why?

The markup to render the element is like this.

```
<p><strong>Next:</strong>""This is a test""</p>
```

How come it's rendered different?
"
,,,https://github.com/facebook/react/issues/4570,4570,The <video> tag attribute webkit-playsinline  can't be  parsed ,[],closed,False,,3,2015-08-06T02:51:16Z,2017-05-12T15:21:35Z,2015-08-10T20:09:51Z,NONE,completed,,"The <video> tag attribute webkit-playsinline supposedly prevents the default go to fullscreen behavior of HTML5 videos.

This attribute works in some webview when a flag is set in the native code.
I want  use this attribute to prevent the default behavior  on iphone.
I saw the custome-attributes doccuments, like data-**, aria-**,  and it works like this:
&lt;video data-webkit-inline=""true"" ..../&gt;
but what i need is:
&lt;video webkit-inline  ..../&gt;
"
,,,https://github.com/facebook/react/issues/4646,4646,checkbox 'checked' HTML attribute not set when underlying prop changes,"[{""id"":40929156,""node_id"":""MDU6TGFiZWw0MDkyOTE1Ng=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Wontfix"",""name"":""Resolution: Wontfix"",""color"":""ffffff"",""default"":false,""description"":null}]",closed,False,,5,2015-08-17T21:49:58Z,2016-06-01T20:41:56Z,2015-10-06T03:30:03Z,NONE,completed,,"When rendering a checkbox the `checked` HTML attribute is not being properly set to reflect the `checked` prop of the `<input>` component.

The problem seems to be that the `setValueForProperty` method ([link](https://github.com/facebook/react/blob/v0.13.3/src/browser/ui/dom/DOMPropertyOperations.js#L128)) sets the `checked` property on the DOM node object, but this will not update the `checked` HTML attribute, as seen in this fiddle: https://jsfiddle.net/1qdcdc5b/

The suggestion is instead to use `setAttribute` to set the `checked` property as it will set the underlying node property and the HTML attribute (as seen in the fiddle above).
"
,,,https://github.com/facebook/react/issues/4714,4714,Incorrect handling of prefixed styles,[],closed,False,,4,2015-08-25T23:46:44Z,2015-08-26T00:33:00Z,2015-08-26T00:14:30Z,CONTRIBUTOR,completed,,"When rendering a react DOM element with style, the properties of each style object are treated special - e.g. adding px to most numbers, but not to particular styles such as  `flex`.

However, if provided a prefixed style like `webkitFlex` this blacklist of styles is not used.

It would be pretty awesome if any style prefixed with `webkit` or `moz` or the like are first converted to their non-prefixed kind before doing a lookup in that blacklist.
"
,,,https://github.com/facebook/react/issues/4548,4548,"update checkbox   defaultChecked , it doesn't work",[],closed,False,,5,2015-08-03T03:13:46Z,2017-11-27T16:59:27Z,2015-08-03T03:53:59Z,NONE,completed,,"update checkbox   defaultChecked , it doesn't work
please  see [here](http://jsfiddle.net/majorye/wavpf5qj/)
"
,,,https://github.com/facebook/react/issues/4630,4630,Update WebcomponentsJS to latest version,[],closed,False,,3,2015-08-14T23:16:44Z,2015-08-17T17:57:13Z,2015-08-17T17:57:13Z,CONTRIBUTOR,completed,,"Current used version of webpomponents is 0.5.1 from nov 12, 2014. It's a bit of time, change log is quite long: https://github.com/webcomponents/webcomponentsjs/compare/0.5.1...v0.7.11

I'm posting this as enchancement request, because I cannot now test the bump by myself and prepare PR. Also I'm not sure if it's good idea to push this into react 0.14.
"
,,,https://github.com/facebook/react/issues/4844,4844,Shouldn't componentWillMount be called before getInitialState,[],closed,False,,7,2015-09-10T22:58:53Z,2015-09-15T23:14:01Z,2015-09-15T23:14:01Z,NONE,completed,,"I've noticed this while cleaning up older code in one of my components - I have ""cleaning"" that needs to happen before it loads. Originally placed it within getInitialState which works fine, but really doesn't feel like the right place to put it in.

componentWillMount sounds like the better alternative, but it seems as thought it's called later in the lifecycle (and in fact there's no hook before getInitialState).

I realise this might be a bit of an edge case, but it feels like these two hooks should either be re-ordered or a different hook added?
"
,,,https://github.com/facebook/react/issues/4926,4926,Invalid Checksum - Textarea Redux Form,[],closed,False,,4,2015-09-21T16:40:42Z,2015-12-30T06:00:59Z,2015-12-30T06:00:59Z,NONE,completed,,"Hi guys!
I am having this error. I am quite new to react.

`Warning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:`

`(client) $=12:0.0.0.2.0.0.6"">
</textarea><br data`

`(server) $=12:0.0.0.2.0.0.6""></textarea><br data-`

any helps will be much appreciated.
Thanks :)
"
,,,https://github.com/facebook/react/issues/4902,4902,"Invalid property access when rendering server-side with Babel's ""optimisation.react.inlineElements"" enabled.",[],closed,False,,6,2015-09-17T21:09:31Z,2015-10-14T09:40:39Z,2015-09-17T21:30:29Z,NONE,completed,,"When trying to render a page server-side I get an error like this:

``` javascript
TypeError: Cannot read property 'validated' of undefined
    at validateExplicitKey (~/example.com/react-build/packages/react/lib/ReactElementValidator.js:60:21)
    at validateChildKeys (~/example.com/react-build/packages/react/lib/ReactElementValidator.js:132:9)
    at Object.ReactElementValidator.createElement (~/example.com/react-build/packages/react/lib/ReactElementValidator.js:230:7)
    at Row.render (~/example.com/views/components/bootstrap3/layout/row.jsx:13:24)
    at ReactCompositeComponentMixin._renderValidatedComponentWithoutOwnerOrContext (~/example.com/react-build/packages/react/lib/ReactCompositeComponent.js:587:34)
    at ReactCompositeComponentMixin._renderValidatedComponent (~/example.com/react-build/packages/react/lib/ReactCompositeComponent.js:607:32)
    at wrapper [as _renderValidatedComponent] (~/example.com/react-build/packages/react/lib/ReactPerf.js:66:21)
    at ReactCompositeComponentMixin.mountComponent (~/example.com/react-build/packages/react/lib/ReactCompositeComponent.js:220:30)
    at wrapper [as mountComponent] (~/example.com/react-build/packages/react/lib/ReactPerf.js:66:21)
    at Object.ReactReconciler.mountComponent (~/example.com/react-build/packages/react/lib/ReactReconciler.js:37:35)
    at ReactDOMComponent.ReactMultiChild.Mixin.mountChildren (~/example.com/react-build/packages/react/lib/ReactMultiChild.js:241:44)
    at ReactDOMComponent.Mixin._createContentMarkup (~/example.com/react-build/packages/react/lib/ReactDOMComponent.js:552:32)
    at ReactDOMComponent.Mixin.mountComponent (~/example.com/react-build/packages/react/lib/ReactDOMComponent.js:446:29)
    at Object.ReactReconciler.mountComponent (~/example.com/react-build/packages/react/lib/ReactReconciler.js:37:35)
    at ReactCompositeComponentMixin.mountComponent (~/example.com/react-build/packages/react/lib/ReactCompositeComponent.js:225:34)
    at wrapper [as mountComponent] (~/example.com/react-build/packages/react/lib/ReactPerf.js:66:21)
    at Object.ReactReconciler.mountComponent (~/example.com/react-build/packages/react/lib/ReactReconciler.js:37:35)
    at ReactDOMComponent.ReactMultiChild.Mixin.mountChildren (~/example.com/react-build/packages/react/lib/ReactMultiChild.js:241:44)
    at ReactDOMComponent.Mixin._createContentMarkup (~/example.com/react-build/packages/react/lib/ReactDOMComponent.js:552:32)
    at ReactDOMComponent.Mixin.mountComponent (~/example.com/react-build/packages/react/lib/ReactDOMComponent.js:446:29)
    at Object.ReactReconciler.mountComponent (~/example.com/react-build/packages/react/lib/ReactReconciler.js:37:35)
    at ReactCompositeComponentMixin.mountComponent (~/example.com/react-build/packages/react/lib/ReactCompositeComponent.js:225:34)
```

When using the Babel (5.8.24) transformer `optimisation.react.inlineElements`, after manually fixing https://github.com/babel/babel/issues/2377

However, when using the same transformer on my client code it runs just fine in the browser for even my most complex components/pages. 

Here is a complete list of my Babel options (for the server):

``` javascript
{
    filename:     filename,
    blacklist:    [
        'es3.memberExpressionLiterals',
        'es3.propertyLiterals',
        'es6.forOf',
        'es6.properties.shorthand',
        'es6.templateLiterals'
    ],
    optional:     [
        'strict',
        'runtime',
        'spec.undefinedToVoid',
        'validation.react',
        'minification.constantFolding',
        'minification.propertyLiterals',
        'utility.inlineEnvironmentVariables',
        'es7.exportExtensions',
        'es7.classProperties', //For React static properties
        'optimisation.react.inlineElements',
        'optimisation.react.constantElements',
        'es7.decorators'
    ],
    ast:          false,
    sourceMaps:   false,
    nonStandard:  true, //JSX and Flow
    compact:      false,
    comments:     false,
    retainLines:  true,
    modules:      ""amd"",
    loose:        ""all"",
    experimental: true
} 
```

which might help track it down. The fact it worked in the browser leads me to believe it is not a Babel issue, though.

Currently I'm using a build of React from the master branch as of about thirty minutes ago.
"
,,,https://github.com/facebook/react/issues/4969,4969,Release 1.0.0 version - update semver,[],closed,False,,1,2015-09-25T12:46:41Z,2015-09-25T17:12:07Z,2015-09-25T17:12:07Z,NONE,completed,,"React is now proven and stable technology, with an amazing and thriving community around it. I think you should update semver to `1.0.0`
"
,,,https://github.com/facebook/react/issues/4840,4840,createFragment warning when rendering a Date,[],closed,False,"{""url"":""https://api.github.com/repos/facebook/react/milestones/13"",""html_url"":""https://github.com/facebook/react/milestone/13"",""labels_url"":""https://api.github.com/repos/facebook/react/milestones/13/labels"",""id"":1035426,""node_id"":""MDk6TWlsZXN0b25lMTAzNTQyNg=="",""number"":13,""title"":""0.14"",""description"":null,""creator"":{""login"":""sophiebits"",""id"":6820,""node_id"":""MDQ6VXNlcjY4MjA="",""avatar_url"":""https://avatars.githubusercontent.com/u/6820?v=4"",""gravatar_id"":"""",""url"":""https://api.github.com/users/sophiebits"",""html_url"":""https://github.com/sophiebits"",""followers_url"":""https://api.github.com/users/sophiebits/followers"",""following_url"":""https://api.github.com/users/sophiebits/following{/other_user}"",""gists_url"":""https://api.github.com/users/sophiebits/gists{/gist_id}"",""starred_url"":""https://api.github.com/users/sophiebits/starred{/owner}{/repo}"",""subscriptions_url"":""https://api.github.com/users/sophiebits/subscriptions"",""organizations_url"":""https://api.github.com/users/sophiebits/orgs"",""repos_url"":""https://api.github.com/users/sophiebits/repos"",""events_url"":""https://api.github.com/users/sophiebits/events{/privacy}"",""received_events_url"":""https://api.github.com/users/sophiebits/received_events"",""type"":""User"",""site_admin"":false},""open_issues"":0,""closed_issues"":74,""state"":""closed"",""created_at"":""2015-03-23T23:33:55Z"",""updated_at"":""2015-10-09T17:52:30Z"",""due_on"":null,""closed_at"":""2015-10-08T00:19:55Z""}",8,2015-09-10T20:58:09Z,2015-10-14T08:18:03Z,2015-09-23T19:17:35Z,CONTRIBUTOR,completed,,"```
<p>{new Date()}</p>
```

Looks to be hitting the typeof object check.

Not sure if it should cast to string or toISOString or just error.
"
,,,https://github.com/facebook/react/issues/4936,4936,Refs don't work on Stateless Components,[],closed,False,,36,2015-09-22T13:43:18Z,2018-10-24T20:04:00Z,2016-08-09T18:07:37Z,CONTRIBUTOR,completed,,"I realize to some extent this is an intended behavior? Stateless components having no public instance, but I couldn't find much in way of conversation around why this behavior was chosen.

As of right now there is no good way for a parent component to even know if a ref is going to work on a component. What is the rational behind not allowing DOM access to a stateless component? It seems like if there is no instance to expose, the proper behavior would be to return the DOM node (or whatever the underlying thing is) directly like DOM components do now.

The current behavior is surprising and seems inverted. A component is never going to reasonably be able to know if a parent needs access to its DOM node. And a Parent has no way of knowing which components are stateless (and why should it?) to know to wrap it. Right now we need to wait until something silently doesn't work. At the very least a stateless component with a ref should throw, though that would be a last resort concession in my mind.
"
,,,https://github.com/facebook/react/issues/4872,4872,npm install --save react-dom installs 0.1.0,[],closed,False,,1,2015-09-15T00:21:08Z,2015-09-17T01:06:48Z,2015-09-17T01:06:47Z,NONE,completed,,"I think this will be resolved once 0.14 is out of rc, but in the meantime can be confusing since the readme says `npm install react react-dom`
"
,,,https://github.com/facebook/react/issues/4999,4999,findComponentRoot(): Unable to find element error thrown from ReactDOM.findDOMNode called from componentWillMount on new renders,"[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null}]",closed,False,,17,2015-09-29T06:42:52Z,2016-03-25T01:59:55Z,2016-03-25T01:59:55Z,CONTRIBUTOR,completed,,"I recently ran into this error after updating to 0.14.0-beta3 from alpha3.

```
Uncaught Error: Invariant Violation: findComponentRoot(..., .j0tmgd5jpc.2.$main.0.0.1): Unable to find element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent. Try inspecting the child nodes of the element with React ID ``.
```

After a pile of hunting, thinking it might be related to some other changes I made (I didn't test this component right after the update and made some other major changes), and even discarding a `ReusableBlockMixin` experiment I thought was at fault. I finally realized that this error was called from a `ReactDOM.findDOMNode` call which was made inside `componentWillMount`.

This was valid in 0.13 and the alphas of 0.14 and the change wasn't documented.

Some more context to this error message would be appreciated. The current wording can mislead developers into looking for bugs into all the wrong places. Since calling `findDOMNode` has nothing do do with mutating of the dom. It's because of changes to when the DOM is setup.
"
,,,https://github.com/facebook/react/issues/4812,4812,Chrome and FF performs code for old IE,[],closed,False,,2,2015-09-08T18:09:27Z,2015-09-09T07:46:06Z,2015-09-08T22:19:46Z,NONE,completed,,"Hi,
customer has reported some bugs with react and we found problem but we dont know why it happened. Must say, these bugs was appear only on some pc. We had to go into customers office and try it on their machines. On ours machines all work fine.

Following code in react.js 

```
      isInputEventSupported = isEventSupported('input') && (
                  (!('documentMode' in document) || document.documentMode > 9)
      );
```

set isInputEventSupported variable to FALSE in Chrome and Firefox.

We had to fix it temporarily here

```
            if (isInputEventSupported || 1)
                getTargetIDFunc = getTargetIDForInputEvent;
            } else {
                getTargetIDFunc = getTargetIDForInputEventIE;
                handleEventFunc = handleEventsForInputEventIE;
            }
```

then all work allright.

But we really dont know why in newest Chrome (v. 45.0.2454.85) is performed code for old IE.

 Can be something wrong with the condition above depending on new Chrome/FF?
"
,,,https://github.com/facebook/react/issues/4917,4917,Support es6 symbols in proptype,"[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null}]",closed,False,,13,2015-09-20T10:23:40Z,2016-05-17T22:33:04Z,2016-05-17T22:33:04Z,NONE,completed,,"Would you be open to support es6 symbols in proptype?

At the moment I'm testing them as `typeof Symbol() === 'symbol'` in custom proptype functions.
"
,,,https://github.com/facebook/react/issues/4930,4930,Controlled Radio Button Component Does not Update,"[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,8,2015-09-22T00:16:25Z,2016-08-03T00:47:44Z,2015-09-22T20:44:30Z,NONE,completed,,"We are running across an issue in one of our components used for showing a group of radio buttons. The radio button elements are controlled (using checked and not defaultChecked) and they use a callback prop to change the state in a parent component which determines which one is selected.

When you first click a radio button, it works.

The second and any subsequent clicks do not update the radio button to show as checked.

Here is our example code that exhibits the issue.

http://jsbin.com/royolo/edit?js,console,output

I thought it might be related to the key of each element but we are using the radio button value as key on the element which _is_ unique.

Any help is appreciated.
"
,,,https://github.com/facebook/react/issues/4794,4794,PropTypes outside of React. Independent type checks module,[],closed,False,,10,2015-09-04T16:47:33Z,2017-02-18T23:11:11Z,2015-09-23T18:14:20Z,MEMBER,completed,,"using react PropTypes is awesome, and can help catching errors at the early stage,
but sometimes, when the application is pretty large, there is always a flow of data
structures of a big size. Like in the web email client application, there can be a `Message`
type that is passed all over the place, and multiple components can accept it in props.

so the solution to that is usually creating a type file. e.g.

``` js
// types/message.js

import React from 'react';

export default React.PropTypes.shape({
    id: React.PropTypes.string.isRequired,
    subject: React.PropTypes.string
}).isRequired;

```

and then reusing this type in components that get messages in props

``` js

import messageType from './types/message';

MessagePreview.PropTypes = {
  message: messageType
}
```

but sometimes this data flows in some other than components elements. for example flux stores, or action creators. And that usually requires duplication of types (using immutable.js records or similar)

That would we really nice if we could use this type checks in other parts of the application.

for example

``` js
// stores/message.js

import messageType from './types/message';
import checkTypes from 'react/check-types';

/**
 * @param {Array<Object>} payload.messages the array of message objects received from the API
 */
onDataReceived = (payload) => {
  payload.messages.forEach((message) => {
    checkTypes(message, messageType);
    addToStore(message);
  });
}
```

will this be any good? I guess architectually it means making propTypes.js more independent, and creating an adapter for prop/context validating
"
,,,https://github.com/facebook/react/issues/4782,4782,ResponsiveGridLayout reset doesn't do anything,[],closed,False,,1,2015-09-03T21:08:11Z,2015-09-03T21:09:46Z,2015-09-03T21:09:46Z,NONE,completed,,"the layout doesn't get reset:
https://strml.github.io/react-grid-layout/examples/8-localstorage-responsive.html
"
,,,https://github.com/facebook/react/issues/4962,4962,why not to reuse `ReactElement`. ,[],closed,False,,1,2015-09-24T15:55:22Z,2015-09-25T00:13:37Z,2015-09-25T00:13:37Z,NONE,completed,,"Look the code below. I want to reuse  `indexElement`, but `constructor` invoked every time  , which means it was totally new `Element`. Could some one explain this behaviour? thanks.

```
import  React from 'react'

class IndexComponent extends React.Component{
    constructor(props,context){
        super(props,context)
        console.log('constructor should be called only once') // !!! be called many times
    }

    render(){
        return(
            <div>
                <div>Index</div>
                <div><a href='#/detail'>to Detail</a></div>
            </div>
        )
    }
}

class DetailComponent extends React.Component{
    render(){
        return(
            <div>
                <div>Detail</div>
                <div><a href='#/'>back to Index</a></div>
            </div>
        )
    }
}

let indexElement =<IndexComponent/>

let detailElement= <DetailComponent/>

let i = 0;

let App = React.createClass({

    componentDidMount(){

      setInterval(()=>{
          i+=1;
          this.setState({
              a:i
          })
      },1000)
    },


    render: function() {
        if(i%2==0){
            return indexElement;
        }else{
            return detailElement;
        }
    }

});
React.render((
        <App/>
    ), document.getElementById('mount-dom')
)
```
"
,,,https://github.com/facebook/react/issues/5251,5251,Issue with extended Array<T> as Component.props,[],closed,False,,3,2015-10-23T02:51:37Z,2015-10-23T18:53:22Z,2015-10-23T04:24:36Z,NONE,completed,,"In component ctor this.props.groupBy function is undefinded. This behavior is correct ?
This is not a problem actually, but it is very strange for me )

![editor](https://cloud.githubusercontent.com/assets/1548409/10683236/6310a3e0-7948-11e5-9824-17f5795ecf99.png)

![console](https://cloud.githubusercontent.com/assets/1548409/10683239/696573ec-7948-11e5-81c1-5639a3731f8d.png)
"
,,,https://github.com/facebook/react/issues/5069,5069,Error during synthetic event dispatch,[],closed,False,,5,2015-10-07T13:10:01Z,2015-10-07T19:59:09Z,2015-10-07T19:59:09Z,NONE,completed,,"<img width=""462"" alt=""screen shot 2015-10-07 at 6 39 02 pm"" src=""https://cloud.githubusercontent.com/assets/21678/10338257/bf1efaf6-6d22-11e5-8482-3dff8c8f4baf.png"">
"
,,,https://github.com/facebook/react/issues/5238,5238,Bugs with document.createElement rendering,[],closed,False,,3,2015-10-21T22:50:33Z,2016-02-03T22:56:18Z,2016-02-03T22:52:33Z,COLLABORATOR,completed,,"- setting type on textarea shouldn't throw
- setting dir={null} on div shouldn't add attribute
- setting dir=""auto"" on textarea throws in IE11
"
,,,https://github.com/facebook/react/issues/5249,5249,Reuse component issue: how to deal with if the api json string is different between multiple files.,[],closed,False,,1,2015-10-23T02:20:39Z,2015-10-23T02:23:50Z,2015-10-23T02:23:50Z,NONE,completed,,"here is the issue: I have a reuse List component, and using json api to load the data, what if the string is different in multiple files?

for example:
json1:

```
[
    {
        ""post_title"": ""title 1"",
        ""post_excerpt"": ""excerpt 1""
    }
]
```

json2:

```
[
    {
        ""article_title"": ""title 2"",
        ""article_excerpt"": ""excerpt 2""
    }
]
```

my reactjs code:

```
import React from 'react';
import ReactDOM from 'react-dom';

export default class List extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            data: [],
            title: '',
            paragraph: ''
        }
    }
    componentDidMount() {
        $.getJSON(this.props.source, function(data) {
            var collection = data;
            this.setState({
                data: collection
            })
        }.bind(this))
    }
    render() {
        var results = this.state.data || [];
        return (
            <div>
                {
                    results.map(function(result) {
                        return (
                            <div key={result.id}>
                                <h2>{result.post_title}</h2>
                                <p>{result.post_excerpt}</p>
                            </div>
                        )
                    })
                }
            </div>
        )
    }
}

ReactDOM.render(<List source='http://m.xxx.com/api/get_news'/>, document.getElementById('list'));
```

plz advise! thx!!
"
,,,https://github.com/facebook/react/issues/5112,5112,14.0.0 injectIDOperations of undefined,[],closed,False,,1,2015-10-09T20:18:44Z,2015-10-09T20:22:22Z,2015-10-09T20:22:22Z,NONE,completed,,"I just upgraded to 14.0.0 today and I'm receiving the error

```
Uncaught TypeError: Cannot read property 'injectIDOperations' of undefined
```

I'm using browserify and this is what my code looks like.

```
const React = require('react')
const ReactDOM= require('react-dom')
```
"
,,,https://github.com/facebook/react/issues/5162,5162,ReactCSSTransitionGroup unexpected behavior with 0 values,[],closed,False,"{""url"":""https://api.github.com/repos/facebook/react/milestones/16"",""html_url"":""https://github.com/facebook/react/milestone/16"",""labels_url"":""https://api.github.com/repos/facebook/react/milestones/16/labels"",""id"":1343698,""node_id"":""MDk6TWlsZXN0b25lMTM0MzY5OA=="",""number"":16,""title"":""0.14.1"",""description"":"""",""creator"":{""login"":""sophiebits"",""id"":6820,""node_id"":""MDQ6VXNlcjY4MjA="",""avatar_url"":""https://avatars.githubusercontent.com/u/6820?v=4"",""gravatar_id"":"""",""url"":""https://api.github.com/users/sophiebits"",""html_url"":""https://github.com/sophiebits"",""followers_url"":""https://api.github.com/users/sophiebits/followers"",""following_url"":""https://api.github.com/users/sophiebits/following{/other_user}"",""gists_url"":""https://api.github.com/users/sophiebits/gists{/gist_id}"",""starred_url"":""https://api.github.com/users/sophiebits/starred{/owner}{/repo}"",""subscriptions_url"":""https://api.github.com/users/sophiebits/subscriptions"",""organizations_url"":""https://api.github.com/users/sophiebits/orgs"",""repos_url"":""https://api.github.com/users/sophiebits/repos"",""events_url"":""https://api.github.com/users/sophiebits/events{/privacy}"",""received_events_url"":""https://api.github.com/users/sophiebits/received_events"",""type"":""User"",""site_admin"":false},""open_issues"":0,""closed_issues"":17,""state"":""closed"",""created_at"":""2015-10-08T00:19:48Z"",""updated_at"":""2015-10-28T22:05:01Z"",""due_on"":null,""closed_at"":""2015-10-28T22:05:01Z""}",0,2015-10-13T20:57:44Z,2015-10-13T21:54:21Z,2015-10-13T21:54:21Z,NONE,completed,,"https://github.com/facebook/react/blob/a87c8555fa4bf7169a868f6d8eca322d7a532112/src/addons/transitions/ReactCSSTransitionGroup.js#L22

``` javascript
function createTransitionTimeoutPropValidator(transitionType) {
  var timeoutPropName = 'transition' + transitionType + 'Timeout';
  var enabledPropName = 'transition' + transitionType;

  return function(props) {
    // If the transition is enabled
    if (props[enabledPropName]) {
      // If no timeout duration is provided
      if (!props[timeoutPropName]) {
        return new Error(
          timeoutPropName + ' wasn\'t supplied to ReactCSSTransitionGroup: ' +
          'this can cause unreliable animations and won\'t be supported in ' +
          'a future version of React. See ' +
          'https://fb.me/react-animation-transition-group-timeout for more ' +
          'information.'
        );

      // If the duration isn't a number
      } else if (typeof props[timeoutPropName] !== 'number') {
        return new Error(timeoutPropName + ' must be a number (in milliseconds)');
      }
    }
  };
}
```

Returning an error saying that the value was not supplied because the value supplied was `0`.
It checks if the type was not a number in the `else if` but it's too late to catch that then because the `if (!0)` already succeded.

Something like this would be better:

``` javascript
function createTransitionTimeoutPropValidator(transitionType) {
  var timeoutPropName = 'transition' + transitionType + 'Timeout';
  var enabledPropName = 'transition' + transitionType;

  return function(props) {
    // If the transition is enabled
    if (props[enabledPropName]) {
      // If no timeout duration is provided
      if (props[timeoutPropName] === undefined) {
        return new Error(
          timeoutPropName + ' wasn\'t supplied to ReactCSSTransitionGroup: ' +
          'this can cause unreliable animations and won\'t be supported in ' +
          'a future version of React. See ' +
          'https://fb.me/react-animation-transition-group-timeout for more ' +
          'information.'
        );
      } else if (typeof props[timeoutPropName] !== 'number') {
        return new Error(timeoutPropName + ' must be a number (in milliseconds)');
      }
    }
  };
}
```
"
,,,https://github.com/facebook/react/issues/5337,5337,"Support ""invalid"" event","[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null}]",closed,False,,2,2015-10-30T11:50:23Z,2015-10-30T19:09:20Z,2015-10-30T19:09:20Z,CONTRIBUTOR,completed,,"Hi, just wondering if the [invalid](https://developer.mozilla.org/en-US/docs/Web/Events/invalid) event is currently supported?

I tried using something like:

``` javascript
handleInvalid(event) { ... }

<input type=""text"" onInvalid={this.handleInvalid} />
```

But it doesn't work. I have to manually attach the event handler to the actual DOM node in order to get it working. 

So, is the _invalid_ event actually supported? 

If not, any plans on supporting it?
"
,,,https://github.com/facebook/react/issues/5053,5053,componentWasMounted/componentWasUpdated (formerly componentDidDisplay),"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":739777675,""node_id"":""MDU6TGFiZWw3Mzk3Nzc2NzU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API"",""name"":""Component: Component API"",""color"":""d4c5f9"",""default"":false,""description"":null},{""id"":1775958285,""node_id"":""MDU6TGFiZWwxNzc1OTU4Mjg1"",""url"":""https://api.github.com/repos/facebook/react/labels/React%20Core%20Team"",""name"":""React Core Team"",""color"":""9149d1"",""default"":false,""description"":""Opened by a member of the React Core Team""}]",closed,False,,23,2015-10-05T17:56:33Z,2021-03-24T17:21:10Z,2021-03-24T17:21:10Z,COLLABORATOR,completed,,"Proposal: New life-cycle that fires after `componentDidMount` and after the event-loop has returned but before any other reconciliation has started.

Effectively, this give you a `componentDidMount` that doesn't block the visual output. It could be a good place to set up timers, subscriptions etc.
"
,,,https://github.com/facebook/react/issues/5153,5153,JSX listeners broken in React 0.14 for Android LTE 4.3 with NODE_ENV='development',[],closed,False,"{""url"":""https://api.github.com/repos/facebook/react/milestones/16"",""html_url"":""https://github.com/facebook/react/milestone/16"",""labels_url"":""https://api.github.com/repos/facebook/react/milestones/16/labels"",""id"":1343698,""node_id"":""MDk6TWlsZXN0b25lMTM0MzY5OA=="",""number"":16,""title"":""0.14.1"",""description"":"""",""creator"":{""login"":""sophiebits"",""id"":6820,""node_id"":""MDQ6VXNlcjY4MjA="",""avatar_url"":""https://avatars.githubusercontent.com/u/6820?v=4"",""gravatar_id"":"""",""url"":""https://api.github.com/users/sophiebits"",""html_url"":""https://github.com/sophiebits"",""followers_url"":""https://api.github.com/users/sophiebits/followers"",""following_url"":""https://api.github.com/users/sophiebits/following{/other_user}"",""gists_url"":""https://api.github.com/users/sophiebits/gists{/gist_id}"",""starred_url"":""https://api.github.com/users/sophiebits/starred{/owner}{/repo}"",""subscriptions_url"":""https://api.github.com/users/sophiebits/subscriptions"",""organizations_url"":""https://api.github.com/users/sophiebits/orgs"",""repos_url"":""https://api.github.com/users/sophiebits/repos"",""events_url"":""https://api.github.com/users/sophiebits/events{/privacy}"",""received_events_url"":""https://api.github.com/users/sophiebits/received_events"",""type"":""User"",""site_admin"":false},""open_issues"":0,""closed_issues"":17,""state"":""closed"",""created_at"":""2015-10-08T00:19:48Z"",""updated_at"":""2015-10-28T22:05:01Z"",""due_on"":null,""closed_at"":""2015-10-28T22:05:01Z""}",2,2015-10-13T08:08:39Z,2015-10-13T18:40:35Z,2015-10-13T18:40:35Z,NONE,completed,,"I'm still quite new to React, but I guess this is a bug in the React framework introduced in 0.14. Seems like all listeners attached with JSX are broken in native Android browser for Android LTE 4.3, when compiling code with NODE_ENV development. Everything works fine with NODE_ENV production compilation.

I've tracked it down to being related to ReactErrorUtils, that in development mode do guards on events. The source code:
https://github.com/facebook/react/blob/0.14-stable/src/shared/utils/ReactErrorUtils.js#L58-L74

If I simply remove that part of code after compiling the React app, the listeners starts working again. I guess this is not intentional, but instead a bug?

To reproduce problem in Android LTE 4.3 (code that works in e.g. Chrome Browser):
- Using the pre-compiled Getting Started lib https://facebook.github.io/react/downloads/react-0.14.0.zip:

```
<!DOCTYPE html>
<html>
  <head>
    <meta charset=""UTF-8"" />
    <title>Hello React!</title>
    <script src=""build/react.js""></script>
    <script src=""build/react-dom.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js""></script>
  </head>
  <body>
    <div id=""example""></div>
    <script type=""text/babel"">
      console.log('Script init');
      var testClick = function (e) {
        e.preventDefault();
        console.log('test click!');
      };

      ReactDOM.render(
        <div>
          <a href=""#"" onClick={testClick}>JSX onClick!</a><br />
          <a href=""#"" id=""manual-attach"">Manually attached onClick</a>
        </div>,
        document.getElementById('example')
      );

      document.getElementById('manual-attach').addEventListener('click', function (e) {
        e.preventDefault();
        console.log('test manual click attach!');
      })
    </script>
  </body>
</html>
```
"
,,,https://github.com/facebook/react/issues/5183,5183,React/Jest Mocking issue with keymirror,[],closed,False,,15,2015-10-15T14:50:38Z,2016-03-06T20:14:55Z,2016-02-22T02:17:14Z,CONTRIBUTOR,completed,,"I've ran into an issue with 0.14 when testing with jest & npm 3. Ultimately I've realized that since npm 3 installs everything as siblings, packages that react depends on will still get automatically mocked and therefore break.

My example was an error like this:

```
● Runtime Error
TypeError: /Users/blaine.kasten/Sites/videochrome/src/ProgressBar/ProgressBarBackground/__tests__/ProgressBarBackground--tests.js: /Users/blaine.kasten/Sites/videochrome/node_modules/react/react.js: /Users/blaine.kasten/Sites/videochrome/node_modules/react/lib/React.js: /Users/blaine.kasten/Sites/videochrome/node_modules/react/lib/ReactDOM.js: /Users/blaine.kasten/Sites/videochrome/node_modules/react/lib/ReactDefaultInjection.js: /Users/blaine.kasten/Sites/videochrome/node_modules/react/lib/BeforeInputEventPlugin.js: Cannot read property 'topCompositionEnd' of undefined
```

Looking into it, in the `lib/BeforeInputEventPlugin.js` file, it referenced `./EventConstants`, in that file it was using `fbjs/lib/keymirror` to create it's EventConstants. Since that was being mocked, the return from `./EventConstants.js` was undefined. Thus causing an error.

This might be part of a bigger problem with jest and supporting npm3. I'm not sure if this issue should live in their repo. Or more immediately react could not depend on fbjs and just use it's own keymirror implementation.
"
,,,https://github.com/facebook/react/issues/5086,5086,dynamic styles not working...,[],closed,False,,2,2015-10-08T10:03:02Z,2015-10-09T10:11:35Z,2015-10-09T10:11:35Z,NONE,completed,,"For some reason dynamic part of my component does not get updated in DOM.
I have the following component:

```
@Radium
@formsyElement()
class Input extends React.Component {
  static propTypes = { ... }
  constructor() {
    super();
  }
  state = {
    focus: false,
  }
  onChange(e) {
    e.preventDefault();
    const value = e.target.value;
    if (value === '') {
      this.props.resetValue();
    } else {
      this.props.setValue(value);
    }
  }
  getInputStyle() {
    const inputStyle = this.getBoxShadow();
    if (this.props.style) {
      const passedStyle = this.props.style.input;
      if (passedStyle) {
        _.merge(inputStyle, passedStyle);
      }
    }
    return inputStyle;
  }
  getErrorStyle() {
    const errorStyle = {
      color: 'red',
    };
    if (this.props.style) {
      const passedStyle = this.props.style.error;
      if (passedStyle) {
        _.merge(errorStyle, passedStyle);
      }
    }
    return errorStyle;
  }
  getBoxShadow() {
    if (!this.props.isPristine() && !this.props.isValid()) {
      return { boxShadow: '(inset 0 0 10px 0 red)' };
    }
    if (this.props.isValid() && !this.props.isPristine()) {
      return { boxShadow: '(inset 0 0 10px 0 green)' };
    }
    return {};
  }
  render() {
    return (
      <div>
        {!this.props.isValid() && !this.state.focus && (
          <span style={this.getErrorStyle()}>
            {this.props.getErrorMessage()}
          </span>
        )}
        <input
          style={this.getInputStyle()}
          type={this.props.type}
          placeholder={this.props.placeholder}
          onChange={this.onChange.bind(this)}
          onFocus={() => this.setState({ focus: true })}
          onBlur={() => this.setState({ focus: false })}
          value={this.props.getValue()}
        />
      </div>
    );
  }
}
```

The error span does get proper styling, but input tag does not.
I know that getInputStyle() does return necessary boxShadow, however in DOM's input element style attribute does not appear when some event happens.
"
,,,https://github.com/facebook/react/issues/5070,5070,Order is not guaranteed in React.createFragment,[],closed,False,,2,2015-10-07T14:36:59Z,2015-10-07T14:56:39Z,2015-10-07T14:56:39Z,NONE,completed,,"According to the React docs [1] there seems to be an assumption that maps in Javascript guarantee the order of the keys which AFAIK is not true. See this Stackoverflow question [2]

``` javascript
if (this.props.swapped) {
  children = React.addons.createFragment({
    right: this.props.rightChildren,
    left: this.props.leftChildren
  });
} else {
  children = React.addons.createFragment({
    left: this.props.leftChildren,
    right: this.props.rightChildren
  });
}
```

[1] https://facebook.github.io/react/docs/create-fragment.html
[2] http://stackoverflow.com/questions/5525795/does-javascript-guarantee-object-property-order

Could this lead to cross-browser issues with CreateFragment?
"
,,,https://github.com/facebook/react/issues/5340,5340,Is it ok to not using Flux?,[],closed,False,,3,2015-10-30T18:28:16Z,2015-10-30T18:53:13Z,2015-10-30T18:34:20Z,NONE,completed,,"Hi everybody, 

I'm just started learning React recently, and often found myself lost in the limbo when reading about Flux. 
I know it's just the concept about the application architecture to develop website with React.
But I have an idea that use routing with Express and use React for rendering the view only.
Is it a good solution? And should I abandon Flux? 
Is there any reason why we should use Flux?

Thanks,
Huy
"
,,,https://github.com/facebook/react/issues/5169,5169,Support `kind` and `srclang` attributes in react-dom,"[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,0,2015-10-14T08:15:35Z,2015-10-14T21:35:03Z,2015-10-14T21:35:03Z,NONE,completed,,"These two properties are required for showing subtitles in video element (https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track) but currently doesn't support in react attributes. (for subtitle kind is not required but better to add it too for different type of track.)

Can these two add to the supported list so don't need to use `dangerouslySetInnerHTML` when render tracks.
"
,,,https://github.com/facebook/react/issues/5042,5042,ES6 onScroll never fires,[],closed,True,,20,2015-10-02T19:31:26Z,2020-08-21T10:14:09Z,2015-10-02T19:52:48Z,NONE,completed,,"I've been trying this out and I can't seem to get it working. 

``` javascript
export default class MyPage extends React.Component {
    render () { 
       return <div className='page-wrapper'
          onWheel={(e)=>console.log('WHEEL!!',e)}
          onScroll={(e)=>console.log('SCROLL!!',e)}>
          {... my page content ...}
        </div>;
    }
}
```

the onWheel fires normally, but the onScroll is not firing. I dunno if I'm missing something or this is a bug.  

Thanks!
"
,,,https://github.com/facebook/react/issues/5177,5177,"""TypeError: Cannot read property 'toUpperCase' of undefined"" in some case instead of ""___ component not defined""",[],closed,False,,1,2015-10-15T00:23:19Z,2015-10-15T00:37:29Z,2015-10-15T00:37:29Z,NONE,completed,,"this happens in meteor, however I'm almost positive I did not have 2 versions of react (not sure how I could check that)

<img width=""1247"" alt=""screenshot 2015-10-14 20 15 15"" src=""https://cloud.githubusercontent.com/assets/377000/10501609/5fd7e118-72b1-11e5-8abb-6716982f7ed1.png"">
"
,,,https://github.com/facebook/react/issues/5553,5553,Extract addons for real or remove warning,[],closed,False,,4,2015-11-26T16:18:18Z,2016-01-12T09:04:52Z,2016-01-12T06:37:05Z,NONE,completed,,"When upgrading to react 0.14 there comes a warning among others that says that addons should not be requires through `react/addons', they should instead be required from their own package. First, I would like to point out that I think it is a very good change to put the addons in their separate packages. However I have also noticed that the addons are in fact _not really_ put in their separate packages but they just link to the implementation still existing within the react package. 

This brings some trouble to our build. If we browserify an addon (currently only using transition group) that bundle will include all of react. This causes an error when running our app. An alternative for us is to import `react/addons`. This gets rid of the error but leaves us with red warnings. I do consider this a non option as I think it is important to leave the number of warnings/errors to 0. 

As mentioned I do think it is a step in the right direction to extract the addons but I also think it is wrong to require the user to update the import before the change is actually made. Could this be reconsidered?
"
,,,https://github.com/facebook/react/issues/5461,5461,Please add source url to react-addons npm packages,[],closed,False,,3,2015-11-12T21:56:06Z,2015-11-12T22:33:45Z,2015-11-12T22:13:24Z,NONE,completed,,"Please add https://docs.npmjs.com/files/package.json#repository repository property to the React addons, like react-addons-perf. It is required to import them as jars, at webjars.org.
"
,,,https://github.com/facebook/react/issues/5400,5400,Client side usage of `react-dom/server` API,[],closed,False,,2,2015-11-05T11:23:25Z,2015-11-05T13:59:39Z,2015-11-05T13:59:39Z,NONE,completed,,"Hi,

I am in the process of migrating our codebase to React 0.14.x. During this I encountered a problem, because of the fact that our client side uses `React.renderToStaticMarkup` to render React components and passing the results around as strings (I know, not ideal, but given what our codebase was previously, this is sadly needed for us in some cases).

However, given my understanding of the structural changes with `react` and `react-dom` packages, as I can tell, I am not supposed to simply call `React.renderToStaticMarkup` any more, and the API is not accessible from the `react-dom` package. I do not use webpack (yet!), so at the moment using `react-dom/server` is not appropriate for me.

What is the supported way (if any?) of calling `React.renderToStaticMarkup` in the browser, using the pre-built packages?
"
,,,https://github.com/facebook/react/issues/5407,5407,Internet Explorer 9 and ES6 import syntax returns Invalid Component,[],closed,False,,2,2015-11-06T01:41:39Z,2015-11-06T02:40:44Z,2015-11-06T02:40:12Z,NONE,completed,,"Hey,

Just broke a keyboard or two on this bug: 

It seems that using Babel and the ES6 syntax, if i declare my app this way:

``` js
import { Component } from 'react';

class App extends Component {
  render(){
    return(<div>APP HERE</div>);
  }
}
```

_IE 9 throws_ : `Invariant Violation: App.render(): A valid ReactComponent must be returned. You may have returned undefined, array, or some other invalid object.`

Whereas if i do 

``` js
import React, { Component } from 'react';
```

instead of the previous 

``` js
import { Component } from 'react';
```

It works.

USING:

```
React v0.14.2
ReactDOM v0.14.2
```

React is loaded on the page as and shimmed in browserify (could that come from there as well ? )

``` json
  ""browserify-shim"": {
    ""jquery"": ""global:$"",
    ""react"": ""global:React""
  }
```

Is this a know bug/feature ? This is causing a world of pain inside my App as it is a pretty big app with a lot of components and higher order components.

Thanks
"
,,,https://github.com/facebook/react/issues/5558,5558,Singleton React Component,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,5,2015-11-27T19:09:19Z,2017-10-23T12:46:03Z,2015-11-27T19:56:33Z,NONE,completed,,"Hey guys!
So in this application I'm writing there's a component called ""help section"". It's basically a box that shows some predefined texts about the component the user's messing with.

I want to be able to tell my ""help section"" component which component to show help for. As of now, I'm using Flux with some actions and a store. This isn't too bad and works quite nicely, however it's quite a large setup, with 2 files defined specifically for this cause. There are also a number of other issues that I've experienced such as ""help section"" actions dispatching because of other actions (which raises a ""Cannot dispatch in the middle of a dispatch"" error).

However, if I could define ""help section"" as a **singleton**, I could just `import helpSection from './HelpSection` and be done with it, since I'll get the **instance** of ""help section"". All I have to do is expose a method on `helpSection` that sets the properties I want to change and call it.

I know it breaks React's unidirectional data flow, with a component changing another component, but maybe it's worth it sometimes. The way I think about it, it's sort of a combination of a store, some actions and a component into one object. A lot of components will only get instantiated once at run time so maybe it'll be quite useful in some cases.

I couldn't find any reference to this on the web other than in [this JSfiddle](https://jsfiddle.net/69z2wepo/7764/), which seems to work nicely (It's a bit unclear IMO). Is this a good way to do it?

I'm quite a novice in JavaScript and React so I might be missing some obvious points, hopefully not.
What do you think about this?
Thanks for reading.

(P.S. Sorry for any ambiguousness, English is not my native language... :smile:)
"
,,,https://github.com/facebook/react/issues/5415,5415,onUpdate/onChange/OnInput not working with input type range in IE 11 . Windows ,[],closed,False,,3,2015-11-07T07:17:41Z,2015-11-18T08:51:05Z,2015-11-09T19:39:03Z,NONE,completed,,"onChange is working in chrome though.

Both of the following in working in chrome and not in IE 11 .(React version ""react"": ""0.13.x"",)

```
<input type=""range"" defaultValue=""0.00"" min={`${inp.min}`} max={`${inp.max}`} step="".01"" onChange={this.handleChange.bind(this, inp.id)}/>
```

```
<input type=""range"" defaultValue=""0.00"" min={`${inp.min}`} max={`${inp.max}`} step="".01"" onInput={this.handleChange.bind(this, inp.id)}/>
```
"
,,,https://github.com/facebook/react/issues/5527,5527,React.PropTypes.node should accept stateless component (function),[],closed,False,,3,2015-11-22T14:41:41Z,2015-11-23T20:23:50Z,2015-11-23T20:23:41Z,NONE,completed,,"I just replaced some react components that where defined using es6 classes and I am now getting warnings about my react stateless component (that are just fuction) not being a ReactNode.

```
Warning: Failed propType: Invalid prop `Loader` supplied to `Picture`, expected a ReactNode.
```

I were validating some components using `React.PropTypes.node`, but now I need to use `PropTypes.oneOfType([ PropTypes.node, PropTypes.func ])` which seems a bit long to say ""this can be anything that can be rendered as a component"" (which is what `ProTypes.node` is supposed to cover right?).

From the doc

``` js
    // Anything that can be rendered: numbers, strings, elements or an array
    // (or fragment) containing these types.
    optionalNode: React.PropTypes.node,
```

Maybe `func` should be added? Or is there any reason why `node` doesn't handle `func` as well?
"
,,,https://github.com/facebook/react/issues/5364,5364,OnClick in <a> tag not working in IE11 after update to 0.14.1,[],closed,False,,4,2015-11-02T13:41:30Z,2015-11-02T14:30:24Z,2015-11-02T14:29:35Z,NONE,completed,,"None of my onClick handlers are working in development mode after updating from 0.14.0 to 0.14.1 using IE11. 

When reverting the code that was changed in ReactErrorUtils.js for #5157 I get the onClick handler working again.
"
,,,https://github.com/facebook/react/issues/5535,5535,Checksum is invalid because of &copy; entity,[],closed,False,,3,2015-11-23T23:25:33Z,2015-11-24T00:19:07Z,2015-11-24T00:14:03Z,NONE,completed,,"I'm using React to render on the server and on the client. On the client I'm getting this error message:

```
Warning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:
 (client) <div data-reactid=""
 (server) <div data-reactid=""
```

Besides the checksum being present in the server rendered HTML, the rendered HTML is exactly the same on both the client and server. 

There is a visual issue with `&copy;` rendering as `Â©` (but this is still rendered the same on both the server and the client).

The React [doco](https://facebook.github.io/react/docs/jsx-gotchas.html) says HTML entities in literal text should work fine. Removing the HTML entity `&copy;` makes the checksum error message go away.

``` javascript
render() {
  return <footer>&copy; 2015</footer>;
}
```

Am I doing something wrong or is this a bug?

I'm using react 0.14.2 rendered on express viewed in chrome.
"
,,,https://github.com/facebook/react/issues/5401,5401,Inconsistent error messages in Test Utilities functions,"[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null}]",closed,False,,0,2015-11-05T11:47:53Z,2015-11-05T20:03:05Z,2015-11-05T20:03:05Z,NONE,completed,,"I just noticed that `findRenderedDOMComponentWithClass` returns error with message: 
""Did not find exactly one match **(found: 0)** for class:[class-name]"", 

while `findRenderedDOMComponentWithTag` returns an error message 
""Did not find exactly one match for tag:[tagname]"".

It would be preferrable to have consistent errror messages, and I would personally prefer the first format, where number of matches are reported in parantheses.
"
,,,https://github.com/facebook/react/issues/5386,5386,async value updates on inputs reset cursor position,[],closed,False,,4,2015-11-04T12:34:22Z,2017-10-03T22:51:56Z,2017-10-03T22:51:56Z,CONTRIBUTOR,completed,,"Hello again.

this strikes me as a bug, it is certainly annoying and difficult to workaround. If you control an input and set the value asynchronously, say with a setTimeout as in the example, the cursor position is reset to the end of the input.

in the below jsFiddle, try typing in the middle of the input text the cursor should reset to the end of the line.

https://jsfiddle.net/69z2wepo/19927/

**Addendum** I see that native inputs exhibit the same behavior is you, say use jquery and setinterval. To me tho that is still not the behavior you'd want, since in a controlled input scenario you know when the value is actually changing.
"
,,,https://github.com/facebook/react/issues/5757,5757,internal components,[],closed,False,,1,2015-12-30T21:00:13Z,2015-12-30T21:08:09Z,2015-12-30T21:08:09Z,NONE,completed,,"Does facebook have any plans on releasing some reusable components for websites like it has for reactive native? I know the community is making this happen but it would be good to see some of the components used internally at facebook/instagram.
"
,,,https://github.com/facebook/react/issues/5738,5738,React props change object to array,[],closed,False,,0,2015-12-28T07:15:19Z,2015-12-28T07:36:38Z,2015-12-28T07:34:22Z,NONE,completed,,
,,,https://github.com/facebook/react/issues/5641,5641,`e.target.value` reflects <select value={}> not <option value={}> in Chrome on Windows 10,"[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,10,2015-12-10T19:57:59Z,2019-07-17T07:32:01Z,2017-10-04T11:43:12Z,NONE,completed,,"Just a note, it works perfectly fine on earlier versions of Windows and Mac OS X

code:

``` js
var Test = React.createClass({
  getInitialState: function() {
    return { value: '1' };
  },

  onChange: function(e) {
    this.setState({value: e.target.value})
    console.log(e.target.value)
  },

  render: function() {
    return (
      <div>
        <select value={this.state.value} onChange={this.onChange}>
          <option value=""1"">1</option>
          <option value=""2"">2</option>
          <option value=""3"">3</option>
          <option value=""4"">4</option>
        </select>
      </div>
    );
  }
});
```

Whenever the onChange is triggered, the `e.target.value` is 1. I'm assuming this is because that is the value <select> starts with. And any changes do not correctly change the value.
"
,,,https://github.com/facebook/react/issues/5667,5667,any plan to de-couple react-dom from react ?,[],closed,False,,3,2015-12-15T13:50:00Z,2015-12-16T04:10:10Z,2015-12-15T22:29:50Z,NONE,completed,,"Since react-dom introduced, I am sorry it is really buggy to me how to bundle React in my projects, because the following line in index.js: 

```
module.exports = require('react/lib/ReactDOM');
```

It means the `react-dom` will require the file `ReactDOM.js` directly, and I have to require the same source code too.

However, to save the time to bundle react and make my React component unaware whether it is `react` or `react/addons`, I always bundle the `react/dist/react-with-addons.min.js` or `react/dist/react.min.js` directly, and use browserify expose them as `react` for other module.

It makes my component can always start with the following line:

```
var React = require('react') // whether it is react or react/addons
```

Because usually I bundle react in a site-core.js for all other app in the website, the site-core.js is completely independent. It use browserify to expose `react` for other module to require.

If some components want react, and some components want react/addons, till the end, you have to require react/addons. The component only need `react` will get nothing, so I expose `react/dist/react-with-addons.min.js` as `react` for all.

Now, the problem is, react-com always want to require `react/lib/ReactDOM`, it will require a duplicated React when i bundle `react-com`. I see `require('react/lib/ReactDOM')` as a temp solution, so I am asking if any plan to de-couple react-dom from react ? Sorry for asking :)
"
,,,https://github.com/facebook/react/issues/5620,5620,Documentation about refs and shallow rendering,[],closed,False,,1,2015-12-07T16:18:59Z,2016-02-06T04:23:59Z,2016-02-06T04:23:59Z,NONE,completed,,"Docs say about refs in shallow rendering:

> Shallow testing currently has some limitations, namely not supporting refs. 

However, if I shallow render a component, the `ref` property is present correctly. We're using it in react-shallow-testutils like this:

https://github.com/rkovacevic/react-shallow-testutils/commit/b20af04fef4ade7df111e131792bb178794a789a

Is this feature stable, can we rely on `ref` being present? 
"
,,,https://github.com/facebook/react/issues/5679,5679,Improve documentation for using React with Webpack,[],closed,False,,8,2015-12-16T20:25:06Z,2017-10-03T23:13:44Z,2017-10-03T23:13:44Z,MEMBER,completed,,"#5672 made it clear that we could do better. #5658 improved the situation slightly but we still don't discuss how to actually use these things together.

Quickest short term fix would be to explicitly describe how you would use DefinePlugin to do what envify is doing - https://twitter.com/dan_abramov/status/592692202335301636 is nice and concise.

Longer term I'd like to have some more flushed out docs around using React from start to finish with both browserify and webpack (and maybe more if needed). But let's start simple.
"
,,,https://github.com/facebook/react/issues/5661,5661,ES6 rules not allowed static properties in classes only method,[],closed,False,,1,2015-12-14T21:32:40Z,2015-12-14T21:47:37Z,2015-12-14T21:45:45Z,NONE,completed,,"see more https://stackoverflow.com/questions/34125141/mysterious-eslint-parsing-error#
"
,,,https://github.com/facebook/react/issues/5664,5664,`if (__DEV__) { warning() }`,[],closed,False,,4,2015-12-15T04:49:21Z,2015-12-17T21:59:21Z,2015-12-16T20:08:01Z,CONTRIBUTOR,completed,,"I've noticed that calls to the `warning()` function often is wrapped in a `if (__DEV__)` conditional, which will be compiled down to redundant `""development"" !== 'production'` gates in the build process. E.g. this code from `EventPropagators.js`...

``` js
function accumulateDirectionalDispatches(domID, upwards, event) {
  if (__DEV__) {
    warning(
      domID,
      'Dispatching inst must not be null'
    );
  }
  [...]
}
```

...will be compiled to...

``` js
function accumulateDirectionalDispatches(domID, upwards, event) {
  if (""development"" !== 'production') {
    ""development"" !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
  }
  [...]
}
```

It doesn't matter in the end since that whole block will be removed by the dead code elimination in Uglify but I guess the source files could be cleaned up to don't have all those `if (__DEV__)` checks, or am I missing something? :)
"
,,,https://github.com/facebook/react/issues/5901,5901,TestUtils cannot render stateless function components,[],closed,False,,4,2016-01-21T17:49:35Z,2019-02-27T22:14:20Z,2016-01-21T18:56:47Z,NONE,completed,,"I'm using react 14.3, babel 6.0.15 and react test utils addon 0.14.6 . Jasmine 2.3 is my testing framework of choice.

It seems as though any stateless function component cannot be tested by TestUtils.renderIntoComponent or TestUtils.createRenderer().render(). Either returns null when rendering the function component.

Test with any stateless function component and it should yield the same result.
## Component:

`import React from 'react';`

`const User = ({name, age}) => (
    return <div>{name}, {age}</div>
);`

`module.exports = User;`
## Test:

`expect(TestUtils.renderIntoDocument(<User name={""bob""} age={20} />)).toBeTruthy();`
## Error:

Expected null to be truthy.
"
,,,https://github.com/facebook/react/issues/5783,5783,Inline styles with browser-specific values,[],closed,False,,7,2016-01-05T16:49:47Z,2019-07-18T11:09:34Z,2016-01-05T19:46:40Z,NONE,completed,,"It would be nice if I could define an inline style with an array and the parser would expand it to duplicate styles props.  For example:

let myStyles = {
   display: ['-webkit-flex', '-ms-flexbox', 'flex'],
   ....
};

and then specifying ""style={myStyles}"" in my component would expand to:

style=""display: -webkit-flex; display: -ms-flexbox; display: flex""

Thanks!
"
,,,https://github.com/facebook/react/issues/5944,5944,Node value setter called too many times,[],closed,False,,2,2016-01-29T21:05:08Z,2016-02-01T21:07:46Z,2016-02-01T21:07:46Z,CONTRIBUTOR,completed,,"For background, see: https://github.com/facebook/react/pull/1510/files#r44678597

Good first bug?
"
,,,https://github.com/facebook/react/issues/5847,5847,Issues with installing master with npm 3,[],closed,False,,1,2016-01-13T18:41:56Z,2016-01-13T18:54:50Z,2016-01-13T18:53:59Z,NONE,completed,,"Installer tries to run build script from the `node_modules` folder inside `sbjs-scripts`, while `npm 3` is using flat `node_modules` structure.

```
C:\repo>npm install --save facebook/react
npm WARN install Couldn't install optional dependency: Unsupported

> react-build@0.15.0-alpha postinstall C:\repo\node_modules\react-build
> node node_modules/fbjs-scripts/node/check-dev-engines.js package.json

module.js:339
    throw err;
    ^

Error: Cannot find module 'C:\repo\node_modules\react-build\node_modules\fbjs-scripts\node\check-dev-engines.js'
    at Function.Module._resolveFilename (module.js:337:15)
    at Function.Module._load (module.js:287:25)
    at Function.Module.runMain (module.js:457:10)
    at startup (node.js:136:18)
    at node.js:972:3
```

Additional info:
- npm @ 3.3.6
- node.js @ 5.0.0
- windows 7 x64 ru_RU
- was trying to check for resolution of [this question](https://github.com/facebook/react/issues/5846)
"
,,,https://github.com/facebook/react/issues/5802,5802,Babel 6.4 - Semicolons and arrow functions in a class,[],closed,False,,1,2016-01-07T20:57:40Z,2016-01-07T22:07:14Z,2016-01-07T22:07:14Z,NONE,completed,,"I would like to share https://github.com/babel/babel/pull/3231#discussion-diff-49011143 this diff to everyone as I haven't seen Babel post about it.

My transpile broke today because of this change.
+\* **Spec Compliancy**
- \* `babylon`: [#3225](https://github.com/babel/babel/pull/3225) throw parse error if class properties do not have a semicolon.

In practise this means in a class not only the constructor needs a semicolon, but arrow functions as well. I used arrow functions for 'this' to fall through, so I changed it to normal functions + add '.bind(this)' to the call where needed.
(we're using the node coding style https://docs.npmjs.com/misc/coding-style)
"
,,,https://github.com/facebook/react/issues/5771,5771,Please tag v0.14.5,[],closed,False,,2,2016-01-04T07:28:17Z,2016-01-04T17:59:40Z,2016-01-04T17:59:40Z,NONE,completed,,"The latest version on npm is `v0.14.5`, but the latest tag on github is `v0.14.4`.

It's really scary to get an untagged version of a library because you have no idea which commit was released.
"
,,,https://github.com/facebook/react/issues/5921,5921,SyntheticEvents are leaking dom nodes,[],closed,False,,3,2016-01-26T11:39:50Z,2016-01-27T07:45:25Z,2016-01-26T16:29:32Z,NONE,completed,,"`SyntheticEvent.target` is not nulled when event is put into the events instance pool for reuse.
When unmounting the instance pool of events remains and the nodes pointed by the target property become detached nodes.

Here is an example:
https://react.jsbin.com/ziwepazewu

Click the header a few times to generate events. After 5 seconds the component will be removed via `unmountComponentAtNode`. Open chrome dev tools, take a heap snapshot and notice the detached nodes held by the SyntheticEvents.

Screenshot attached.
![image](https://cloud.githubusercontent.com/assets/6630673/12579653/3db323f4-c432-11e5-806a-066b9cc22f16.png)
"
,,,https://github.com/facebook/react/issues/5805,5805,Drag n Drop elements sorting. ,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,3,2016-01-08T08:10:52Z,2016-01-08T17:29:58Z,2016-01-08T17:29:28Z,NONE,completed,,"Hello, I need advice about drag n drop sorting with react. 
###### 1) Start

Data:

``` js
[""one"", ""two"", ""three""]
```

Rendered DOM:

``` html
<ul>
    <li>one</li>
    <li>two</li>
    <li>three</li>
</ul>
```
###### 2) After manual sorting with drag n drop

Data:

``` js
[""one"", ""two"", ""three""]
```

Rendered DOM:

``` html
<ul>
    <li>three</li>
    <li>one</li>
    <li>two</li>
</ul>
```
###### 3) Changing data

Data:

``` js
[""three"", ""one"", ""two""]
```

React apply changes from array to dom:

``` html
<ul>
    <li>two</li>
    <li>three</li>
    <li>one</li>
</ul>
```

for this reason i have to refund dom element to his place (`container.insertBefore(item, itemOldSibling)`):

``` html
<ul>
    <li>three</li>
    <li>one</li>
    <li>two</li>
</ul>
```
###### Problem:

If i have deep nesting of components

``` html
...
<ul>
    <li><SomeOtherComponent data={...}/></li>
    <li>one</li>
    <li>two</li>
</ul>
...
```

react do full rerender and 
1) is no longer needed `insertBefore`
2) If left `insertBefore`, it falls with an error because `item` and `itemOldSibling` no longer exist.

Whether there is a normal way to dnd sorting with react?
"
,,,https://github.com/facebook/react/issues/5848,5848,scryRenderedDOMComponentsWithTag throws error on FF 43.0.4,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":139734344,""node_id"":""MDU6TGFiZWwxMzk3MzQzNDQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils"",""name"":""Component: Test Utils"",""color"":""eb6420"",""default"":false,""description"":null}]",closed,False,,1,2016-01-13T22:09:28Z,2018-01-05T21:19:18Z,2018-01-05T21:19:18Z,NONE,completed,,"If the name of the input field is ""props"" this test fails.  Anything else seems fine.

Only in FF though.

```
FAILED form test should find button debug.html:35:1
HTMLFormElement doesn't have a named property setter for '""props""'
ReactDOMComponent.Mixin.getPublicInstance@base/test/index.js:11797:12
findAllInRenderedTreeInternal@base/test/index.js:143582:21
findAllInRenderedTreeInternal@base/test/index.js:143595:23
ReactTestUtils.findAllInRenderedTree@base/test/index.js:143681:13
ReactTestUtils.scryRenderedDOMComponentsWithTag@base/test/index.js:143729:1
@base/test/index.js:144114:33
 debug.html:38:11

```

Here is a test case.

``` jsx
import React, {DOM, Component} from 'react';
import ReactDOM from 'react-dom';
import expect from 'expect';
import {renderIntoDocument, scryRenderedComponentsWithType as withType, scryRenderedDOMComponentsWithTag as withTag} from 'react-addons-test-utils';

function into(node, debug) {
    debug = document.createElement('div');
    document.body.appendChild(debug)
    return ReactDOM.render(node, debug);
}

class App extends Component {
    render() {
        return <form>
            <button>Hello</button>
            <input name=""props""/>
        </form>
    }
}

describe('form test', function () {

    it('should find button', function () {

        var f = into(<App/>);

        expect(withTag(f, 'button')[0]).toExist();

    });
});
```
"
,,,https://github.com/facebook/react/issues/5985,5985,pull request for htmltojsx,[],closed,False,,2,2016-02-05T17:23:00Z,2016-02-05T18:26:39Z,2016-02-05T17:49:42Z,NONE,completed,,"Hi there,

I put in a pull request for htmltojsx in react-magic  to fix the improper-rendering-of-brackets issue a few days ago.  I was just wondering what the typical timeline for reviewing those was?

Cheers
"
,,,https://github.com/facebook/react/issues/6122,6122,Elements not visible to user in Chrome on HiDPI displays.,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2016-02-25T19:37:53Z,2016-02-26T15:58:30Z,2016-02-26T15:58:30Z,NONE,completed,,"In Chrome, on HiDPI displays, elements that exist in the DOM (React Components) are not properly displayed. They exist in the DOM, but are not visible. They are part of a dynamic list that can be filtered.  I will try to link a recreation of this issue here soon.
"
,,,https://github.com/facebook/react/issues/6007,6007,Remove event listener used with bind in ES6 syntax ?,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,3,2016-02-09T16:54:39Z,2019-11-27T00:25:33Z,2016-02-09T17:31:42Z,NONE,completed,,"I'm trying to communicate with an iframe with the postMessage API but I have an issue with the eventListeners management in ES6

It is stated in the docs that

> With React, every method is automatically bound to its component instance (except when using ES6 class syntax)

The problem is that `this.handler.bind(this) !== this.handler` so when I'm done with the event I can't remove the listener because I can't keep a reference to the handler. I could try to encapsulate the function, but the encapsulating function would also need a binding. I could try to super the constructor too but I'm not sure this is a good idea, plus I don't know the args it need. I'm quite sure I'm missing an important point here.

Any help would be much appreciated !

```
export default class SomeComponent extends Component {

  handleIframeData(event) {
    // some stuff in there that will need 'this' to be set to the component's context, to get props for example.
  }

  componentDidMount() {
    window.addEventListener('message', this.handleIframeData.bind(this), false)
  }

  componentWillUnmount() {
    // won't work because 'this.handleIframeData.bind(this) !== this.handleIframeData'
    window.removeEventListener('message', this.handleIframeData, false)
  }

  render() {
    return (
      <div className=""SomeComponent"" style={{height: '100%', width:'100%', display: 'table'}}>
        <iframe src=""assets/iframe/index.html"" style={{display: 'table-row', width: '100%', height:'100%', border: 0}}></iframe>
      </div>
    )
  }
}
```

Thanks anyway !
"
,,,https://github.com/facebook/react/issues/6145,6145,Is there any way to update React Child Components ,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,6,2016-02-29T16:29:06Z,2016-03-01T03:39:02Z,2016-02-29T19:00:34Z,NONE,completed,,"Parent element 

```
class ReactWizard extends Component{
  constructor(props){
    super(props);
    this.state = {
      childItems: [],
      step: 0,
      styleClass:null,
      category: null,
      data: {}
    };
    this._divStyle = this._divStyle.bind(this)
    this._changeStep = this._changeStep.bind(this)
  }
componentWillMount(){
    var wizardItems = [
      <ReactWizardItem.start data={this.state.data}/>,
      <ReactWizardItem.center data={this.state.data}/>,
      <ReactWizardItem.finish data={this.state.data}/>
    ];
    this.setState({
      childItems: wizardItems
    })
  }
render(){
if(this.state.childItems.length > 0){
      childItems = this.state.childItems.map((value, index) => {
        return (
          <div key={index} className=""wizard-item"" data-wizard={index}>
            {value}
          </div>
        )
      })
    }
    var currentStep = this.state.step;
    return(
      <div className=""wizard-outer"">
        <div className=""wizard-wrapper clearfix"" style={this.state.styleClass} id=""wizardBox"">
          {childItems}
        </div>
        <div className=""wizard-nav"">
          <a href=""#"" className={""btn  pull-left "" + currentButton.prevClass} onClick={this._prev.bind(this,currentStep)}>{currentButton.prev}</a>
          <a href=""#"" className={""btn  pull-right "" + currentButton.nextClass} onClick={this._next.bind(this,currentStep)}>{currentButton.next}</a>
        </div>
      </div>
    )
  }
}
```

Child component 

```
class ReactWizardItemCenter extends Component{
  constructor(props){
    super(props)
  }
  componentWillReceiveProps(nextProps){
    console.log(nextProps)
    console.log(""Props updated"")
  }
  componentWillUpdate(){
    console.log(""Run if state changes"")
  }
  render(){
    console.log(""Render"")
    return(
      <div className=""wizard"">
        <div className=""form-group"">
          <label htmlFor=""auto-video-subcategory"" className=""control-label"">Subcategory</label>
          <select type=""text"" className=""form-control"" id=""auto-video-subcategory"" name=""subcategory_id"">
            <option value="""">--Select--</option>
          </select>
        </div>
      </div>
    )
  }
}
ReactWizardItem.center = ReactWizardItemCenter;
```

Child elements not  showing  anything on componetWillRecieveProps and componentDidUpdate.

This code working well when i change code

```
return(
      <div className=""wizard-outer"">
        <div className=""wizard-wrapper clearfix"" style={this.state.styleClass} id=""wizardBox"">
          <div key=""0"" className=""wizard-item"" data-wizard=""0"">
          <ReactWizardItem.start data={this.state.data}/>
          </div>
          <div key=""1"" className=""wizard-item"" data-wizard=""1"">
          <ReactWizardItem.center data={this.state.data}/>
          </div>
          <div key=""2"" className=""wizard-item"" data-wizard=""2"">
          <ReactWizardItem.finish data={this.state.data}/>
          </div>
        </div>
        <div className=""wizard-nav"">
          <a href=""#"" className={""btn  pull-left "" + currentButton.prevClass} onClick={this._prev.bind(this,currentStep)}>{currentButton.prev}</a>
          <a href=""#"" className={""btn  pull-right "" + currentButton.nextClass} onClick={this._next.bind(this,currentStep)}>{currentButton.next}</a>
        </div>
      </div>
    )
```

I like to use first one, This code is to make a wizard like content.

Thanks in advance 
"
,,,https://github.com/facebook/react/issues/6102,6102,Any way to handle setState changes output on SSR?,[],closed,False,,1,2016-02-23T18:00:30Z,2016-02-24T18:05:40Z,2016-02-24T18:05:40Z,NONE,completed,,"I was wondering how it's the best way to render server-side (without rendering this on the client) AND handle the state changes. What I mean here is how to get the HTML from a server component that has a state changing.

Example:
1. A server gets a requests to generate an HTML
2. The server 'requires' a react component, passing some props
3. The react component renders in the server, but it has to do an Ajax/Socket query to get some info. The event is sent and the response comes later.
4. The react component changes the state, changing the output
5. The HMTL generated is ready and with the latest state changes.

What's happening here is that ReactDOM.renderToStaticMarkup(), as expected, doesn't wait for the component to finish the state changes (in this case, wait for the data and re-render).

How can I achieve this? Doing all the queries first and passing all the data as props? Is this the only way?

Thanks!
"
,,,https://github.com/facebook/react/issues/5964,5964,BUG: JSX allow tag use `class` property,[],closed,False,,2,2016-02-02T10:51:51Z,2016-02-02T10:57:26Z,2016-02-02T10:53:22Z,NONE,completed,,"![image](https://cloud.githubusercontent.com/assets/1500781/12747238/ce6c4762-c9dd-11e5-8820-6e9bb5fcc173.png)

Node ver: 5.0.0

Babel Deps:
-     ""babel-cli"": ""^6.4.0"",
-     ""babel-core"": ""^6.3.26"",
-     ""babel-eslint"": ""^5.0.0-beta6"",
-     ""babel-loader"": ""^6.2.0"",
-     ""babel-plugin-add-module-exports"": ""^0.1.2"",
-     ""babel-polyfill"": ""^6.3.14"",
-     ""babel-preset-es2015"": ""^6.3.13"",
-     ""babel-preset-react"": ""^6.3.13"",
-     ""babel-preset-react-hmre"": ""^1.0.1"",
-     ""babel-preset-stage-0"": ""^6.3.13""

It seems cause by custom html tag.
"
,,,https://github.com/facebook/react/issues/5952,5952,"Controlled Inputs can update out of order, causing cursor jump",[],closed,False,,9,2016-02-01T04:13:04Z,2017-10-03T23:22:26Z,2017-10-03T23:22:25Z,CONTRIBUTOR,completed,,"Here is a subtle change introduced when the DOMInput component was switched into the current lighter weight wrappers.

In order to ensure that things like: #1698 don't happen. The inputs defer an update until all updates have been flushed when controlled. This gives the incoming props a chance to make it to the component before it inadvertently resets the value to the now, last, `props.value`.

Essentially the old `value` is set on the DOM node before the new `value` has a chance to be pushed to the input props, which causes the cursor to jump to the end.

This was originally seen and addressed in: https://github.com/facebook/react/blob/0.13-stable/src/browser/ui/dom/components/ReactDOMInput.js#L30-L35

However the recent changes removed the `forceUpdate()` and call `ReactDOMInput.updateWrapper` directly. **The difference is the `forceUpdate` enqueues itself in the update queue whereas updateWrapper does not**. Which leads to cases where the input actually updates _before_ its parents have finished updating.

Related issue to #5386, however in this cause nothing is actually async.

This is relevant because [user-land implementations of uncontrolled components](https://github.com/jquense/uncontrollable) create situations where a parent component to the input is _also_ deferring an update with `.asap()`.

I have tried a bit to put together a PR to address this but I don't know that there is an easy fix as long as the DOMComponent is not itself using something like `forceUpdate`.
## Test case demonstrating the bug
### Expected:

`inputNode.value` to not be set at all after it was manually set to `'bar'`
### Actual:

`inputNode.value` is set from: `'bar'` to `'foo'` and then from  `'foo'` to `'bar'`

``` js
var Wrapper = React.createClass({
  eventuallyUpdate(e) {
    this._value = e.target.value;

    // not actually ""async"" in the true sense of it.
    ReactUpdates.asap(function() {
      this.forceUpdate();
    }, this);
  },

  render() {
    return (
      <input
        ref=""input""
        type=""text""
        value={this._value || 'foo'}
        onChange={this.eventuallyUpdate}
      />
    );
  },
});

var inst = ReactTestUtils.renderIntoDocument(<Wrapper />);
var inputNode = ReactDOM.findDOMNode(inst.refs.input);
var setCount = 0;

inputNode.value = 'bar';

var desc = Object.getOwnPropertyDescriptor(
  inputNode.constructor.prototype,
  'value'
);

Object.defineProperty(inputNode, 'value', {
  get: function() {
    return desc.get.call(this);
  },
  set: function(val) {
    setCount++;
    desc.set.call(this, val);
  },
});

ReactTestUtils.Simulate.change(input, {
  target: { value: 'bar' },
});

expect(setCount).toBe(0); // will be 2
```
"
,,,https://github.com/facebook/react/issues/6128,6128,ReactDOM - The cost of extra 900 bytes,[],closed,False,,5,2016-02-26T18:45:51Z,2016-02-26T19:48:33Z,2016-02-26T19:48:33Z,NONE,completed,,"ReactDOM and React are good separation of concerns. However, except for special cases, React applications almost always require the ReactDOM as well. The special cases can obviously have their own builds which can remove the unnecessary dependency. But React officially should serve a single library which includes the ReactDOM as a single resource. It absolutely makes no sense for an extra network request for a library that's 900 bytes gzipped. 

This cost is even multiplied, since the official CDNs seem to already have a redirection in place. At the moment of filing this issue, a request to https://fb.me/react-0.14.7.min.js ends up with 301 to https://fbcdn-dragon-a.akamaihd.net/hphotos-ak-xfa1/t39.3284-6/12624086_185960608428874_474870377_n.js 

And similar redirects for ReactDOM. That's `4` requests in place of what could be a `2`. 2 requests, for a mere 900 bytes. In other words, taking the overhead of TCP/IP and HTTP, `an overhead of nearly half a kilobyte with about 600ms of latency (in my geographic location) for a mere 900 bytes`. Now, add to the fact that the `gzip would probably nullify that 900 bytes almost entirely` if its included as a part of the other 70kb file, due to binary compression. 

I'm honestly quite surprised why it was even decided to separate them (Not as libraries, but in terms of deployment). 
"
,,,https://github.com/facebook/react/issues/6115,6115,cloneElement vs createElement,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,1,2016-02-25T00:14:45Z,2016-02-25T04:10:07Z,2016-02-25T04:10:01Z,CONTRIBUTOR,completed,,"Can anyone let me know if using cloneElement (on exist element instance) or createElement (on react Element class) which one is better in term of performance?
Sometimes cloning something is faster than create new instance. Please let me know. Thanks
"
,,,https://github.com/facebook/react/issues/5983,5983,Error boundary should catch errors in componentWillUnmount,[],closed,False,,0,2016-02-05T01:32:46Z,2016-02-12T02:11:35Z,2016-02-12T02:11:35Z,CONTRIBUTOR,completed,,"http://jsfiddle.net/aeyysown/
"
,,,https://github.com/facebook/react/issues/6290,6290,Fix coverage testing and enable it again,"[{""id"":71502270,""node_id"":""MDU6TGFiZWw3MTUwMjI3MA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure"",""name"":""Component: Build Infrastructure"",""color"":""f9d0c4"",""default"":false,""description"":null}]",closed,False,,3,2016-03-18T01:22:36Z,2016-09-02T22:02:58Z,2016-09-02T22:02:58Z,MEMBER,completed,vjeux,"It was introduced in #5713 but I disabled it in d138b286db4fcb7137f9267a30ec64b657d3cfb4 because we consistently got test failures on master. They appear to be caused by processes running out of memory due to coverage instrumentation overhead.

We should figure out a way to add the coverage reporting back. I’ve heard from @cpojer there are potential optimizations to be made in Jest to help mitigate this overhead. We can look into helping Jest deal with this.

If there is a way to increase memory cap for React tests on Travis maybe we could do that too.

One thing I wasn’t sure about is removing `set -e` in d138b286db4fcb7137f9267a30ec64b657d3cfb4. It was only present in `if` branch that used to handle the master so I removed it to be consistent with the `else` branch that handles the PRs. However I’m not sure why it was there in the first place, and maybe we should add it back. I’d love to learn more about this.

Let’s keep this issue open until we have a specific plan to integrate coverage again without being red all the time.
"
,,,https://github.com/facebook/react/issues/6196,6196,Remove FBJS as dependency,[],closed,False,,3,2016-03-05T19:52:50Z,2016-03-06T00:12:56Z,2016-03-06T00:12:56Z,NONE,completed,,"It is for sure one linked to the other, but what are the reasons for reactjs using fbjs at it's core?

I can't see any way both of them need to co-exist, unless there is a base code for them that is shared. In that case, that should become part of Reacjs, or a shared library among them.
"
,,,https://github.com/facebook/react/issues/6194,6194,shallow rendering stateless components vs stateful components - different _owner,"[{""id"":204945357,""node_id"":""MDU6TGFiZWwyMDQ5NDUzNTc="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Shallow%20Renderer"",""name"":""Component: Shallow Renderer"",""color"":""eb6420"",""default"":false,""description"":null}]",closed,False,,1,2016-03-05T16:11:38Z,2016-10-27T15:01:28Z,2016-10-27T15:01:28Z,NONE,completed,,"Related to https://github.com/facebook/react/issues/5292, see https://github.com/bmullan91/react-shallow-renderer-bug for my test case and how to reproduce.
## reproduce

``` bash
git clone https://github.com/bmullan91/react-shallow-renderer-bug.git
cd react-shallow-renderer-bug
npm install
npm test
```
## issue

The `StatelessComponent` and `StatefulComponent` when rendered with shallowRenderer, there outputs differ in the `_owner` key, see below.
## test output

```
TAP version 13
# compare StatelessComponent shallowRenderer getRenderOutput
not ok 1 should be equivalent
  ---
    operator: deepEqual
    expected: |-
      { $$typeof: 60103, _owner: null, _store: {}, key: null, props: { children: [ 'Hello ', 'Brian' ] }, ref: null, type: 'div' }
    actual: |-
      { $$typeof: 60103, _owner: { _context: {}, _currentElement: { $$typeof: 60103, _owner: null, _store: {}, key: null, props: { name: 'Brian' }, ref: null, type: [Function] }, _instance: { _reactInternalInstance: [Circular], context: {}, props: { name: 'Brian' }, refs: {}, state: null, updater: { enqueueCallback: [Function], enqueueCallbackInternal: [Function], enqueueElementInternal: [Function], enqueueForceUpdate: [Function], enqueueReplaceProps: [Function], enqueueReplacePropsInternal: [Function], enqueueReplaceState: [Function], enqueueSetProps: [Function], enqueueSetPropsInternal: [Function], enqueueSetState: [Function], isMounted: [Function] } }, _mountOrder: 1, _pendingCallbacks: null, _pendingElement: null, _pendingForceUpdate: false, _pendingReplaceState: false, _pendingStateQueue: null, _renderedComponent: { _currentElement: [Circular], _renderedOutput: [Circular] }, _rootNodeID: '.13qyw11le68', _topLevelWrapper: null }, _store: {}, key: null, props: { children: [ 'Hello ', 'Brian' ] }, ref: null, type: 'div' }
    at: Test.<anonymous> (/Users/brianmullan/workspace/react-shallow-renderer-bug/index.js:25:5)
  ...
# compare StatefulComponent shallowRenderer getRenderOutput
ok 2 should be equivalent

1..2
# tests 2
# pass  1
# fail  1
```
"
,,,https://github.com/facebook/react/issues/6371,6371,Uncaught Invariant Violation: Must be mounted to trap events when replacing an image with a link to an image,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,28,2016-03-29T16:35:37Z,2016-08-03T00:47:45Z,2016-04-29T21:02:51Z,NONE,completed,,"I'm having a hard time narrowing a repro down for this and there seem to be a lot of required moving parts, so I'll try to give as much information as I can.

Relevant snippet of package.json:

```
    ""react"": ""15.0.0-rc.2"", // repros w/ 0.14.7 as well
    ""react-dom"": ""15.0.0-rc.2"",
    ""react-redux"": ""4.0.6"",
    ""react-router"": ""2.0.0-rc5"",
    ""react-router-redux"": ""4.0.0-rc.1"",
    ""redux"": ""3.2.1"",
```

Our routes look something like this:

```
      <Route component={App}>
        <Route component={LayoutNoFooter}>
          <Route component={Page2} />
        </Route>
        <Route component={Layout}>
          <Route component={Page1} />
        </Route>
      </Route>
```

`LayoutNoFooter` simply wraps `Layout` and passes an additional prop in.

I have this component in the `Header`, which is rendered by `Layout`: https://gist.github.com/aaronjensen/86c9643ecc53ad4e9006

`Header` is a react-redux connected component.

`Page1` has a `componentWillUnmount` that dispatches an action that ultimately toggles `searchMode` in `HeaderLogo`. 

When I go from `Page1` to `Page2` the invariant violation fires.

If I `setTimeout` the action dispatch in `componentWillUnmount` it appears to work fine. If I replace `LayoutNoFooter` with `Layout` it appears to work fine.

The invariant violation is on the `img` tag of the `HeaderLogo`

![stack](https://screenshots-dx37.s3.amazonaws.com/monosnap/Integration_Test__Hotel_Results_2016-03-28_22-35-14.png)

I've tried building a repro in codepen, with a similar structure `setState` calls to simulate react-router and redux, but I suspect they are doing more that would require me to actually build a repro w/ those technologies. If that would be helpful, I can work on it over time and hopefully repro it. Maybe there's enough info here, however. Thanks!
"
,,,https://github.com/facebook/react/issues/6190,6190,Proposal: Get rid of pooling in synthetic event system,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":1776420141,""node_id"":""MDU6TGFiZWwxNzc2NDIwMTQx"",""url"":""https://api.github.com/repos/facebook/react/labels/Partner"",""name"":""Partner"",""color"":""e4bef7"",""default"":false,""description"":""""}]",closed,False,,7,2016-03-04T22:17:12Z,2021-03-24T17:24:17Z,2021-03-24T17:24:17Z,MEMBER,completed,,"After staring at the confusing mess that is the synthetic event system today and talking with @sebmarkbage, we're no longer confident that we need the pooling that the system currently uses. GCs have gotten pretty good so we may be experiencing diminishing returns at this point, or maybe losing out on some benefits. We do have to consider that we still support some older browsers who's GCs don't have the benefit of the last several years worth of innovations so it might be premature, but it's probably worth investigating.
"
,,,https://github.com/facebook/react/issues/6342,6342,"CSS: values with ""!important"" in 0.15",[],closed,False,,5,2016-03-25T20:57:34Z,2016-06-28T02:59:43Z,2016-03-25T22:57:38Z,NONE,completed,,"It seems that style values with ""!Important"" doesnt work in 0.15. Fiddle:
https://jsfiddle.net/beyt1ekz/
"
,,,https://github.com/facebook/react/issues/6372,6372,Component setState doesn't allow Symbol keys,[],closed,False,,13,2016-03-29T17:30:24Z,2016-04-04T17:21:39Z,2016-04-04T17:21:39Z,NONE,completed,,"https://jsfiddle.net/gingur/eqprn74c/

When trying to do something like `this.setState({ [someSymbol]: 'someValue' });` the `render` is being invoked properly but the `this.state[someSymbol]` is undefined.  Running `Object.getOwnPropertySymbols` on `this.state` I have confirmed that `this.setState` does not define Symbol properties.
"
,,,https://github.com/facebook/react/issues/6368,6368,Input type 'email' as controlled component does not control white spaces,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,14,2016-03-29T14:34:03Z,2019-08-07T10:45:19Z,2018-07-15T02:12:22Z,NONE,completed,,"A controlled input filed of type email behave differently from a controlled field of type text.
If you manage a controlled input field of type email, the actual state and the rendered DOM are different if the user digit spaces, e.g. '  '.

With an input element like this:
`<input type=""text"" value={'stringFromTheState'} />`
if you try to digit letters or spaces, you will always get rendered the string 'stringFromTheState'.

With an input element like this:
`<input type=""email"" value={'stringFromTheState'} />`
if you try to digit letters you will always get rendered the string 'stringFromTheState'.
if you try to digit spaces you will get a new rendered string that compose the state with the spaces.

This is problematic is before saving the state you need to validate the field and force it to do something smart like strip the white spaces.
"
,,,https://github.com/facebook/react/issues/6293,6293,checkPropTypes() suppresses repeat warning messages about missing required propTypes,[],closed,False,,1,2016-03-18T20:41:35Z,2016-03-18T23:10:56Z,2016-03-18T23:10:56Z,CONTRIBUTOR,completed,,"We have been writing some tests around behaviour when required prop types are not supplied to a React component. We noticed that as we added `.isRequired` to more `PropTypes` some of our test suite did not break as expected. Our first tests check the number of times `console.warn` is called, which failed as this number would increase, but the following tests, that did not supply the newly required prop, did not trigger an increase. 

To demonstrate the behaviour in a browser please see this [jsFiddle](https://jsfiddle.net/GordyD/wzqmodn1/9/).

We discovered the cause in [ReactElementValidator](https://github.com/facebook/react/blob/0.14-stable/src/isomorphic/classic/element/ReactElementValidator.js#L214). It is actually suppressing repeat warning messages for missing propTypes. As you can see in the source, there is even a comment about this issue. 

> Only monitor this failure once because there tends to be a lot of the same error.

From our perspective, this non-deterministic behaviour is unexpected and we would expect these warnings to appear any time we render a component without props which we have specified as being required, even if there tends to be a lot of them! We've discussed it as a team and we feel that the greater community may expect this type of behaviour too. 

At this point we'd appreciate it if we could either:
- get perspective on why this behaviour exists (we may be missing something that this protects against)
- find a solution to patch this behaviour (remove suppression would be optimal in our eyes)

The relevant commit when this behaviour was added is [here](https://github.com/facebook/react/commit/d0719a5ea4843cca40b0c1a73ad9acffd9639b50), quite a while ago now!
"
,,,https://github.com/facebook/react/issues/6205,6205,"Pre-binding is problematic, binding causes performance issues","[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,1,2016-03-07T22:57:46Z,2016-03-08T00:11:27Z,2016-03-08T00:11:27Z,NONE,completed,,"Per this article: https://medium.com/@esamatti/react-js-pure-render-performance-anti-pattern-fb88c101332f

I posted this in StackOverflow: http://stackoverflow.com/questions/35855490/react-and-pre-binding-functions-for-performance

I feel like I'm in a catch-22. If I use `bind` on event handlers or the `() => { }` pattern, there could be performance issues with re-rendering. If I use the method described in the article above, then I can't pass arguments to a single DRY function, I have to create several functions to handle different scenarios (as in one of the answers in the SO post, with `setEmail`, `setPassword`).

What's the solution here?
"
,,,https://github.com/facebook/react/issues/6321,6321,Can't update 'checked' attribute,[],closed,False,,29,2016-03-23T13:36:57Z,2017-10-03T23:31:28Z,2017-10-03T23:31:28Z,NONE,completed,,"Consider this input:

```
<input
    type='radio'
    value='2'
    checked={this.state.value === '1'}
    onChange={this.onChange}
/>

onChange: function (e) {
    this.setState({value: e.target.value});
}
```

If the first time the component is rendered, `this.state.value === '1'`, then this input will remain `checked` forever in the DOM, even if it appears unchecked visually. For instance this can happen with

```
getInitialState = function() {
    return {value: '1'};
}
```

I am using React 0.14.7.
"
,,,https://github.com/facebook/react/issues/6567,6567,validateDOMNesting ,[],closed,False,,5,2016-04-21T10:43:40Z,2019-09-12T06:11:36Z,2016-04-21T11:46:31Z,NONE,completed,,"```
Warning: validateDOMNesting(...): <form> cannot appear as a descendant of <form>. See CreateApps > form > ... > Connect(UploadBtn) > UploadBtn > Connect(resourceModal) > resourceModal > Connect(resource) > resource > form.


warning @ warning.js:45validateDOMNesting @ validateDOMNesting.js:345ReactDOMComponent.Mixin.mountComponent @ ReactDOMComponent.js:457ReactReconciler.mountComponent @ ReactReconciler.js:37ReactMultiChild.Mixin.mountChildren @ ReactMultiChild.js:241ReactDOMComponent.Mixin._createContentMarkup @ ReactDOMComponent.js:591ReactDOMComponent.Mixin.mountComponent @ ReactDOMComponent.js:479ReactReconciler.mountComponent @ ReactReconciler.js:37ReactMultiChild.Mixin.mountChildren @ ReactMultiChild.js:241ReactDOMComponent.Mixin._createContentMarkup @ ReactDOMComponent.js:591ReactDOMComponent.Mixin.mountComponent @ ReactDOMComponent.js:479ReactReconciler.mountComponent @ ReactReconciler.js:37ReactMultiChild.Mixin.mountChildren @ ReactMultiChild.js:241ReactDOMComponent.Mixin._createContentMarkup @ ReactDOMComponent.js:591ReactDOMComponent.Mixin.mountComponent @ ReactDOMComponent.js:479ReactReconciler.mountComponent @ ReactReconciler.js:37ReactCompositeComponentMixin.mountComponent @ ReactCompositeComponent.js:225ReactCompositeComponent_mountComponent @ ReactPerf.js:66ReactReconciler.mountComponent @ ReactReconciler.js:37ReactMultiChild.Mixin.mountChildren @ ReactMultiChild.js:241ReactDOMComponent.Mixin._createContentMarkup @ ReactDOMComponent.js:591ReactDOMComponent.Mixin.mountComponent @ ReactDOMComponent.js:479ReactReconciler.mountComponent @ ReactReconciler.js:37ReactCompositeComponentMixin.mountComponent @ ReactCompositeComponent.js:225ReactCompositeComponent_mountComponent @ ReactPerf.js:66ReactReconciler.mountComponent @ ReactReconciler.js:37ReactCompositeComponentMixin.mountComponent @ ReactCompositeComponent.js:225ReactCompositeComponent_mountComponent @ ReactPerf.js:66ReactReconciler.mountComponent @ ReactReconciler.js:37ReactMultiChild.Mixin.mountChildren @ ReactMultiChild.js:241ReactDOMComponent.Mixin._createContentMarkup @ ReactDOMComponent.js:591ReactDOMComponent.Mixin.mountComponent @ ReactDOMComponent.js:479ReactReconciler.mountComponent @ ReactReconciler.js:37ReactMultiChild.Mixin.mountChildren @ ReactMultiChild.js:241ReactDOMComponent.Mixin._createContentMarkup @ ReactDOMComponent.js:591ReactDOMComponent.Mixin.mountComponent @ ReactDOMComponent.js:479ReactReconciler.mountComponent @ ReactReconciler.js:37ReactMultiChild.Mixin.mountChildren @ ReactMultiChild.js:241ReactDOMComponent.Mixin._createContentMarkup @ ReactDOMComponent.js:591ReactDOMComponent.Mixin.mountComponent @ ReactDOMComponent.js:479ReactReconciler.mountComponent @ ReactReconciler.js:37ReactMultiChild.Mixin.mountChildren @ ReactMultiChild.js:241ReactDOMComponent.Mixin._createContentMarkup @ ReactDOMComponent.js:591ReactDOMComponent.Mixin.mountComponent @ ReactDOMComponent.js:479ReactReconciler.mountComponent @ ReactReconciler.js:37ReactMultiChild.Mixin.mountChildren @ ReactMultiChild.js:241ReactDOMComponent.Mixin._createContentMarkup @ ReactDOMComponent.js:591ReactDOMComponent.Mixin.mountComponent @ ReactDOMComponent.js:479ReactReconciler.mountComponent @ ReactReconciler.js:37ReactCompositeComponentMixin._updateRenderedComponent @ ReactCompositeComponent.js:570ReactCompositeComponentMixin._performComponentUpdate @ ReactCompositeComponent.js:544ReactCompositeComponentMixin.updateComponent @ ReactCompositeComponent.js:473ReactCompositeComponent_updateComponent @ ReactPerf.js:66ReactCompositeComponentMixin.receiveComponent @ ReactCompositeComponent.js:405ReactReconciler.receiveComponent @ ReactReconciler.js:87ReactChildReconciler.updateChildren @ ReactChildReconciler.js:84ReactMultiChild.Mixin._reconcilerUpdateChildren @ ReactMultiChild.js:216ReactMultiChild.Mixin._updateChildren @ ReactMultiChild.js:351ReactMultiChild.Mixin.updateChildren @ ReactMultiChild.js:326ReactDOMComponent.Mixin._updateDOMChildren @ ReactDOMComponent.js:871ReactDOMComponent.Mixin.updateComponent @ ReactDOMComponent.js:700ReactDOMComponent.Mixin.receiveComponent @ ReactDOMComponent.js:645ReactReconciler.receiveComponent @ ReactReconciler.js:87ReactCompositeComponentMixin._updateRenderedComponent @ ReactCompositeComponent.js:562ReactCompositeComponentMixin._performComponentUpdate @ ReactCompositeComponent.js:544ReactCompositeComponentMixin.updateComponent @ ReactCompositeComponent.js:473ReactCompositeComponent_updateComponent @ ReactPerf.js:66ReactCompositeComponentMixin.receiveComponent @ ReactCompositeComponent.js:405ReactReconciler.receiveComponent @ ReactReconciler.js:87ReactCompositeComponentMixin._updateRenderedComponent @ ReactCompositeComponent.js:562ReactCompositeComponentMixin._performComponentUpdate @ ReactCompositeComponent.js:544ReactCompositeComponentMixin.updateComponent @ ReactCompositeComponent.js:473ReactCompositeComponent_updateComponent @ ReactPerf.js:66ReactCompositeComponentMixin.performUpdateIfNecessary @ ReactCompositeComponent.js:421ReactReconciler.performUpdateIfNecessary @ ReactReconciler.js:102runBatchedUpdates @ ReactUpdates.js:129Mixin.perform @ Transaction.js:136Mixin.perform @ Transaction.js:136assign.perform @ ReactUpdates.js:86flushBatchedUpdates @ ReactUpdates.js:147ReactUpdates_flushBatchedUpdates @ ReactPerf.js:66Mixin.closeAll @ Transaction.js:202Mixin.perform @ Transaction.js:149ReactDefaultBatchingStrategy.batchedUpdates @ ReactDefaultBatchingStrategy.js:62batchedUpdates @ ReactUpdates.js:94ReactEventListener.dispatchEvent @ ReactEventListener.js:204
```
"
,,,https://github.com/facebook/react/issues/6446,6446,Typing in middle of controlled text field jumps to end,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,2,2016-04-08T01:10:24Z,2016-04-08T01:11:38Z,2016-04-08T01:11:22Z,MEMBER,completed,,"Repro:
Go to http://facebook.github.io/react/
Scroll to TODO example
Type anything into the input field
Click in the middle of the text and type another character. Notice the cursor jumps to the end of the text field.
"
,,,https://github.com/facebook/react/issues/6630,6630,Refs to components not working in 15.0.1,[],closed,False,,0,2016-04-27T16:06:14Z,2016-04-27T16:07:56Z,2016-04-27T16:07:56Z,NONE,completed,,"Refs to components using the inline function are not working. The ref returns `undefined` in the `componentDidMount` lifecycle method.  

`ref={ c => this.domElement = c } >`

However, using the alternate method to do refs, the element is returned as expected:

ref=""domElement""
"
,,,https://github.com/facebook/react/issues/6548,6548,Upgrade addons from 14.x ,[],closed,False,,4,2016-04-19T09:25:10Z,2016-04-19T14:42:00Z,2016-04-19T14:37:26Z,NONE,completed,,"After upgrading to react `15.0.1` I get the following error when running `npm install`

```
npm WARN react-addons-css-transition-group@0.14.8 requires a peer of react@^0.14.8 but none was installed.
npm WARN react-addons-update@0.14.8 requires a peer of react@^0.14.8 but none was installed.
```

I think it is due to these two add-ons I include:

```
""react-addons-css-transition-group"": ""^0.14.7"",
""react-addons-update"": ""^0.14.7"",
```

I would intuitively upgrade them to

```
""react-addons-css-transition-group"": ""^0.15.1"",
""react-addons-update"": ""^0.15.1"",
```

But since it is a ""breaking change"" in version, I'd like to check up the changelog with each addon to ensure that I do not have any code that will break. However, I cannot find any changelog or gitrepo belonging to theese add-ons. What is the right approach here? Should we simply follow the react version number every time?

Thanks in advance; a bit lost here.
"
,,,https://github.com/facebook/react/issues/6621,6621,Ability to hide component from devTools,[],closed,False,,1,2016-04-26T16:47:55Z,2016-04-26T21:54:54Z,2016-04-26T21:54:54Z,CONTRIBUTOR,completed,,"The React DevTools are great, but get convoluted when using community libraries at times (e.g., react-router, redux, coflux). Could there be a blessed API that allows components to not show in the Dev Tools? Something simple like:

``` js
const Component = () => { ... };
Component.devTools = false;
```

When using the React DevTools, I generally just want to see my components and their business logic. Not things like `<RouterContext />` or `<Provider />`.

It is helpful to see those things at times though, so I don't imagine these components become completely opaque. But probably have a checkbox in DevTools (that defaults off), to show all components.

Assuming this is something you guys are too busy to do, if you like the concept, I can work on implementation.
"
,,,https://github.com/facebook/react/issues/6652,6652,"` ""0"" is not a valid style property ` at StyleSheet transform:(",[],closed,False,,0,2016-04-29T15:06:41Z,2016-04-29T15:09:00Z,2016-04-29T15:09:00Z,NONE,completed,,
,,,https://github.com/facebook/react/issues/6466,6466,multiple checkbox/toggle affecting state,[],closed,False,,3,2016-04-09T08:10:24Z,2016-04-10T11:51:06Z,2016-04-09T12:01:43Z,NONE,completed,,"hi guys, 

I am experiencing _strange_ behaviour, if I have couple of checkboxes. 
It behaves that other checkbox change state of other after selecting. Below is a snippet for the reference.

On other hand, I might overlooked something, but cannot see it :( 
any advise would be great.

``` javascript

import { default as React, PropTypes } from 'react';
import mui from 'material-ui';

import getMuiTheme from 'material-ui/lib/styles/getMuiTheme';
import Checkbox from 'material-ui/lib/checkbox';

let injectTapEventPlugin = require('react-tap-event-plugin'); 

  const styles = {
  block: {
    maxWidth: 150,
  },
  checkbox: {
    marginBottom: 1,
  },
    toggle: {
    marginBottom: 1,
  },
};

  class IoTable extends React.Component {

  constructor(props) {
    super(props);

    this.state = {
      camera: props.camera,
      wifi: false,
      router: false,
      cameraText: toString(props.camera),
    };
    this.handleChange = this.handleChange.bind(this);
  }

  getChildContext() {
      return {
          muiTheme : getMuiTheme()
      }
  }
  componentWillMount() {
    injectTapEventPlugin();
  }

  handleChange() {
        this.setState(
            {
            camera: !this.refs.cameraInput.state.switched,
            router: !this.refs.routerInput.state.switched,
            // wifi: this.refs.wifiInput.state.switched,
            } 
          );

        var text = String(!this.refs.cameraInput.state.switched);
        this.setState({cameraText: text});

          console.log(""refs.camera.switched: "" + !this.refs.cameraInput.state.switched);
          console.log('camera: ' + this.state.camera); 
  }

  render() {

    return (
      <div>
      <h2>IO State</h2>

      <div>this.state.camera: {this.state.cameraText}</div>
          <div style={styles.block}>
            <Checkbox
            label=""Camera"" 
            onTouchTap={this.handleChange}
            ref=""cameraInput""
            style={styles.toggle}
            defaultToggled={this.props.camera}
            />
          </div>

          <div style={styles.block}>
            <Checkbox
            label=""Router""
            onTouchTap={this.handleChange}
            ref=""routerInput""
            style={styles.toggle}

            />
          </div>

    </div>
    );
  }
}

  IoTable.PropTypes = {
    camera: PropTypes.bool,
    cameraText: PropTypes.string,
  };

  IoTable.defaultProps = {
    camera: true,
    cameraText: '',
  }

IoTable.childContextTypes = {
   muiTheme: React.PropTypes.object
};

export default IoTable;
```
"
,,,https://github.com/facebook/react/issues/6414,6414,'Warning: ' messages should use console.warn(),[],closed,False,,1,2016-04-05T19:00:01Z,2016-04-05T19:21:37Z,2016-04-05T19:21:37Z,NONE,completed,,"Currently they use console.error(), which overestimates their severity and causes devs to react more strongly than the message might imply.

Example:

```
warning.js:45 
Warning: Failed propType: Invalid prop `things` of type `array` supplied to `Item`, expected `object`. Check the render method of `Connect(Item)`.
```
"
,,,https://github.com/facebook/react/issues/6421,6421,npm install --save react-dom throws error,[],closed,False,,8,2016-04-06T09:21:05Z,2016-04-06T20:54:06Z,2016-04-06T20:54:06Z,NONE,completed,,"$ npm install --save react-dom
npm http GET http://registry.npmjs.org/react-dom
npm http 200 http://registry.npmjs.org/react-dom
npm ERR! registry error parsing json
npm ERR! SyntaxError: Unexpected token 
npm ERR! �Y�n�F�B��(�/z2���@�iҗ�u�2+�M�������~Iϒ�.�jI�� �dK�;;�3s�
                                                                             ��W�b(��>K�,I""�H�ga�G1ϗQ�Lz!�lF�%����U��7vg�f��M�QU��U͍.'Νn�N;%��o�]l%�i�-������`-����Gnf5�G�ۏ]����p�����-5�:,u=+�è��~C���-3a���Ü��.~p�V��������c���D�o�Xt��!ǰR�
       ���awd�9S* h����i�lX�s��,���fl���
                                         �E��%Du5s��k���n�fawh�u�D���7Vjڶ��F�ι+��h���Vau�
            ��¸�8\�����QGژ9��ЂJcu���-���r@""f���ØM�?/��M����և�n_QM��Rh�    W�Jڍ�.)8�,��N��
npm ERR! ��B���٥����UQ!DvY�'S�������T��#S��'z��>���֙)3��ND/~&�He$�<
g�fL���-�ٵq�f��h��>�Ի��Sg�j����B�
npm ERR! �����ۃ��w�v$%r�Of��P��������I������!|[�y
                                                      �W�tV_Q\�p��Y�w�we�
                                                                          �M�)�8vdA[)����ئ fH^8u��ѥi1C�:8���k��=��l#�>߾ �V��&������8�ˬ�3'.�����
                                                                         {H�a+(&�W�M�6�|���?��j*��=��lP�Ӽ�@�m�F3fZj�p��H�-���GmE���22����r���G��/�h�7�v��1��Lʘ�G�H<����(��
npm ERR! ϓ�Ra�q[�P>MU�v٭tAc>ׅ-+�Yö,�/��o���g��3�'xnw�0nj-ט��7��fKUkK�u���� �|�Y���f�Ⲃ3Q��Y���h��o��n>�.WQ�gM���{p
                                              ��
                                                  ��ڌ��xWÑ�`b$�����T��\�@�I�@x��C���i??   ��$��� R����B/�~��e7
���C�^h����]z��k���ODz�u��""��2z⾟s�\�<�N�L��!���
                                  ��O�\�I $'��a�q�sJ�s���~-̏p��0G�����_������O�'�6ȫ��D@i0�2�$󼜥      .�����eQn�;^������z��%��   �{�����ɘރ�
                                                                           ��X�{�v�>��m����<ͳؓ���-Ty.T�e��i�d.)��g/������[�n�@�������<��ڛƝ�����5Q��
npm ERR! ��3�N'Nc����%�_+�q����d9�g�s��0=�ʵ���&2k+��(�+��sҌ��\J)��Bx΂��&!�@�A[��/x�&L���n)��8�gT��cd��v��M|���ē��iYw�.#�۽#)_�(ph|@
                                                       a٪&��;&UЙ㢻w���s�ٳ�$]��|WơϹ��b""�[z�]l@)������%��?ؽ�3�gT��j�z��������sZ�a:߭�-u�Ip��V6ܘd1$k��dh��M���&c[��C��u��m+3�\
                      j}�d�?��&������}7�z
                                          ���W(���郞�N*֐V�(��R{�Ddx�
                                                                      kT$v͗N����&�e�}�>�f5&d`Z�c��[�Q������k-��t�>'Ԏ�<�������ш `$ki��&i���i[x

```
                                                                   �v��ڑ=�䥵
```

  '��_�O�׏6��a��܅�=e7r�%�l`�����FE?""�7������'�
                                                 ��S6�/�>���S4n|���]g����6Я�K{A(^�Xfܕ�V��M�U>8}�8���[���#e��o��J���C��PXu��8_���2�1 
npm ERR! #�|""ݓOq����=�TF rJ�}`[+�Fc,�SQ�[Mj\�?�c�A���k�*�Z�7�����y/gQ��� #��Ab$����ԡ`�bڟ��mq���,w��{��_���\�n�F�""~�D4ﷺA�6E���HT(X+�i�K������%w%+N�q�b������,9�]Ξ��u�RV�`��$��lV��Z�^ M(�����#��*�@}l�T��ٶ���� ��JV/gt�|��&Ez�挿�Y�]�]��2=5ʣ�I�&""
npm ERR! �SD
            L��=�qDD��\����l_|O�8""��������y�������8��~�f�M�:���X�=�}s��f`�p���mx���7�8�D��#��#������L��""��D>oڄ#r���)腖����ڔ�(�ín�&6*l��q��t�|0�1'�T���t�'|���Aƈ���eiSL�A���*��`}��1 ��xOBM�2+�f��]��A..$Z[�QװrNv�39[�z��qO,�R��w@Q��r���ۥ4�� $�:i{r�]�""禮�t�d�}��τ�
                                                ��[��d��D   �fu��僰�f�׬h/���L8}.����w{����A�� �
                         �4�����\U�����4�p}�;������hQ��j��'���۴(_���.��3����W�[�O�r�!�ů��5����H���igI������������A��r�/G��
                                   7�����xYu�U�y�8�_���)b
npm ERR! �
_!��V��D�)�""ʶ9E��ge���\�~X���
                              {d�cӋ�0rQ����e1��'������f�ad{��Bp�V   ʎa�7�H�d[��5�u�D=��
                     H�eF����:RA�I�%.�YkX8  LWX+��%.Pql��c]�
 �!ˊRR! v�_9�X����me���4G�5&��j8]�4:G5������EN������.��
     �t6�@aP�t�q��ׂg)
                    ����>�؂�,�鶒���fk��N$n
                                         �M%_m�<���
                                                   #
                                                    �x�٭�g�[Ɔ�pCwl!l<&�&4��@�����ؿ�ըܯxM�3� ��ץ,�W62�s;|�y����%r��@�3,�߽�����^R�""������""�X3�   h�.�Y�%��o�R]����o�7��N������A���l�g`��E'l�'1>@�Կ���1�}�x����a���Y�nPe-�7K�c<��fö���̨�W7�l)�뤪g��D����c�z��%g�j����d3]3n)����N�4������Y   UX���y�*wc��'�c%e�֛�Ҡ��Th��YëVY~S[:��_[��ހ�0����
npm ERR! ���
            ��`���*���l���^Yց�h  �a|D�^��|�P6��D���jd�yz�T�}K��\!`�a7,]����Q��󟼎����r�Ԡ��kֶ,�J�yt���
npm ERR!     at Object.parse (native)
npm ERR!     at RegClient.<anonymous> (/usr/share/npm/node_modules/npm-registry-client/lib/request.js:238:23)
npm ERR!     at Request.self.callback (/usr/lib/nodejs/request/index.js:148:22)
npm ERR!     at Request.EventEmitter.emit (events.js:98:17)
npm ERR!     at Request.<anonymous> (/usr/lib/nodejs/request/index.js:896:14)
npm ERR!     at Request.EventEmitter.emit (events.js:117:20)
npm ERR!     at IncomingMessage.<anonymous> (/usr/lib/nodejs/request/index.js:847:12)
npm ERR!     at IncomingMessage.EventEmitter.emit (events.js:117:20)
npm ERR!     at _stream_readable.js:920:16
npm ERR!     at process._tickCallback (node.js:415:13)
npm ERR! If you need help, you may report this log at:
npm ERR!     http://github.com/isaacs/npm/issues
npm ERR! or email it to:
npm ERR!     npm-@googlegroups.com

npm ERR! System Linux 3.19.0-56-generic
npm ERR! command ""/usr/bin/nodejs"" ""/usr/bin/npm"" ""install"" ""--save"" ""react-dom""
npm ERR! cwd /home/karir/Code/latihan/reactjs
npm ERR! node -v v0.10.25
npm ERR! npm -v 1.3.10
npm ERR! type unexpected_token
npm ERR! 
npm ERR! Additional logging details can be found in:
npm ERR!     /home/karir/Code/latihan/reactjs/npm-debug.log
npm ERR! not ok code 0

The problem is the json in http://registry.npmjs.org/react-dom has some funny characters:

{""_id"":""react-dom"",""_rev"":""74-1a738664f6df983414e4a01d482b8d03"",""name"":""react-dom"",""description"":""React package for working with the DOM."",""dist-tags"":{""latest"":""0.14.8"",""next"":""15.0.0-rc.2""},""versions"":{""0.1.0"":{""name"":""react-dom"",""version"":""0.1.0"",""description"":""DOM is a `React.DOM` wrapper with â€” subjectively â€” more sanity and awesome helpers"",""author"":....

The funny characters are located beside the word ""subjectively"".

$ npm --version
1.3.10
$ nodejs --version
v0.10.25
"
,,,https://github.com/facebook/react/issues/6477,6477,Immediately setting a disabled attribute on form submit button using `setState` caused no form submission to take place,[],closed,False,,1,2016-04-11T01:44:27Z,2016-04-11T02:52:01Z,2016-04-11T02:47:02Z,NONE,completed,,"I have a form with a submit button. When the user clicks submit my `handleSubmit` function calls     `this.setState({ submissionTakingPlace: true })`, the re-render then sets a disabled attribute on the submit button. 

```
<button
 type=""submit""
 onClick={this.handleSubmit}
 disabled={this.state.submissionTakingPlace}
>
```

In Chrome and Safari the network tabs shows that no POST request even starts? In Firefox the POST occurs. Note I have the same behaviour when I use a `<input>` over a `<button>`.

Here is a Codepen [example](http://codepen.io/anon/pen/GZQNZe). Issue occurs on the latest version of React 15.0.1.

Apologies if this is a browser quirk vs a React issue but me and a colleague were pretty confused by it.
"
,,,https://github.com/facebook/react/issues/6485,6485,CSS Transition Group - peer dependencies error,[],closed,False,,2,2016-04-11T11:17:01Z,2016-04-11T15:59:38Z,2016-04-11T15:58:38Z,NONE,completed,,"Hi, when I try installing react addons transition group I get a peer dependeincies error. I think its because transition group still depends on react-addons-clone-with-props while React now has React.createElement. Error below:

> npm i react-addons-css-transition-group
> npm WARN package.json @ No description
> npm WARN package.json @ No repository field.
> npm WARN package.json @ No README data
> npm WARN package.json @ No license field.
> npm ERR! Windows_NT 6.3.9600
> npm ERR! argv ""C:\Program Files\nodejs\\node.exe"" ""C:\Program Files\nodej
> \node_modules\npm\bin\npm-cli.js"" ""install"" ""react-addons-css-transition-gr
> up"" ""--save""
> npm ERR! node v0.12.4
> npm ERR! npm  v2.10.1
> npm ERR! code EPEERINVALID
> npm ERR! peerinvalid The package react does not satisfy its siblings' peerDepen
> encies requirements!
> npm ERR! peerinvalid Peer react-dom@15.0.1 wants react@^15.0.1
> npm ERR! peerinvalid Peer react-addons-clone-with-props@0.14.8 wants react@^0.1
> .8
> npm ERR! peerinvalid Peer react-addons-css-transition-group@15.0.1 wants react@
> 15.0.1
"
,,,https://github.com/facebook/react/issues/6424,6424,componentDidUnmount functionality (in addition to componentWillUnmount),"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":739777675,""node_id"":""MDU6TGFiZWw3Mzk3Nzc2NzU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API"",""name"":""Component: Component API"",""color"":""d4c5f9"",""default"":false,""description"":null}]",closed,False,,19,2016-04-06T15:18:13Z,2020-01-09T19:18:57Z,2020-01-09T19:18:57Z,NONE,completed,,"It would be great if it was possible to run some code after the component actually unmounted. This is useful where you consider the following:

```
component Parent {
    has service Service
    has child Child

    componentWillUnmount: {
         destroys Service
    }

    render: {
         Service gets passed to Child as prop
    }
}

component Child {
    componentWillMount: {
         starts listening to Service
    }

    componentWillUnmount: {
         stops listening to Service
    }
}

```

The above will throw exception during Child componentWillUnmount since Parent gets unmounted first so Service is already destroyed.

If there existed componentDidUnmount the Service can be destroyed after the children are unmounted, i.e.

```
component Parent {
    has service Service
    has child Child

    componentDidUnmount: {
         destroys Service
    }

    render: {
         Service gets passed to Child as prop
    }
}

component Child {
    componentWillMount: {
         starts listening to Service
    }

    componentWillUnmount: {
         stops listening to Service
    }
}

```
"
,,,https://github.com/facebook/react/issues/6651,6651,render() called before componentDidMount(),[],closed,False,,2,2016-04-29T09:39:50Z,2016-04-29T10:25:08Z,2016-04-29T09:42:14Z,NONE,completed,,"See

https://jsfiddle.net/mkfy6fbu/
"
,,,https://github.com/facebook/react/issues/6689,6689,Error boundaries crash on server rendering,[],closed,False,"{""url"":""https://api.github.com/repos/facebook/react/milestones/29"",""html_url"":""https://github.com/facebook/react/milestone/29"",""labels_url"":""https://api.github.com/repos/facebook/react/milestones/29/labels"",""id"":1827859,""node_id"":""MDk6TWlsZXN0b25lMTgyNzg1OQ=="",""number"":29,""title"":""15.2.0"",""description"":"""",""creator"":{""login"":""zpao"",""id"":8445,""node_id"":""MDQ6VXNlcjg0NDU="",""avatar_url"":""https://avatars.githubusercontent.com/u/8445?v=4"",""gravatar_id"":"""",""url"":""https://api.github.com/users/zpao"",""html_url"":""https://github.com/zpao"",""followers_url"":""https://api.github.com/users/zpao/followers"",""following_url"":""https://api.github.com/users/zpao/following{/other_user}"",""gists_url"":""https://api.github.com/users/zpao/gists{/gist_id}"",""starred_url"":""https://api.github.com/users/zpao/starred{/owner}{/repo}"",""subscriptions_url"":""https://api.github.com/users/zpao/subscriptions"",""organizations_url"":""https://api.github.com/users/zpao/orgs"",""repos_url"":""https://api.github.com/users/zpao/repos"",""events_url"":""https://api.github.com/users/zpao/events{/privacy}"",""received_events_url"":""https://api.github.com/users/zpao/received_events"",""type"":""User"",""site_admin"":false},""open_issues"":0,""closed_issues"":99,""state"":""closed"",""created_at"":""2016-06-14T23:46:55Z"",""updated_at"":""2016-07-07T17:24:49Z"",""due_on"":null,""closed_at"":""2016-07-01T21:56:28Z""}",0,2016-05-03T11:30:31Z,2016-06-14T23:49:03Z,2016-05-06T23:54:06Z,MEMBER,completed,,"`ReactServerRenderingTransaction` doesn’t have a `checkpoint()`, so any component with `handleError()` crashes during server rendering. I tested on 15, but pretty sure this is in master as well.

Fiddle: https://jsfiddle.net/un1nqs0w/

cc @jimfb 
"
,,,https://github.com/facebook/react/issues/6910,6910,TypeScript definitions,[],closed,False,,5,2016-05-28T00:56:04Z,2016-06-16T01:55:52Z,2016-06-16T01:55:41Z,CONTRIBUTOR,completed,,"There are no official or blessed TypeScript definitions for React and ReactDOM (and Jest).

There are definitions in DefinitelyTyped repo: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/react/react.d.ts
https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/react/react-dom.d.ts
(and https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/jest/jest.d.ts)

But these type definitions are outdated and DefinitelyTyped is outdated too in favour of [Typing](https://github.com/typings/typings) which has some [advantages](https://github.com/typings/typings/blob/master/docs/external-modules.md) over DT.

I want to create type definitions for Typings and create a PR to use them instead of hardcoded, poor-quality definitions from React repo ([1](https://github.com/facebook/react/blob/master/src/isomorphic/modern/class/React.d.ts), [2](https://github.com/facebook/react/blob/master/src/isomorphic/modern/class/ReactDOM.d.ts), [3](https://github.com/facebook/react/blob/master/scripts/jest/jest.d.ts)). This will help to reuse type definitions [for React repo](https://github.com/facebook/react/blob/master/scripts/jest/ts-preprocessor.js#L30-L57) and any React applications made by TypeScript developers.

My current plan is to create up-to-date Typings TypeScript definitions for each
- [ ] React 
- [ ] ReactDOM

No plans for Jest because I prefer `tape`.

So before I start...

Do you prefer type definitions to be official or community-driven?
Do you have any suggestions or corrections to my plan? 
"
,,,https://github.com/facebook/react/issues/6887,6887,ensureScrollValueMonitoring issue,[],closed,False,,17,2016-05-26T10:32:12Z,2016-08-31T14:25:18Z,2016-08-31T14:25:18Z,CONTRIBUTOR,completed,,"By having our app wrapped with Sentry (error catching service) we've encountered a bug - which may not be React specific but some kind of a workaround for it should be done. With that in mind I'm not sure how to tackle it yet.

https://github.com/facebook/react/blob/1573baaee8ba1c9cd84145b01effcb5eb80503fb/src/renderers/dom/client/ReactBrowserEventEmitter.js#L363

`TypeError: Cannot use 'in' operator to search for 'pageX' in null` - which occurs during mounting a root component into the DOM (using React 15)

It happens really rarely in Chrome (so far caught only there, on versions 49 and 50, both Mac and Windows). With thousands renders of our app daily we got only 7 such hits in the past 3 days.

I've tried to search any info how `document.createEvent('MouseEvent')` can return `null`, but couldn't find any viable info.

With React's popularity is odd too me that nobody has filled this issue earlier which leds me to think that maybe our usage is somehow different than others and the only thing 'kinda' special is that our app is running inside an iframe.
"
,,,https://github.com/facebook/react/issues/6916,6916,Form disappears without calling onSubmit,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,2,2016-05-30T08:16:57Z,2018-08-03T23:54:41Z,2018-08-03T23:54:40Z,NONE,completed,,"**Do you want to request a _feature_ or report a _bug_?**
Report a bug

**What is the current behavior?**
When a form element disappears as the result of a state change (e.g., triggered by an onClick handler on the submit button), its onSubmit handler is not called. In HTML, even if a form element is removed from the DOM, its onSubmit handler is still called.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**
Plain JS + HTML version (expected behavior): https://jsfiddle.net/b22925dw/
Reproduced in React: https://jsfiddle.net/yaf6p0ga/1/
_The commented-out setTimeout in the react code is a usable hack to fix it for the time being_

**What is the expected behavior?**
The code specified in the form's onSubmit should be executed before the form disappears.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 15.0.2 / Chrome 51.0.2704.63 (64-bit) / OS X 10.11.5
"
,,,https://github.com/facebook/react/issues/6676,6676,DOM property case warning is broken for non-SSR,"[{""id"":178761159,""node_id"":""MDU6TGFiZWwxNzg3NjExNTk="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Regression"",""name"":""Type: Regression"",""color"":""e11d21"",""default"":false,""description"":null}]",closed,False,,0,2016-05-02T17:36:00Z,2016-05-17T22:06:31Z,2016-05-17T22:06:31Z,COLLABORATOR,completed,,"#6585
"
,,,https://github.com/facebook/react/issues/6795,6795,Create Separate Copies of Each Renderer,[],closed,False,,10,2016-05-18T18:01:08Z,2017-04-04T19:06:14Z,2017-04-04T19:06:14Z,COLLABORATOR,completed,,"A simple plan:

1) Copy all files to each renderer package.

2) Rewrite any require to the files in the isomorphic folder to `require('react/lib/MyFileName')`. (Hardcode a whitelist if needed.)

That way they all share isomorphic modules but none of the other files.

That way versioning separate renderers is easy and doesn't depend on everyone updating their `react` peer dependencies.
"
,,,https://github.com/facebook/react/issues/6784,6784,Add option to ignore specified props in shallowCompare,[],closed,False,,2,2016-05-16T22:00:36Z,2016-05-16T22:40:44Z,2016-05-16T22:35:52Z,NONE,completed,,"[feature request/question]
Consider a component that has a stateless functional component (SFC) as prop, e.g. like this: 

``` jsx
<MyComponent component={(props) => <div>{props.title}</div>;} />
```

Using `shallowCompare` in `shouldComponentUpdate` of `MyComponent` would always return `true`, but there are cases when it makes sense to use `shallowCompare` on all props except those with SFCs, like in this [issue](https://github.com/erikras/redux-form/issues/961#issuecomment-219531194) in [`redux-form`](https://github.com/erikras/redux-form), which had this [solution](https://github.com/erikras/redux-form/pull/981):

``` javascript
shouldComponentUpdate(nextProps) {
  const propsWithoutComponent = { ...this.props }
  const nextPropsWithoutComponent = { ...nextProps }
  delete propsWithoutComponent.component
  delete nextPropsWithoutComponent.component
  return shallowCompare({ props: propsWithoutComponent }, nextPropsWithoutComponent)
}
```

While I have no idea how common this pattern is or will be, I saw that `context` is [about to be added](https://github.com/facebook/react/pull/6661) to `shallowCompare` and I thought maybe it would be possible to add an option to make `shallowCompare` ignore one or several props?

E.g. the signature could be like this instead:

``` javascript
function shallowCompare(instance, { nextProps, nextState, nextContext, propsToIgnore })
```

where `propsToIgnore` could be an array of string keys. (To avoid a breaking change,  `propsToIgnore` could of course be added as the fifth argument instead, but this seems more robust to me.)

If this makes sense to you, I could have a go at a PR for this.
"
,,,https://github.com/facebook/react/issues/6747,6747,Attributes on custom elements are not removed during the diff,[],closed,False,,0,2016-05-11T10:19:09Z,2016-05-13T00:00:04Z,2016-05-13T00:00:04Z,CONTRIBUTOR,completed,,"We are trying to adopt custom elements for some parts of your UI and ran into the issue that during an update to the tree, custom attributes on the the custom elements are not removed correctly as can be seen here: http://jsbin.com/ferohipaje/edit?html,output (you will need to click on ""false"" and then inspect the DOM node in the dev tools of the browser).

I've tracked the issue to the `_updateDOMProperties` method in `ReactDOMComponent.js`. It seems that there is a special check in the loop for `nextProps`:

``` js
else if (isCustomComponent(this._tag, nextProps)) {
  if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
    DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
  }
}
```

But the corresponding section is missing for `lastProps` (deleting), which results in the incorrect behavior.

I'm starting the work on the patch.
"
,,,https://github.com/facebook/react/issues/6879,6879,"React.createElement(type, { key: undefined }) is handled incorrectly","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,0,2016-05-25T23:07:00Z,2016-05-26T00:41:32Z,2016-05-26T00:41:32Z,MEMBER,completed,,"I believe #5744 introduced a behavioral difference between development and production versions of React. We released it as a part of 15.0, and this difference still exists.

The production behavior hasn’t changed. However the development behavior diverged after this change.

``` js
var el = React.createElement('div', { key: undefined })
document.body.innerHTML = (typeof el.key) + ' ' + el.key
```

What do you expect to appear?
### 0.14.x
- Development (https://jsfiddle.net/sjLcmnq6/1/): `object null`
- Production (https://jsfiddle.net/qro1wck0/1/): `object null`
## 15.x
- Development (https://jsfiddle.net/69z2wepo/43538/):  **`string undefined`**
- Production (https://jsfiddle.net/rakg6uwy/1/): `object null`

The 15.x dev behavior is different because [dev code path only checks the existence of a property but not whether it’s undefined](https://github.com/alitaheri/react/blob/c3980a6d08257d39a08bed8b116d53a56344166b/src/isomorphic/classic/element/ReactElement.js#L130-L133) whereas the [prod code path checks for undefined explicitly](https://github.com/alitaheri/react/blob/c3980a6d08257d39a08bed8b116d53a56344166b/src/isomorphic/classic/element/ReactElement.js#L135-L136).

`React.cloneElement()` is not affected because it doesn’t include those warnings.

---

This doesn’t seem like a major problem (nobody noticed it!) in the real world, but I think we should fix this.
I have a related fix in the works so I’ll add some more tests and include it.
"
,,,https://github.com/facebook/react/issues/6926,6926,Warn for all unsupported lifecycles in stateless Components,"[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null}]",closed,False,,8,2016-05-31T03:24:40Z,2016-06-08T20:32:43Z,2016-06-08T20:32:43Z,NONE,completed,,"Example: https://jsfiddle.net/gingur/u0h2rjae/1/

When generating **child context** with a stateless Component, the context is not available to the children.
"
,,,https://github.com/facebook/react/issues/6985,6985,"Render component only on the server, without ""mounting"" on the client",[],closed,False,,19,2016-06-07T14:55:36Z,2020-12-21T19:03:40Z,2016-06-10T12:16:48Z,NONE,completed,,"Is it possible to have a ""frozen"" component, that is rendered only on server-side, without being processed on the client side? (without calling the render-cycle again). 
Let's say I have a CMS, that statically generates HTML on the server (a legacy system), but I want to use react to render the output inside my component structure.

``` javascript
<Root>
  <ComponentA/>
  <CmsBlock id=""staticMarkupId""/>
  <ComponentB/>
</Root>
```

To prevent the HTML to be exposed twice, I will provide the information only on the server side.
The HTML can be quite big, and I don't want to have them on the client site again.

Right now, I don't see a way to tell react, to prevent calling the render method on a component again.
What I did, is this ugly workaround (react complains about a checksum mismatch though):

``` javascript
/**
 * @flow
 */

import React, { Component, Element } from 'react';

type Props = {
  id:string,
  className?:string
}

type State = {
  markup:Object
}

export default class CmsBlock extends Component<void, Props, State> {

  props:Props;

  state:State;

  constructor(props:Props) {
    super(props);
    const { id } = props;
    const createMarkup = contentId => {
      return {
        __html: global.__CMS_CONTENT__ && global.__CMS_CONTENT__[contentId] ? global.__CMS_CONTENT__[contentId] :
          !global.__CMS_CONTENT__ && global.document ?
            // FIXME: WTF?
            global.document.querySelector(`[data-cms-id=""${contentId}""]`).innerHTML :
            `CMS Block ID <strong>${contentId}</strong> does not exist.`
      };
    };

    this.state = {
      markup: createMarkup(id)
    };
  }

  shouldComponentUpdate() {
    // is not called on initial ""client-mounting""
    return false;
  }

  render():Element {
    const { className, id } = this.props;
    return (
      <div data-cms-id={id} className={className} dangerouslySetInnerHTML={this.state.markup}/>
    );
  }
}

```

I used React 15.1.0.
"
,,,https://github.com/facebook/react/issues/7136,7136,"Refs - ""object is not extensible""",[],closed,False,,15,2016-06-28T08:34:32Z,2021-05-31T04:42:32Z,2016-06-28T10:00:31Z,NONE,completed,," I wanted to drop my string-based refs bindings and replace them with callback-based ones, however, when I tried to replace `ref=""email""` with `ref={ (ref) => this.refs.email = ref }`, I received an error: `TypeError: Can't add property email, object is not extensible`.

I didn't find any informations about this in docs, but I found other [issue](https://github.com/facebook/react/issues/4934) in which @frederickfogerty did what I tried to do: `ref={ c => this.refs['wrapper'] = c }`

... and I assume that back in 22 Sep 2015 it worked, now it doesn't. Did something change and refs object became nonextensible? Is assigning refs manually through callbacks to `this.refs` considered a bad practice now?
"
,,,https://github.com/facebook/react/issues/7004,7004,[Bug] CSSPropertyOperations.setValueForStyles does not check for `undefined` component argument,[],closed,False,,8,2016-06-09T09:27:08Z,2016-06-10T12:43:21Z,2016-06-09T11:13:50Z,NONE,completed,,"Version: 15.1.0

```
setValueForStyles: function(node, styles, component) {
    if (__DEV__) {
      ReactInstrumentation.debugTool.onHostOperation(
        component._debugID,
        'update styles',
        styles
      );
    }
```

https://github.com/facebook/react/blob/ba9b985406ff56c2dea192b119328b6096895097/src/renderers/dom/shared/CSSPropertyOperations.js#L195

All other code in that component is tolerant about a missing `component` argument.
This changed introduced a breaking bug in https://github.com/adambbecker/react-style-transition-group and the way it calls `CSSPropertyOperations.setValueForStyles` without a `component`.
"
,,,https://github.com/facebook/react/issues/7156,7156,Setting autoFocus on an input warns.,[],closed,False,,1,2016-06-30T17:18:35Z,2016-06-30T17:48:05Z,2016-06-30T17:48:05Z,NONE,completed,,"**Do you want to request a _feature_ or report a _bug_?**
Bug

**What is the current behavior?**
Warns when `autoFocus` is set

**Steps to reproduce**
1. Render an input with the autoFocus prop set
2. See that it spit out a warning

Demo: https://jsfiddle.net/2wgv7ws1/

**What is the expected behavior?**
Setting `autoFocus` should not warn when set on a `<input>`.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
I am seeing this warning in the 15.2.0 rc. It did not warn in 15.1.0.
"
,,,https://github.com/facebook/react/issues/7108,7108,Documentation for this.state mutation seems contradictory,[],closed,False,,3,2016-06-23T17:28:42Z,2016-06-23T19:44:36Z,2016-06-23T19:44:36Z,NONE,completed,,"In the documentation for the [component API](https://facebook.github.io/react/docs/component-api.html) , it says:

`NEVER mutate this.state directly, as calling setState() afterwards may replace the mutation you made. Treat this.state as if it were immutable.`

However, the documentation for [ES6 Classes](https://facebook.github.io/react/docs/reusable-components.html#es6-classes) says:

`The API is similar to React.createClass with the exception of getInitialState. Instead of providing a separate getInitialState method, you [can mutate] this.state in the constructor.`

Perhaps it would be possible to make this exception to `this.state` mutation more clear?
"
,,,https://github.com/facebook/react/issues/6952,6952,Distribute compiled files on NPM package,[],closed,False,,2,2016-06-02T13:14:13Z,2016-06-02T18:03:04Z,2016-06-02T18:03:04Z,NONE,completed,,"Right now, the NPM package just distributes files that are good to be used with Node.js. You must precompile them with some build system before you can use them.

Would be really nice to have the same files of the [Bower package](https://github.com/reactjs/react-bower) distributed in a `dist` directory (both react.js and react-dom.js) or something like that, as NPM is now also being used for client-side package management.
"
,,,https://github.com/facebook/react/issues/6932,6932,Return `null` from mocked functional components.,[],closed,False,,11,2016-06-01T03:14:39Z,2017-10-04T00:24:15Z,2017-10-04T00:24:15Z,CONTRIBUTOR,completed,,"We do this for classes but not for functional components, see https://github.com/facebook/react/blob/db6ac5c01c4ad669db7ca264bc81ae5b3d6dfa01/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js#L1042-L1045

This leads to a lot of issues and confusion for people using Jest. I realize this is maybe not the greatest implementation ever, but since we support it for one but not the other, we should align the implementation and add this until we find a better way to deal with this.

This should be easy to add somewhere around here: https://github.com/facebook/react/blob/6b1232aa86415f0573153888a46c4c5cb38974d8/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js#L210

@spicyj 
"
,,,https://github.com/facebook/react/issues/7146,7146,Allow indirect children in ReactTransitionGroup,[],closed,False,,1,2016-06-29T17:09:56Z,2016-06-29T19:34:01Z,2016-06-29T19:34:01Z,NONE,completed,,"`ReactTransitionGroup` calls transition-related lifecycle hooks like `componentWillLeave` on its direct children. This is inconvenient when a child component is wrapped by a third-party decorator such as `@connect` or `@injectIntl`, because the decorators may return their own components, the outermost of which will be the direct child of `ReactTransitionGroup` and receive the lifecycle calls.

Would it be possible to let descendants register themselves (in their constructors, for instance) to receive these calls? This would save app developers the hassle of writing a wrapper component that sits between `ReactTransitionGroup` and the animated child just to intercept the hooks and pass them on in the presence of intermediate wrapper components.
"
,,,https://github.com/facebook/react/issues/7122,7122,Polyfill MouseEvent.buttons for Safari,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,13,2016-06-26T02:51:13Z,2020-07-18T06:48:26Z,2020-07-18T06:48:26Z,NONE,completed,,"During mouse move event, 'e.buttons' returns 'undefined' in Safari.  Behaving correctly in Chrome.  While pressing the left mouse button and moving the mouse expect 'e.buttons' to return 1.  'e.nativeEvent.which' returns the correct result on Safari.

Sample Code:

``` javascript
import React from 'react';

export default class Canvas extends React.Component {
  constructor(props) {
    super(props);
  }

  mouseDown(e) {
    console.log(""mouse down"", e.buttons, e.nativeEvent.which);
  }

  mouseMove(e) {
    console.log(""mouse move"", e.buttons, e.nativeEvent.which);
  }

  mouseUp(e) {
    console.log(""mouse up"", e.buttons, e.nativeEvent.which);
  }

  render() {
    var canvasStyle = {
      backgroundColor: 'rgba(0, 0, 255, 0.5)',
      position: 'absolute',
      top: '0px',
      left: '0px',
      width: '100%',
      height: '100%'
    }

    return (
      <div>
        <canvas id=""canvas"" style={canvasStyle}
          onMouseDown={this.mouseDown.bind(this)}
          onMouseMove={this.mouseMove.bind(this)}
          onMouseUp={this.mouseUp.bind(this)}>
        </canvas>
      </div>
    );
  }
}
```

**Versions**
React: 15.1.0
Safari: 9.1.1 (11601.6.17)

**OS**
OS X El Capitan Version 10.11.5

**Computer**
Model Name: MacBook Air
Model Identifier:   MacBookAir6,2
Processor Name: Intel Core i7
Processor Speed:    1.7 GHz
Number of Processors:   1
Total Number of Cores:  2
L2 Cache (per Core):    256 KB
L3 Cache:   4 MB
Memory: 8 GB
"
,,,https://github.com/facebook/react/issues/6983,6983,New React.Perf eats a lot of CPU.,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,11,2016-06-07T09:03:23Z,2016-06-15T11:14:05Z,2016-06-09T21:00:41Z,NONE,completed,,"After migration to React 15.1.0 I noticed that my application is running slower than usual. Quick debug with Chrome profiler shows that  method `purgeUnmountedComponents` from `ReactComponentTreeDevtool` eats around 30% of my application time. On every mouse move or click method iterates over huge amount of elements. I don't know if that behaviour is desirable.

![reactperfcpu](https://cloud.githubusercontent.com/assets/2017454/15851913/54cbed52-2c9f-11e6-90bd-915aeb4e58a1.PNG)
"
,,,https://github.com/facebook/react/issues/7183,7183,Documentation : add a schema to illustrate the component lifecycle ?,[],closed,False,,1,2016-07-04T12:06:51Z,2016-10-23T13:57:11Z,2016-10-23T13:57:11Z,NONE,completed,,"[Peter Beshai](https://twitter.com/pbesh) has created a very good cheatsheet to illustrate the component lifecycle :

![component lifecycle cheatsheet](https://pbs.twimg.com/media/Cj3vEl2WUAAfNnL.png:large)

It could be useful to have a similar schema on the React documentation page about components : 
https://facebook.github.io/react/docs/component-specs.html
"
,,,https://github.com/facebook/react/issues/7372,7372,react automatically remove vendor prefix in inline style,[],closed,False,,2,2016-07-29T09:19:37Z,2018-11-01T10:42:19Z,2016-07-29T09:37:41Z,NONE,completed,,"**Do you want to request a _feature_ or report a _bug_?**
bug

**What is the current behavior?**
http://stackoverflow.com/questions/38630403/react-automatically-remove-vendor-prefix-in-inline-style

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**
https://jsfiddle.net/mv0dghf1/

**What is the expected behavior?**
react can render css vendor prefix

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
I tried v0.14.x and v0.15.x, the result is the same.
"
,,,https://github.com/facebook/react/issues/7227,7227,Performance regression for removing rows from large table,[],closed,False,,12,2016-07-08T19:57:35Z,2016-07-11T21:07:28Z,2016-07-09T10:50:36Z,NONE,completed,,"In my javascript frameworks benchmark I ran into a performance regression for react.
To reproduce open [the react.js 15.2 version](http://stefankrause.net/js-frameworks-benchmark2/react-v15.2.0/index.html) and open the console.
Repeat three times the following: Click ""Create 10,000"" then click ""Clear""
You'll get a result like that:
runLots took 1905.0000000000005
clear took **1997.0249999999996**
runLots took 1813.8500000000004
clear took **4208.895**
runLots took 1806.864999999998
clear took **401.119999999999**

Now repeat the same for [react.js 0.14.8](http://stefankrause.net/js-frameworks-benchmark2/react-v0.14.8/index.html) and you'll get something like that:
unLots took 2938.8900000000003
clear took **399.2250000000013**
runLots took 2726.365
clear took **383.45500000000175**
runLots took 2872.625
clear took **381.7250000000058**

(Measurement on Chrome 51 on MacOS 10.11.5 on a MBP 15)

Notice that clear is a lot slower for the first two runs for React v 15, but the third clear run performs about the same for both react versions.

The source code can be found in the [repository](https://github.com/krausest/js-framework-benchmark) of my benchmark. 
"
,,,https://github.com/facebook/react/issues/7384,7384,Implicit returns in a method,[],closed,False,,2,2016-07-31T03:28:32Z,2016-07-31T03:35:10Z,2016-07-31T03:34:42Z,NONE,completed,,"```
  arrowfunction() {
    const names = ['jon', 'tyler', 'henry'];
    const fullnames = names.map(name => `${name} bos`);
    return fullnames;
  }

```

Can I return this without using 'return fullnames'?
"
,,,https://github.com/facebook/react/issues/7350,7350,babel-node: ReactComponentTreeDevtool.js causes ReactDOMServer.renderToString to fail,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,"{""url"":""https://api.github.com/repos/facebook/react/milestones/32"",""html_url"":""https://github.com/facebook/react/milestone/32"",""labels_url"":""https://api.github.com/repos/facebook/react/milestones/32/labels"",""id"":1939863,""node_id"":""MDk6TWlsZXN0b25lMTkzOTg2Mw=="",""number"":32,""title"":""15.3.1"",""description"":"""",""creator"":{""login"":""zpao"",""id"":8445,""node_id"":""MDQ6VXNlcjg0NDU="",""avatar_url"":""https://avatars.githubusercontent.com/u/8445?v=4"",""gravatar_id"":"""",""url"":""https://api.github.com/users/zpao"",""html_url"":""https://github.com/zpao"",""followers_url"":""https://api.github.com/users/zpao/followers"",""following_url"":""https://api.github.com/users/zpao/following{/other_user}"",""gists_url"":""https://api.github.com/users/zpao/gists{/gist_id}"",""starred_url"":""https://api.github.com/users/zpao/starred{/owner}{/repo}"",""subscriptions_url"":""https://api.github.com/users/zpao/subscriptions"",""organizations_url"":""https://api.github.com/users/zpao/orgs"",""repos_url"":""https://api.github.com/users/zpao/repos"",""events_url"":""https://api.github.com/users/zpao/events{/privacy}"",""received_events_url"":""https://api.github.com/users/zpao/received_events"",""type"":""User"",""site_admin"":false},""open_issues"":0,""closed_issues"":35,""state"":""closed"",""created_at"":""2016-08-12T22:17:48Z"",""updated_at"":""2016-09-08T17:39:56Z"",""due_on"":null,""closed_at"":""2016-09-08T17:39:56Z""}",4,2016-07-25T15:22:56Z,2016-08-22T19:43:12Z,2016-08-22T19:42:33Z,NONE,completed,gaearon,"While following a server-side react tutorial, I encountered a runtime error caused by ReactComponentTreeDevtool. Specifically, the purgeDeep function seems to be problematic under certain conditions (react/lib/ReactComponentTreeDevtool.js line 47):

User Code:

<img width=""258"" alt=""screen shot 2016-07-24 at 3 49 40 pm"" src=""https://cloud.githubusercontent.com/assets/19496802/17106234/73aaee92-523f-11e6-9235-64d06ffeb31d.png"">

<img width=""532"" alt=""screen shot 2016-07-24 at 3 47 01 pm"" src=""https://cloud.githubusercontent.com/assets/19496802/17106241/7d085fe2-523f-11e6-86ee-b1eb8615945c.png"">

Stack Trace:

![screen shot 2016-07-24 at 3 41 00 pm](https://cloud.githubusercontent.com/assets/19496802/17106263/8c0a2a02-523f-11e6-94c2-342624793ecf.png)

Offending Code:

<img width=""453"" alt=""screen shot 2016-07-25 at 8 21 17 am"" src=""https://cloud.githubusercontent.com/assets/19496802/17106609/cd9c230c-5240-11e6-9b21-5d6d00429dee.png"">

Resolution: Adding a check for undefined childIDs before the traversal (react/lib/ReactComponentTreeDevtool.js line 47) resolves the issue (see below).

<img width=""772"" alt=""screen shot 2016-07-25 at 8 19 57 am"" src=""https://cloud.githubusercontent.com/assets/19496802/17106547/9be323c4-5240-11e6-973a-a777999d9b69.png"">

![screen shot 2016-07-24 at 4 02 23 pm](https://cloud.githubusercontent.com/assets/19496802/17106322/bdf6bf6c-523f-11e6-8784-1fa4e612186a.png)

Additional:
OS: OS X Yosemite (10.10.5)
Node: 4.4.7
Run on: babel-node (via babel-cli 6.11.4 )

Let me know if there's any additional information I should provide (e.g. dev dependencies). Thanks!
"
,,,https://github.com/facebook/react/issues/7179,7179,Form submit button has empty values in 15.2.0,"[{""id"":178761159,""node_id"":""MDU6TGFiZWwxNzg3NjExNTk="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Regression"",""name"":""Type: Regression"",""color"":""e11d21"",""default"":false,""description"":null}]",closed,False,,3,2016-07-03T09:10:46Z,2016-07-05T23:39:44Z,2016-07-05T23:39:44Z,NONE,completed,,"**Do you want to request a _feature_ or report a _bug_?**

This is a bug

**What is the current behavior?**

![screen shot 2016-07-03 at 4 12 19 pm](https://cloud.githubusercontent.com/assets/1697380/16544656/b3f896b2-4140-11e6-923a-06fc630c92df.png)
![screen shot 2016-07-03 at 4 11 15 pm](https://cloud.githubusercontent.com/assets/1697380/16544657/b3f8f292-4140-11e6-8b03-0ecaa3165460.png)

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**

Using 15.2.0 react and react-dom

**What is the expected behavior?**

![screen shot 2016-07-03 at 4 13 05 pm](https://cloud.githubusercontent.com/assets/1697380/16544659/b938951e-4140-11e6-9275-2c3721542003.png)
![screen shot 2016-07-03 at 4 13 10 pm](https://cloud.githubusercontent.com/assets/1697380/16544660/b9391278-4140-11e6-9951-0f81024ce859.png)

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

In 15.2.0, extra attributes `name` and `value` with empty values are added to the submit button of a form.

It works in 15.1.0.
"
,,,https://github.com/facebook/react/issues/7295,7295,"In NW.js app, the 'file' type <input> onChange event doesn't fire","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,7,2016-07-18T01:48:12Z,2018-06-25T18:49:38Z,2018-06-25T18:49:38Z,NONE,completed,,"I use react in my node webkit application. 
I just update the react and react-dom from 0.14.3 to 15.2.0, I haven't changed my code. But the onChange event not fire now, and there is no error console log.

Any help will be appreciated.
"
,,,https://github.com/facebook/react/issues/7375,7375,IE 11 bug with svg <use />,[],closed,False,,1,2016-07-29T11:47:09Z,2017-10-04T12:11:19Z,2017-10-04T12:11:19Z,NONE,completed,,"Hi, we reccently updated our project to  React v15.2.1 and had some issue's with svg's in IE11.

So we use svg sprites and get icon's like this: 

`<svg>
          <use xlinkHref={svgIconLink(someSvg')}></use>
        </svg>
`
And we use svg4evrybody  for cross-browser support.

After updaiting React started to throug exception's on IE 11. 
`invariant violation couldnt find element with ID X` 

X - being reactid of `<use />`.

As I  understand exception fires because of svg4evrybody plugin, wich replacing <use /> with inner polyfill after page loads. 

And react can't find `<use />` because there is no use and through exeption.

So the only workaround I came up with: 

`
const use = '<use xlink:href=${svgIconLink('someIcon')}></use>';
<svg dangerouslySetInnerHTML={{__html: use}}></svg>`

So React dosen't include `<use />` in our virtual DOM and can't complaint about it.

Is there any better way to do what? Because in my case I have to rewrite a whole lot of svg icons...
"
,,,https://github.com/facebook/react/issues/7363,7363,Handle externally injected elements in replaceDelimitedText?,[],closed,False,,1,2016-07-27T20:06:06Z,2017-10-04T12:10:27Z,2017-10-04T12:10:27Z,CONTRIBUTOR,completed,,"https://github.com/facebook/react/blob/ba9b985406ff56c2dea192b119328b6096895097/src/renderers/dom/client/utils/DOMChildrenOperations.js#L104

Mostly preemptive because we've talked about it before. Right now, if you render `<!-- react-text -->foobar<!-- /react-text -->` and an external tool bolds `foo` (like `<!-- react-text --><b>foo</b>bar<!-- /react-text -->`) then the entire string will be bolded when updated by React `<!-- react-text --><b>foobar</b><!-- /react-text -->`. Because only the first element is kept and `textContent` is called on it. So I would say it makes more sense to throw all elements away in that case and start from scratch.

Should we perhaps check the node type and also throw it away if it isn't a text-node?
"
,,,https://github.com/facebook/react/issues/7201,7201,[enhancement] HTML/XML comment support for JSX,[],closed,False,,2,2016-07-06T14:13:42Z,2016-07-06T14:51:10Z,2016-07-06T14:17:30Z,NONE,completed,,"# Feature

Support XML `<!-- -->` comments in JSX
## Current status

Currently the only way to insert comments into JSX flow is to wrap them in JS:

`{/**/}`

In context:

``` jsx
<Foo>
  {/* I will tell you why this component is here */}
  <Bar>
  </Bar>
</Foo>
```
## Proposed extension

XML like comments.

``` jsx
<Foo>
  <!-- I will tell you why this component is here -->
  <Bar>
  </Bar>
</Foo>
```

This would also allow us to quickly temporarily comment out components in the JSX flow like this:

``` xml
<Foo>
  <!--Bar>
  </Bar-->
</Foo>
```
"
,,,https://github.com/facebook/react/issues/7622,7622,Bug when using React in .net's WebBrowser,[],closed,False,,12,2016-08-31T13:11:59Z,2016-09-02T11:36:42Z,2016-09-02T11:21:43Z,NONE,completed,,"We use React for our web application and it works well. But also we have some Office add-ins that use `System.Windows.Forms.WebBrowser`, and the problem occurs in these add-ins. When we try to show `select` tag application show script error like this:
![image](https://cloud.githubusercontent.com/assets/710513/18129296/c9c44dee-6f92-11e6-97b3-9f0342a37323.png)
When we go to the mentioned line of code we see the following:

``` javascript
var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {  
      if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
        insertTreeChildren(tree);
        parentNode.insertBefore(tree.node, referenceNode);
      } else {
        parentNode.insertBefore(tree.node, referenceNode); <-- ERROR OCCURS HERE
        insertTreeChildren(tree);
      }
    });
```

This function is located in `DOMLazyTree.js` While debugging we found out that `tree.node` for select is `[object Object]` and looks like `parentNode.insertBefore(...)` doesn't accept this node.

We tried to increase IE version according to this  [guide](https://msdn.microsoft.com/en-us/library/ee330730%28VS.85%29.aspx#browser_emulation) and it shows the following string 
![image](https://cloud.githubusercontent.com/assets/710513/18129677/6dd82396-6f94-11e6-828c-d880125900b2.png)  which refers to IE 11 but with no luck.

This error only occurs in MS Office environment (Word Add-in, Excel Add-in etc.). When you try to use .net's WebBrowser component on Windows Form application it works correctly. Do you have any ideas how we can use `select` tag in this case?
"
,,,https://github.com/facebook/react/issues/7541,7541,dangerouslySetInnerHTML won't set all HTML,[],closed,False,,3,2016-08-22T06:14:27Z,2016-08-23T03:14:41Z,2016-08-22T16:03:07Z,NONE,completed,,"Have come across an issue with dangerouslySetInnerHTML. 

When I set the HTML to 

`<table><tr><td>Hello World</td></tr></table>`

It renders correctly.

In my situation I need to render

`<tr><td>Hello World</tr></td>`

But dangerouslySetInnerHTML strips out the tags, I think because it's missing the outer table tags.

Please see the attached link for an example [https://jsfiddle.net/90u53orz/10/]

Any Suggestions/workarounds/fixes would be awesome?
"
,,,https://github.com/facebook/react/issues/7475,7475,"In IE11 an input with type=search does not trigger React's change event when clicking the ""clear"" button",[],closed,False,,4,2016-08-12T01:06:59Z,2017-02-26T23:11:05Z,2016-08-12T03:29:27Z,CONTRIBUTOR,completed,,"**Do you want to request a _feature_ or report a _bug_?**  Bug

**What is the current behavior?**

In Chrome, Firefox, Edge, etc when using an `input` with `type='search'` clicking the clear button (the ""X"" on the right) triggers the React onChange event. In IE11 (and probably earlier versions) the onChange event does not fire even though the input is cleared.  `onInput` DOES get fired in IE11 when the search box is cleared.

http://jsbin.com/sizaba/3/edit?html,js,console,output

**What is the expected behavior?**

The React `onChange` event will consistently fire in IE11 as well.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React 15.1+ is definitely affected. Not sure if it worked previously. IE11 is affected, but other browsers including Edge do not appear to be.
"
,,,https://github.com/facebook/react/issues/7563,7563,"Using React 15, under Edge, dangerouslySetInnerHTML doesn't work on any SVG tag","[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null}]",closed,False,,5,2016-08-25T18:12:17Z,2016-08-30T15:07:24Z,2016-08-30T14:32:14Z,NONE,completed,,"Hi everyone.

This issue is following #6950
The fix works on IE11. Unfortunately, it doesn't under Edge.

It seems that Edge is implementing innerHTML property on SVG tag, but in an inefficient way. Using it appends SVG text in the DOM tree, as it can be seen using the inspector, but Edge doesn't render anything... Unless you modify the svg string in the inspector...

See the [codepen](http://codepen.io/lgra/pen/OXPgoQ) (updated to use React 15.3) under Edge to see that issue.

Of course, if we enforce Edge to use the hack, it works. I don't know how to enforce it except browser sniffing (grr...).
"
,,,https://github.com/facebook/react/issues/7575,7575,rename `receiveComponent` to `receiveElement`,[],closed,False,,8,2016-08-26T16:32:06Z,2016-10-27T15:12:18Z,2016-10-27T15:12:18Z,CONTRIBUTOR,completed,gaearon,"@zpao just gave a talk at React Rally and mentioned that `receiveComponent` could be improved if it were renamed to `receiveElement`. I'd be happy to file a PR to make this a reality if it's not too huge a task :) Anything I should consider before a do a big find/replace?
"
,,,https://github.com/facebook/react/issues/7460,7460,Element migration from one parent to another.,[],closed,False,,4,2016-08-10T11:20:58Z,2016-08-12T04:17:05Z,2016-08-12T04:17:05Z,NONE,completed,,"**Do you want to request a _feature_ or report a _bug_?**

Feature request.

**What is the current behavior?**

Currently there is no high performance way to move a rendered element from one parent to another. It causes a lot of overhead, because it requires a full mountComponent in the new place, even if we reuse the component instance itself.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

All.

**Why we need this**

I am trying to optimize one specific case: I need to render a component invisibly in order to measure it's dimensions. After that I need to render same component in the visible area. Currently I need to buy an overhead (in my case 15-50ms) to do so, where in fact, when done in pure DOM, it is a simple .appendChild call with almost no overhead.

To be more specific here, I am talking about [react-virtualized](https://github.com/bvaughn/react-virtualized/) library and more specific it's [CellMeasurer](https://github.com/bvaughn/react-virtualized/blob/master/source/CellMeasurer/CellMeasurer.js) component, which can become 50% faster if we can avoid that overhead.
"
,,,https://github.com/facebook/react/issues/7459,7459,Inline Style including !important are ignored,[],closed,False,,3,2016-08-10T09:13:39Z,2016-08-11T11:43:53Z,2016-08-10T21:31:52Z,NONE,completed,,"If you set a style `backgroundColor: red` it works as expected but `backgroundColor: red !important` will be ignored just like in this example https://jsfiddle.net/hjwLjr6j/
"
,,,https://github.com/facebook/react/issues/7421,7421,onFocus and onBlur events on input elements cause issues,[],closed,False,,6,2016-08-04T01:44:46Z,2016-08-27T00:51:54Z,2016-08-27T00:51:54Z,NONE,completed,,"**Do you want to request a _feature_ or report a _bug_?**
bug

**What is the current behavior?**
When I use `onFocus` or `onBlur` events on an `<input>` element in my React app, if in the`onBlur` or `onFocus`  event handler I set the input's value to an empty string, I get:

`TypeError·TypeError: property ""value"" is non-configurable and can't be delete` OR
`TypeError·Uncaught TypeError: Cannot delete property 'value' of #<HTMLInputElement>`

Looking at the stack trace, it's because it is trying to delete the value and detach the onPropertyChange handler when onFocus or onBlur is called: 

`attachEvent(""onpropertychange"",d):A.addEventListener(""propertychange"",d,!1)}function f(){A&&(delete A.value,A.detachEvent?A.detachEvent(""onpropertychange"",d):A.removeEventListener(""propertychange"",d,!`

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

react 15.1
All browsers

I frankly am not able to reproduce this locally on any browser, but we're seeing this error happen 1000s of times in our bug tracking system. I know this is probably not very helpful but I figured I can at least see if anyone else has run into this. Happy to close this issue if you feel there's not enough information. 
"
,,,https://github.com/facebook/react/issues/7535,7535,"Unclear docs and API for children, esp. only children",[],closed,False,,1,2016-08-20T19:51:37Z,2016-10-23T14:07:49Z,2016-10-23T14:07:49Z,NONE,completed,,"I'm writing a table cell component that will specially handle the case where it's given a single number, and from looking at the documentation and API, I'm unclear on how to do this:
- [""Multiple Components""](https://facebook.github.io/react/docs/multiple-components.html#children) and [""Top-level API""](https://facebook.github.io/react/docs/top-level-api.html#react.children) say that `this.props.children` is ""opaque"" and suggest that the `React.Children` APIs should be used to preserve  `this.props.children`'s encapsulation.
- [""Type of the Children props""](https://facebook.github.io/react/tips/children-props-type.html) gives full details on how `this.props.children` is implemented and suggests that `React.Children` is provided simply as a convenience.
- [The docs for `React.Children.only`](https://facebook.github.io/react/docs/top-level-api.html#react.children.only) say that `only` gets the single child, but in reality, it gets the single child _as long as that child is a React element_. (React 15.3.1 at least [improves the error message](https://github.com/facebook/react/pull/7514) in this case.)

My questions, or suggestions for improvements to the docs:
- Is `this.props.children` supposed to be opaque? If so, ""Type of the children props"" should be updated.
- Or is it supposed to be public? If so, ""Multiple Components"" and ""Top-level API"" should be updated.
- Can the documentation for `React.Children.only` be updated to clarify that it requires a valid React element and possibly to explain the use case for this requirement? (See comments on #1104 for some of the confusion caused by the current documentation.)\* What's the official or recommended way to get at the only ""anything renderable"" child, as opposed to the only ""valid React element"" child?
  - Changing `React.Children.only` to allow for string and number nodes was closed as won't fix (#1104)
  - Using `this.props.children` directly goes against the docs' statement that it should be opaque.
  - Using `React.Children.map` or `React.Children.forEach` seems like overkill.

If `this.props.children` is supposed to be opaque, then would a new `React.Children.onlyNode` function be a useful solution?
"
,,,https://github.com/facebook/react/issues/7785,7785,API suggestion: Extend React.Component.prototype,[],closed,False,,18,2016-09-21T16:15:12Z,2016-09-21T19:09:00Z,2016-09-21T17:52:35Z,CONTRIBUTOR,completed,,"As a component library _author_, there are constantly use cases where I want **every single component** to have one or more of the same properties. 

Polymer handles this by exposing the [`Polymer.Base`](https://www.polymer-project.org/1.0/docs/api/Polymer.Base)(Will most likely become `Polymer.Element` in [2.0](https://www.polymer-project.org/1.0/blog/2016-09-09-polymer-2.0.html)) static method. 

Examples: 
- Themes/Styles*
- Props
- Behaviors

I know the ""recommended best practice"" is to use HOC, but wrapping, or even decorating, every single component gets tedious and is to implicit to library consumers (*[much like context](https://facebook.github.io/react/docs/context.html)), and `cloneElement`.

Merging props is messy and not always reliable depending on the use case.  
I know I'm not the only one who would benefit from something like this (just search the React Discuss forums). 
"
,,,https://github.com/facebook/react/issues/7660,7660,Since 15.2.0 TestUtils for Radios and Checkboxes Unexpected Behavior for `null` `checked` attributes,[],closed,False,,3,2016-09-05T17:42:02Z,2017-10-04T13:12:23Z,2017-10-04T13:12:23Z,NONE,completed,,"**Do you want to request a _feature_ or report a _bug_?**
bug

**What is the current behavior?**
When using `ReactDOM.render` checkboxes with jsx attribute `checked={null}` will have a `checked` value from their DOM element of `false`. When using `TestUtils` and `TestUtils.Simulate` the same configuration above for `checked={null}` will result in `checkboxElm.checked` to be `true`.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem

demo here https://jsbin.com/ciwavowoqe/1/edit?html,js,console,output

**What is the expected behavior?**
expected behavior is that TestUtils would mimic actual DOM fragment, i.e. jsx property `checked={null}` results in `someCheckboxElm.checked` to be `false`

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
This worked in `15.1.0` but stopped working in >= `15.2.0`
"
,,,https://github.com/facebook/react/issues/7835,7835,Input doesn't fire focus event when it focused programmatically on element…,[],closed,False,,11,2016-09-29T22:02:57Z,2020-07-15T06:05:15Z,2017-10-04T13:41:15Z,NONE,completed,,"So if I assign `onFocus` callback to `<input />` and then call method `focus()` on actual element, react won't fire `onFocus` event and related callback won't be called.

It's a problem of react, not DOM method `focus()`, because with `addEventListener('focus', fn)` it fire such an event.

Version is `15.3.2`

**UPDATE**
I called `this.refs.input.focus()` from `componentWillReceiveProps` which do not support firing such an events by design I think.
"
,,,https://github.com/facebook/react/issues/7740,7740,`react-test-renderer` and refs,[],closed,False,,18,2016-09-15T13:13:31Z,2021-07-22T17:44:52Z,2016-11-11T14:35:18Z,NONE,completed,aweary,"**Do you want to request a _feature_ or report a _bug_?**
Bug

**What is the current behavior?**
It's not possible to test component that use `ref` with the `react-test-renderer` utilitiesTesting: the refs are always `null`.

``` javascript
/* @flow */

import React from 'react';

export default class Foo extends React.Component {    
    /* the future refs */
    bar; 

    componentDidMount() {
        console.log(this.bar); // this.bar is null

        this.bar.doThings() // So this fail
    }

    render() {
        return (
            <div ref={(c) => { console.log('ref cb', c); this.bar = c; }}> {/* The callback is call but, `c` is null*/}
                <p>Hello World</p>
            </div>
        );
    }
}
```

``` javascript

import React from 'react';
import renderer from 'react-test-renderer';

it('should have valide ref', () => {
    const foo = renderer.create(<Foo />);

    expect(foo.toJSON()).toMatchSnapshot();
});
```

**What is the expected behavior?**

The ref should be usable.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
- `react@15.3.1`
- `react-dom@15.3.1` 
- `react-test-renderer@15.3.1` 

Only tested with these versions.
"
,,,https://github.com/facebook/react/issues/7705,7705,Anyway to retrieve a field's meta object externally?,[],closed,False,,1,2016-09-12T19:21:07Z,2016-09-12T19:25:34Z,2016-09-12T19:25:34Z,NONE,completed,,"Hi all

   I was hoping to retrieve a field's meta attribute after the field has been rendered so that I can know if a field has an error or not.  I'm actually wrapping a field in a pop up so that it can be edited later so I want to know whether the field has an error so that they use is allowed to continue.

For example,

`let fieldReference = <Field name=""name"" component={CustomComponent} />`
`...code to be run later after the field has been rendered and user inputs value`
`console.log (fieldReference.meta.error);`

I'm finding that I cannot reference the meta object.  But I can access the meta object in in the CustomComponent field, is there anyway without storing my own variables to access the meta or input objects if I have a reference to the field?
"
,,,https://github.com/facebook/react/issues/7664,7664,Incorrect shallow rendering incase of children with the same key,"[{""id"":139734344,""node_id"":""MDU6TGFiZWwxMzk3MzQzNDQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils"",""name"":""Component: Test Utils"",""color"":""eb6420"",""default"":false,""description"":null}]",closed,False,,2,2016-09-06T08:11:05Z,2017-10-04T13:16:32Z,2017-10-04T13:16:32Z,NONE,completed,,"**Do you want to request a _feature_ or report a _bug_?**

Bug

**What is the current behavior?**

Let's say we have a component that recieve an array and renders them in a list

```
var List = React.createClass({
  render: function() {
    return (
    <div>
        {
        this.props.items.map(function(item){
            return <div className=""item"" key={item.id}>{item.name}</div>;
        })
      }
     </div>
    )
  }
});
```

and let's say we passed the following array:

```
var items = [{id:'1', name: 'one'},{id:'1', name: 'two'}];
```

since the id is a duplicate, React will render only one item and throws the following warning 

```
Encountered two children with the same key, `1`. Child keys must be unique; when two children share a key, only the first child will be used.
    in div (created by List)
    in List
```

Here is a demo for the above https://jsfiddle.net/69z2wepo/55187/

However, when using ReactTestUtils to shallow render the list, it returns 2 items instead of 1. 

Below a testcase for demonstration purpose: 

```
describe('<List>', () =>

it('should render the correct number of items', () => {

    let items = [{id:'1', name: 'one'},{id:'1', name: 'two'}];
    let renderer = ReactTestUtils.createRenderer();
    let result= renderer.render(<List items={items} />);

    // the following testcase should fail
    expect(result.props.children.length).toBe(2)

}))
```

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem

See above

**What is the expected behavior?**

Shallow Renderer should behave like in the browser, in this case it should return 1 children instead of 2. 

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

15.0.0 
"
,,,https://github.com/facebook/react/issues/7803,7803,Upgrading to React v15.2.0 causes my development build to crash IE9,"[{""id"":69105383,""node_id"":""MDU6TGFiZWw2OTEwNTM4Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Browser:%20IE"",""name"":""Browser: IE"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":178761159,""node_id"":""MDU6TGFiZWwxNzg3NjExNTk="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Regression"",""name"":""Type: Regression"",""color"":""e11d21"",""default"":false,""description"":null}]",closed,False,,20,2016-09-24T20:09:36Z,2016-11-10T16:03:07Z,2016-11-10T16:03:07Z,NONE,completed,,"My application crashes IE9 when I upgrade to React v15.2.0! It works fine with v15.1.0 and all earlier versions.

My diff looks like this

```
package.json
 -    ""react-addons-perf"": ""15.1.0"",
 +    ""react-addons-perf"": ""15.2.0"",
 -    ""react-addons-shallow-compare"": ""15.1.0"",
 +    ""react-addons-shallow-compare"": ""15.2.0"",
 -    ""react-addons-test-utils"": ""15.1.0"",
 +    ""react-addons-test-utils"": ""15.2.0"",
 -    ""react"": ""15.1.0"",
 +    ""react"": ""15.2.0"",
 -    ""react-addons-css-transition-group"": ""15.1.0"",
 +    ""react-addons-css-transition-group"": ""15.2.0"",
 -    ""react-addons-transition-group"": ""15.1.0"",
 +    ""react-addons-transition-group"": ""15.2.0"",
 -    ""react-dom"": ""15.1.0"",
 +    ""react-dom"": ""15.2.0"",
```

Below is a GIF of the crash, I recorded this using BrowserStack (Win7, IE9). I start the recording with Google loaded and dev tools open, I then navigated to my apps URL. As you can see IE9 just crashes hard with nothing logged to console. All other browsers load my app just fine, this only seems to crash IE9!

![crash](https://cloud.githubusercontent.com/assets/456400/18810916/7694bfd0-829a-11e6-897d-4b70df1972a2.gif)

Did you guys drop support for IE9 in 15.2.0? If not, any ideas what might be causing this?
"
,,,https://github.com/facebook/react/issues/7673,7673,Mouseenter events triggered at disabled form element.,"[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null}]",closed,False,,1,2016-09-07T08:54:12Z,2016-09-07T14:38:24Z,2016-09-07T14:38:18Z,NONE,completed,,"**Do you want to request a _feature_ or report a _bug_?**

_bug_

**What is the current behavior?**

When mouse enter disabled form element, trigger `mouseenter` events,  but it not trigger `mouseleave` when mouse leave from the element.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**

http://jsbin.com/goxowolina/edit?html,js,output

First button rendered by react.

**What is the expected behavior?**

Don't trigger `mouseenter` events when form elements disabled.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

15.3.0. Yes.
"
,,,https://github.com/facebook/react/issues/7743,7743,Bug [v0.14.8] : Shallow rendering does not work properly with React Stateless Function Components ,[],closed,False,,3,2016-09-15T18:12:46Z,2016-09-27T16:16:34Z,2016-09-27T16:16:34Z,NONE,completed,,"**Bug**

React Stateless functions cause a cyclic rendering when shallow Rendered. 

``` javascript
import React from ""react"";

const Component = () =>{
    return <div></div>;
};

describe('Test Case', ()=>{
    let shallowRenderer;
    beforeEach(() => {
        shallowRenderer = React.addons.TestUtils.createRenderer();
    });
    describe('on Render', ()=>{
        it('should render properly', () =>{
            shallowRenderer.render(
                <Component/>
            );
            const output = shallowRenderer.getRenderOutput();
            expect(output).toEqual(
                <div></div>
            );
        });
    });
});
```

**Error : test case failed**

```
Test Case on Render should render properly FAILED
    Expected Object({ $$typeof: 60103, type: 'div', key: null, ref: null, props: Object({  }), _owner: ({ _currentElement: Object({ $$typeof: 60103, type: Function, key: null, ref: null, props: Object({  }), _owner: null, _store: Object({  }) }), _rootNodeID: '.0', _instance: StatelessComponent({ props: Object({  }), context: Object({  }), refs: Object({  }), updater: Object({ isMounted: Function, enqueueCallback: Function, enqueueCallbackInternal: Function, enqueueForceUpdate: Function, enqueueReplaceState: Function, enqueueSetState: Function, enqueueSetProps: Function, enqueueSetPropsInternal: Function, enqueueReplaceProps: Function, enqueueReplacePropsInternal: Function, enqueueElementInternal: Function }), _reactInternalInstance: <circular reference: Object>, state: null }), _pendingElement: null, _pendingStateQueue: null, _pendingReplaceState: false, _pendingForceUpdate: false, _renderedComponent: Object({ _renderedOutput: <circular reference: Object>, _currentElement: <circular reference: Object> }), _context: Object({  }), _mountOrder: 1, _topLevelWrapper: null, _pendingCallbacks: null }), _store: Object({  }) }) to equal Object({ $$typeof: 60103, type: 'div', key: null, ref: null, props: Object({  }), _owner: null, _store: Object({  }) }).
```

**Expected**
Test case should pass. 
"
,,,https://github.com/facebook/react/issues/8144,8144,componentDidMount wouldn't not rerendering the component,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,23,2016-10-29T13:00:09Z,2017-01-14T13:22:45Z,2016-12-07T14:48:45Z,NONE,completed,,"Look , I got this problem, it shows on my console. which is 
`
app.js:1 Uncaught TypeError: Cannot read property 'getHostNode' of null
`
and I don't know wtf is this Error, and another serious problem is here , 
here is my code : 

```
componentDidMount() {
    console.log('mounted')
    getData(function (data) {   //get data from my backend
      console.log('got data: ' + data);
      this.setState({
        data: data
      })
    }.bind(this))
  }
  //data fetching function
  render() {
    console.log(this.state.data); // I loged this on my console. it should log twice right? 
    const log = this.state.data.filter(val => val.code == this.props.params.id)[0]; 
    console.log(log) // this will log twice as well 
```

and here is my log 

```
[]
undefined
```

and that's it , I know this code may not look very good , but this problem is killing me , I try to  debug it but I just can't
"
,,,https://github.com/facebook/react/issues/8092,8092,https://fb.me/react-warning-keys is redirected wrongly,[],closed,False,,5,2016-10-25T14:54:15Z,2016-10-27T18:22:29Z,2016-10-27T18:22:18Z,NONE,completed,,"The following Warning is not redirected correctly: (At least from Chrome debugger)

20547 Warning: Each child in an array or iterator should have a unique ""key"" prop. Check the render method of `List`. See https://fb.me/react-warning-keys for more information.

leads to: 
https://facebook.github.io/react/docs/composition-vs-inheritance.html
instead of:
https://facebook.github.io/react/docs/lists-and-keys.html
"
,,,https://github.com/facebook/react/issues/7906,7906,[Fiber] Spill-over from child reconciliation,"[{""id"":40929153,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement"",""name"":""Type: Enhancement"",""color"":""84b6eb"",""default"":false,""description"":null},{""id"":739761016,""node_id"":""MDU6TGFiZWw3Mzk3NjEwMTY="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler"",""name"":""Component: Reconciler"",""color"":""f9a798"",""default"":false,""description"":null}]",closed,False,,2,2016-10-07T01:53:54Z,2018-08-17T03:23:13Z,2018-08-16T05:20:28Z,COLLABORATOR,completed,,"This is spill-over from #7707 that I don't plan on doing in the initial batch.
- [ ] Fix text node merging edge case... Search forward to find the next sibling, swap out the end of the text node to the sum of the previous value of the siblings. This trick lets us avoid back-references.
- [ ] Have tag include children updated so that you can recalculate all children if needed. E.g. coroutines. Alternatively, pass the nearest host or coroutine down the tree so that it can be quickly flagged as child changed and insert/moves can be avoided to be added to the side-effect list for coroutines. The second option is probably better.
- [ ] Possibly use two side-effect lists so that two passes are not needed and forward order is possible.
- [x] Remove the notion of `output`? Unnecessary extra traversal and requires duck typing to know which is terminal.
- [ ] Reconsider if we need backpointers. There are several optimizations that are possible with them but uses more memory.
"
,,,https://github.com/facebook/react/issues/7998,7998,Some style props render incorrectly in Safari,[],closed,False,,4,2016-10-18T00:22:34Z,2016-10-26T04:03:26Z,2016-10-26T04:03:26Z,NONE,completed,,"**Do you want to request a _feature_ or report a _bug_?**

This is a bug report (or a report of undocumented behaviour).

**What is the current behavior?**

Some style props render incorrectly in Safari.  For example, the following becomes `-webkit-animation: 100s;`.

```
ReactDOM.render((React.createElement('div', {
  style: { WebkitAnimationDelay: '100ms' } 
})), document.getElementById('example'));
```

Screenshot from the inspector: <img width=""560"" alt=""screen shot 2016-10-18 at 10 22 12"" src=""https://cloud.githubusercontent.com/assets/3422442/19460152/9fe6cab6-9520-11e6-8784-9ddfcf3848c2.png"">

A similar thing happens for `WebkitTransitionDelay`: it is rendered as `-webkit-transition: 100ms; transition: 100ms;`.

Another screenshot: <img width=""638"" alt=""screen shot 2016-10-18 at 10 24 02"" src=""https://cloud.githubusercontent.com/assets/3422442/19460161/bc136208-9520-11e6-8e89-99859130a6e0.png"">

It works as expected in other browsers that I tried.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**

Check out the `id=""example""` element (child of `id=""result""`) in iOS Safari 8 (using a desktop Safari or some other inspector tool): https://jsfiddle.net/Ly0s5cxe/

Otherwise, here is a minimal failing example:

```
<!doctype html>
<html>
  <head>
    <script src=""https://unpkg.com/react@15.3.2/dist/react.js""></script>
    <script src=""https://unpkg.com/react-dom@15.3.2/dist/react-dom.js""></script>
  </head>
  <body>
    <div id=""example""></div>
    <script type=""text/javascript"">
     ReactDOM.render((React.createElement('div', {
       style: { WebkitTransitionDelay: '100ms' }
     })), document.getElementById('example'));
    </script>
  </body>
</html>
```

**What is the expected behavior?**

That the rendered style property matches the given style property:
- `WebkitTransitionDelay` becomes `-webkit-transition-delay`
- `WebkitAnimationDelay` becomes `-webkit-animation-delay`

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Using 15.3.2 and the version that is served [here](https://facebook.github.io/react/js/jsfiddle-integration-babel.js), I have seen this issue on:
- iOS 8 Safari
- El Captian Safari 9.1 and 9.1.2

iOS 10 Safari seems to be unaffected and I am unsure about other versions.
"
,,,https://github.com/facebook/react/issues/7975,7975,Docs - Implementation notes - replaceChild args in worng order,[],closed,False,,2,2016-10-14T13:05:31Z,2016-10-23T13:47:14Z,2016-10-23T13:47:14Z,NONE,completed,,"The order of the arguments is wrong

``` js
// how it is now
prevNode.parentNode.replaceChild(prevNode, nextNode);

// how it should be
prevNode.parentNode.replaceChild(nextNode, prevNode);
```

https://facebook.github.io/react/contributing/implementation-notes.html#updating-composite-components
https://developer.mozilla.org/en/docs/Web/API/Node/replaceChild
"
,,,https://github.com/facebook/react/issues/8026,8026,Multiple Copies of react installed,[],closed,False,,4,2016-10-20T16:11:15Z,2016-10-22T13:48:16Z,2016-10-20T20:46:56Z,NONE,completed,,"I am using a few react components made by various libraries like material ui and i get this message

```
Invariant Violation: addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).
```

on doing `npm ls react` i can see only one version of react installed. I am using gulp and browserify for my build process. Any idea how i can solve this?
"
,,,https://github.com/facebook/react/issues/7958,7958,"Documentation: findDOMNode() in title, but not in paragraph",[],closed,False,,2,2016-10-12T21:48:31Z,2016-10-12T22:13:05Z,2016-10-12T22:03:49Z,CONTRIBUTOR,completed,,"Documentation ""bug"".

""Working With the Browser"" contains a subheading ""Refs and findDOMNode()"". The following paragraph however doesn’t contain any information about findDOMNode(). This was removed in commit 5ee8a93280987bf1547687f5d8665be89058f321
"
,,,https://github.com/facebook/react/issues/7860,7860,Unable to add css to react app.,[],closed,False,,1,2016-10-04T05:13:13Z,2016-10-04T08:36:19Z,2016-10-04T08:34:56Z,NONE,completed,,"I am making a react js app. I am trying to add bootstrap css to my app. following is my code.

webpack.config.js

```
        var webpack = require('webpack'),
        contextPath = process.cwd();

        module.exports = {
          devtool: 'inline-source-map',
          entry: [
            'webpack-hot-middleware/client',
            './client/client.js'
          ],
          output: {
            path: contextPath + '/dist',
            filename: 'bundle.js',
            publicPath: '/'
          },
          plugins: [
            new webpack.optimize.OccurrenceOrderPlugin(),
            new webpack.HotModuleReplacementPlugin(),
            new webpack.NoErrorsPlugin(),
            new webpack.optimize.UglifyJsPlugin({
              compress: {warnings: false}
            })
          ],
          module: {
            loaders: [
              {
                test: /\.js$/,
                loader: 'babel-loader',
                exclude: /node_modules/,
                query: {
                  presets: ['react', 'es2015', 'react-hmre']
                }
              },
              { test: /\.less$/, loader: 'style!css!less' },
                    { test: /\.(png|woff|woff2|eot|ttf|svg)$/, loader: 'url-loader?limit=100000' },
                    { test: /\.(jpe|jpg|woff|woff2|eot|ttf|svg)(\?.*$|$)/, loaders: [""file-loader""] },
            ]
          }
        }
```

index.html

```
                            <!DOCTYPE html>
            <html>
            <head>
                <meta charset=""utf-8"">
                <meta name=""viewport"" content=""width=device-width"">
                <title>React.js</title>
                <link rel=""stylesheet"" type=""text/css"" href=""./css/bootstrap.min.css"">
            </head>
            <body>
                <div id=""react"">Learn React</div>
                <script src=""bundle.js""></script>
            </body>
            </html>
```

I checked in network request then my app is getting the file. But styles are not getting applied to my components. Following is my component.

```
        import React, { Component } from 'react';

        export default class RegistrationForm extends Component {
            constructor(props){
                super(props)
                this.state={
                    name : """"
                }
            }
            render(){
                return(
                        <div className=""col-md-8"">
                            <form className=""form-horizontal"">
                                <input type=""text"" placeholder=""Enter Name Here"" onchange={(text)=>this.setState({name:text})} />
                            </form>
                        </div>
                    );
            }
        }
```

Please help me solving this issue.
"
,,,https://github.com/facebook/react/issues/8392,8392,Cannot use addons.Perf or addons.ReactTransitionGroup in AMD environment with 15.4.1,"[{""id"":178761159,""node_id"":""MDU6TGFiZWwxNzg3NjExNTk="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Regression"",""name"":""Type: Regression"",""color"":""e11d21"",""default"":false,""description"":null}]",closed,False,,43,2016-11-23T07:53:19Z,2017-01-06T21:47:50Z,2017-01-05T21:16:09Z,NONE,completed,gaearon,"I use `react-with-addons` in a RequireJS enviroment. If I try to use `React.addons.Perf`, I get a `ReferenceError: ReactDOM is not defined` from https://github.com/facebook/react/blob/15-dev/src/umd/shims/ReactAddonsDOMDependenciesUMDShim.js#L26.
This is a regression from 15.3.x."
,,,https://github.com/facebook/react/issues/8203,8203,ReactCSSTransitionGroup is not work,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,7,2016-11-04T15:48:29Z,2016-12-07T14:47:04Z,2016-12-07T14:47:04Z,NONE,completed,,"I want to fade in animation. my code is 

```
import React, { PropType } from 'react';
import { BrowserRouter as Router, Link, Match, Miss } from 'react-router'
import JsonData from './subtitle.json';
import ReactCSSTransitionGroup from 'react-addons-css-transition-group'
import styles from './LetterBox.css'

export default class LetterBox extends Reac
```t.Component {
  constructor(props){
    super(props);
  }

  render(){
    var boxStyle = {
      background : 'black',
      padding : 10,
      borderWidth : 1,
      borderColor : 'white',
      borderStyle : 'solid',
      location : 'absolute'
    }
    var letterStyle = {
      fontFamily : ""맑은 고딕"",
      fontSize : 50,
      color : 'white',
      textAlign: 'center'
    }
    var buttonStyleRight = {
      float : 'right',
      background : 'white',
      marginRight: 10,
      fontSize : 20,
      borderColor : 'black'
    }
    var buttonStyleLeft = {
      background : 'white',
      float: 'right',
      fontSize : 20,
      borderColor : 'black'
    }

    return (
      <div>
        <ReactCSSTransitionGroup
          transitionName=""example""
          transitionName=""carousel""
          transitionAppear={true}
          transitionEnterTimeout={500}
          transitionAppearTimeout={500}
          transitionLeaveTimeout={300}>
          <h1>{this.props.script}</h1>
        </ReactCSSTransitionGroup>
        
      </div>
    );
  }
}
```
but there are no changes...
anyone help?"
,,,https://github.com/facebook/react/issues/8466,8466,react-test-renderer does not install dependencies on npm v2,[],closed,False,,5,2016-11-30T19:59:22Z,2017-02-15T17:50:01Z,2017-02-15T17:50:01Z,CONTRIBUTOR,completed,,"I'm currently using react-test-renderer version `15.4.1` and npm version `2.15.9` and jest version `17.0.3`. When running tests that use react-test-renderer, I'm seeing this error:

```
Cannot find module 'object-assign' from 'ReactTestRenderer.js'

at Resolver.resolveModule (node_modules/jest/node_modules/jest-cli/node_modules/jest-resolve/build/index.js:151:17)
at Object.<anonymous> (node_modules/react-test-renderer/lib/ReactTestRenderer.js:15:15)
at Object.<anonymous> (node_modules/react-test-renderer/index.js:3:18)
```

Is this an issue with npm v2?
"
,,,https://github.com/facebook/react/issues/8320,8320,isInjected for propTypes,[],closed,False,,1,2016-11-17T00:37:06Z,2016-11-17T00:46:45Z,2016-11-17T00:46:18Z,NONE,completed,,"I would like to propose a small addition to the propTypes.

I and a few others have encountered issues when using Redux connect to inject information from a store. See:
https://github.com/yannickcr/eslint-plugin-react/issues/553

I was wandering if maybe adding an "".isInjected"" to PropType would make sense? It could work similar to "".isRequired"" where it can be chained to any to any datatype. However, where isRequired validates a value is passed, isInjected validates a value is NOT passed. 

Example:
MyComponent.propTypes = {
  optionalBool: React.PropTypes.bool,
  requiredBool: React.PropTypes.bool.isRequired,
  injectedBool: React.PropTypes.bool.isInjected,
}

I wanted to vet the idea before bothering with a pull request. 
"
,,,https://github.com/facebook/react/issues/8205,8205,React.cloneElement that gives precedence to the Child Component props,[],closed,False,,2,2016-11-04T20:52:24Z,2021-01-07T03:54:45Z,2017-10-04T14:23:25Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Feature

I would like a version of `React.cloneElement` that gives precedence to the props already on the component being cloned that were PASSED in but ignoring the ones that were provided by default.

Order of precedence
1) Props provided to the Child component
2) Props provided to the parent used to override the child component ones
3) Default props on the Child component (i.e. prop was not provided to parent or child)

Here is an example use case

```
<Button.Group color=""blue"">
  <Button color=""red"" />
  <Button />
  <Button />
</Button.Group>
```

The behavior I would like to achieve here is for Button1 to be red and button 2 & 3 to be blue.  The idea is that you can provide a single prop to the parent as the sort of default, but that individual components can override that default if they choose.

I tried manually merging the props, but because the default value have already been supplied, there isn't really a reliable way to do this. 

Thank you."
,,,https://github.com/facebook/react/issues/8246,8246,Component Model,[],closed,False,,1,2016-11-09T16:10:07Z,2016-11-09T16:33:49Z,2016-11-09T16:33:39Z,NONE,completed,,"React is one of JavaScript libraries that use component-based software engineering approach. In the CBSE, there are some component models such as EJB model, COM model, .NET model, etc. I want to know which component model did React use? Or React is using different kind of component model? I'm doing some research about React behaviour based on its component-based Software Engineering. So, i want to ask for help if there're some documentations about React Component, its model, and anything that can help my research. Thank you before, if you're willing to help please send it to my email: randichil@gmail.com"
,,,https://github.com/facebook/react/issues/8430,8430,Error messages swallowed in certain edge cases,[],closed,False,,3,2016-11-27T16:15:53Z,2016-11-27T17:35:33Z,2016-11-27T17:27:18Z,NONE,completed,,"I would like to report a bug.

Currently in certain cases (like the one reproduced below) critical error messages are not displayed in the developer console. Sometimes the view does not render at all and it's left to our guesswork to identify the culprit.

Here's the relevant jsfiddle: 
https://jsfiddle.net/b1co3uex/10/

You can see that the only error being thrown is the one deliberately put in line 6. It blocks proper rendering of the view, yet no trace of it is show in the developer console.

The expected behaviour would be to catch the error and show it in developer console.

My current workaround is to wrap `setState` calls in `try/catch`, which is ugly - but it works. 

I suppose this is not by design, as React usually has excellent error reporting capabilities. 

I am aware that the issue might be caused by imperfections in my code. If there's a way to improve it while maintaining its functionality, I'm all ears :)

I've been struggling with this issue for quite some time now. In the above jsfiddle you can see the error being reproduced in React 15.3.2.
"
,,,https://github.com/facebook/react/issues/8301,8301,react-dom 15.4.0 does not work in AMD enviroment,"[{""id"":178761159,""node_id"":""MDU6TGFiZWwxNzg3NjExNTk="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Regression"",""name"":""Type: Regression"",""color"":""e11d21"",""default"":false,""description"":null}]",closed,False,,26,2016-11-16T15:29:48Z,2016-11-23T08:43:30Z,2016-11-23T01:16:45Z,NONE,completed,,"If I try to load react-dom with RequireJS, I get an error: ""Mismatched anonymous define()"".
Looking at the react-dom from the 15.4.0 distribution (https://cdnjs.cloudflare.com/ajax/libs/react/15.4.0/react-dom.js), I notice that there seem to be two UMD wrappers at the top.
This is probably related to the change in the packaging structure (#7164 and #7168)."
,,,https://github.com/facebook/react/issues/8321,8321,"Delete all examples except ""fiber"" & ""basic-jsx""",[],closed,False,,5,2016-11-17T00:48:53Z,2017-10-04T14:33:17Z,2017-10-04T14:33:17Z,NONE,completed,,"Many people to understand something new are reading docs/articles, but good practice is to explore examples in parallel.

Current examples' issues:
 - Depends on Babel 5.8.
 - `<script type=""text/babel"">` - deprecated.
 - `setInterval(render, 50)` - to wait dom.
 - Outdated libraries (like webcomponentsjs 0.7).
 - Generally, you must 'parse' in mind the whole `html` file to understand how small Component works.

For me, possible solution could be rewriting examples as separate modules with own `package.json`, README, etc., with simple `npm start`, `npm build` scripts.

If it can be useful, I could make a PR in a few days.
"
,,,https://github.com/facebook/react/issues/8530,8530,"some instances change a same state,",[],closed,False,,3,2016-12-08T10:59:43Z,2016-12-15T08:25:06Z,2016-12-08T19:59:28Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
![image](https://cloud.githubusercontent.com/assets/4493524/21007368/87825fe2-bd77-11e6-8915-bca148403457.png)
```
<color visiable={false} name='a'/>
<color visiable={false} name='b'/>
```

click instanceA, the state of 'visiable' will be true.
but click instanceB, the instanceA's visiable always be true,
how to do that click A, it's visiable will be true, and then click B, B's visiable will be true and the A's visiable will be false.  

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
"
,,,https://github.com/facebook/react/issues/8515,8515,onChange event is not triggering in Mozilla and IE for type=file React js/Redux,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,3,2016-12-07T14:16:24Z,2018-01-16T04:57:35Z,2017-10-04T15:33:19Z,NONE,completed,,"I am pretty new guy to react js.I am little bit confused why input type=file action is not working in Mozilla and IE it is  working fine in Chrome.I don't why it is not working...Is this a bug


```
 import React from 'react';
        import {connect} from 'react-redux';
        import uuid from 'node-uuid'
        import * as headerAction from '../../Actions/headerActions';
        import * as uploadActions from '../../Actions/uploadActions';
        import * as notificationActions from '../../Actions/notificationActions';
        import shortid from 'shortid'
        
        class Header extends React.Component{
            static contextTypes = {
                router:React.PropTypes.object
            };
        
            constructor(props){
                super(props);
        
                this.Hovered = this.Hovered.bind(this);
                this.UnHovered = this.UnHovered.bind(this);
                
        
            }
            UnHovered(){
                this.props.toggleMenu(false);
            }
            uniqueNameAndId(){
                return uuid.v1().replace(/-/g, '');
            }
            //below function not triggered When onChange Event happen But file upload pops up
            handleFileUpload(e){
               //Not working
                 e.preventDefault();
                 this.props.setMainPostId(shortid.generate())
    
    //Upload for single File not working
                const reader = new FileReader();
               const file = e.target.files;
                console.log(file.length);
                reader.onload = () => {
                    console.log(""Hello"",file.name)
                };
        
                let file = e.target.files[0];
                reader.readAsDataURL(file);
        
        //Upload for Multiple files NOt working
                {/*if(file.length <= 5){*/}
                    {/*for(let i=0;i<file.length;i++){*/}
                //         const Reader = new FileReader();
                //         Reader.onload = () => {
                //             let pushData = {
                //                 postOwnerUsername:null,
                //                 id:this.uniqueNameAndId(),
                //                 name:this.uniqueNameAndId(),
                //                 caption:null,
                //                 blobData:Reader.result
                //             };
                //             console.log(pushData)
                //             this.props.pushtoReducer(pushData)
                //         };
                //         Reader.readAsDataURL(file[i])
                //     }
                //     this.props.removeUploadMenu(false)
                //     this.context.router.push('/upload');
                // }else{
                //     console.log('No Dude')
                //     this.props.popErrorNotification(true,""#FF5D5D"",""Current Max Photo 5"")
                // }
        
        
        
        
            }
            loggedInMenu(){
                return(
                    <div>
        
                        <li>Explore</li>
                        <li>My uploads</li>
                        {this.props.toggle.removeUploadMenu ?
                            <li>
                                <label htmlFor=""upload-photo"">Upload</label>
        
                                <input onChange={this.handleFileUpload.bind(this)} id=""upload-photo"" type=""file"" multiple/>
                            </li>:
                            """"
                        }
        
                        <li>Profile</li>
                        <li><a href=""/logout"">Logout</a></li>
                    </div>
                )
            }
            loggedOutMenu(){
                return(
                    <div>
                        <li onClick={()=>this.props.toogleSignInOut(true)}>SignUp/SignIn</li>
                        <li>Explore</li>
        
                    </div>
                )
            }
            renderMenu(){
                return(
                    <div onMouseLeave={this.UnHovered}>
                        <div  className=""dtcen"">
                            <div className=""dt"">
        
                            </div>
                        </div>
        
                        <div className=""dropdown"">
        
                            {this.props.logInStatus.loginStatus ? this.loggedInMenu():this.loggedOutMenu()}
        
        
                        </div>
                    </div>
                )
            }
            Hovered(){
        
                this.props.toggleMenu(true);
            }
            render(){
        
               // console.log('From uuis',this.uniqueNameAndId())
                //console.log(""Login Status"",this.props.toggle.removeUploadMenu)
        
                return(
        
                    <header>
                        <div className=""logo"">
                            <p>Masklor </p>
                        </div>
                        <div className=""navtoggle"">
                            <div onMouseEnter={this.Hovered} className=""triangle"">
                                <p>Menu</p>
                            </div>
        
                            {this.props.toggle.menuToggle ? this.renderMenu() : """"}
        
                        </div>
                    </header>
        
        
                )
            }
        }
        
        const mapStateToProps = (state) => {
          return{
             toggle:state.toggle,
              logInStatus:state.logInStatus,
              photos:state.photoUpload
          }
        };
        
        const mapDispatchToProps = (dispatch) => {
            return{
                toggleMenu:bool => dispatch(headerAction.toggleStatus(bool)),
                toogleSignInOut:bool => dispatch(headerAction.toggleSignPop(bool)),
                pushtoReducer:object => dispatch(uploadActions.setPhotosState(object)),
                popErrorNotification:(bool,color,message) => dispatch(notificationActions.popUpNotification(bool,color,message)),
                removeUploadMenu:bool => dispatch(headerAction.removeUploadMenu(bool)),
                setMainPostId:id =>dispatch(uploadActions.setIdforMainPost(id))
            }
        }
        
        export default connect(mapStateToProps,mapDispatchToProps
)(Header)
```"
,,,https://github.com/facebook/react/issues/8588,8588,React 15.4.1  missing files.,[],closed,False,,13,2016-12-16T08:17:25Z,2016-12-16T13:55:39Z,2016-12-16T10:49:02Z,NONE,completed,,"```
module.js:471
    throw err;
    ^

Error: Cannot find module 'react/lib/ReactDOMServer'
    at Function.Module._resolveFilename (module.js:469:15)
    at Function.Module._load (module.js:417:25)
    at Module.require (module.js:497:17)
    at require (internal/module.js:20:19)
    at Object.<anonymous> (/etc/nginx/sites-available/React-router-Redux-isomorphic-Boilerplate/node_modules/react-dom/server.js:3:18)
    at Module._compile (module.js:570:32)
    at Object.Module._extensions..js (module.js:579:10)
    at Module.load (module.js:487:32)
    at tryModuleLoad (module.js:446:12)
    at Function.Module._load (module.js:438:3)
    at Module.require (module.js:497:17)
    at require (internal/module.js:20:19)
    at Object.<anonymous> (/etc/nginx/sites-available/React-router-Redux-isomorphic-Boilerplate/src/dist/server.js:23:15)
    at Module._compile (module.js:570:32)
    at Object.Module._extensions..js (module.js:579:10)
    at Module.load (module.js:487:32)
```
"
,,,https://github.com/facebook/react/issues/8540,8540,Attach ReactEventListener for ajax/dynamically loaded content,[],closed,False,,2,2016-12-09T12:16:20Z,2016-12-12T07:22:20Z,2016-12-12T07:22:19Z,NONE,completed,,"Is there any way to attach onChange event listening like we do in Render function. HTML that loaded with AJAX and inserted via `dangerouslySetInnerHTML`

Example:
top:
```
import ChangeEventPlugin from 'react/lib/ChangeEventPlugin'
import EventConstants from 'react/lib/EventConstants'
```
on Render:
` <div ref=""form"" dangerouslySetInnerHTML={{ __html: this.state.formContent || '' }} />`

onDidMount:
```
ajax-> this.setState({
          formContent: response.html
        })
```

onDidUpdate:
```
this.refs.form.querySelectorAll('input, textarea, select').forEach((node) => {
      let topChange = EventConstants.topLevelTypes.topChange
      node._hostNode = node
      let event = ChangeEventPlugin.extractEvents(topChange, node, ???)
      console.log(event)
    })
```

But can't get it work with callback.

The issue is when `dispatchEvent` called `bookKeeping` variable refs to `div` not on dynamically loaded Nodes.

Any suggestion will be great.

EDIT:
Possibly looks like I want to trigger `enqueuePutListener` from React Dom manually

P.S.
I'm trying to work only with Native things. Do not suggest jQuery or document.addEventListener (I looking for multi-browser and multi-input types solutions like is done in React)."
,,,https://github.com/facebook/react/issues/8576,8576,15.4 breaks default param behavior on componentDidMount in production build,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,5,2016-12-14T21:46:00Z,2017-10-04T16:03:23Z,2017-10-04T16:03:22Z,NONE,completed,aweary,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
only when `NODE_ENV=production`: `null` is being passed as first argument to `componentDidMount`. this becomes an issue when a default param is specified for `componentDidMount`.

from the backtrace from the componentDidMount call it seems like the difference between 15.3 and 15.4 is the extra `arg` argument in this line:

https://github.com/facebook/react/blob/308e0b77863071f31cff7aec74e359603526274e/src/renderers/shared/stack/reconciler/CallbackQueue.js#L73

**Repro**
https://github.com/kentor/throwaway/tree/master/react-15.4-breaks-default-param
clone the project then cd into it
```
cd react-15.4-breaks-default-param
yarn
npm run dev
```
open  localhost:9966 (with an es6 supported browser) and open the console, it should log a message. kill the wzrd process

then run
```
npm run prod
```
then refresh localhost:9966, the console should log null

**What is the expected behavior?**
they should either both log `this should be logged` or they should both log `null`. development build and production build shouldn't differ in this regard

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
15.4. Everything was OK in 15.3"
,,,https://github.com/facebook/react/issues/8578,8578,Attempted to update component `t`: What is `t`?,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,3,2016-12-15T05:17:46Z,2016-12-15T22:08:14Z,2016-12-15T22:08:14Z,NONE,completed,,"*feature request*

**What is the current behavior?**
`Attempted to update component `t` that has already been unmounted (or failed to mount).`

**What is the expected behavior?**
`Attempted to update component `<ProperComponentName>` that has already been unmounted (or failed to mount).`

We do not have a component `t`. It would help if the error message would tell which component.

**""react"": ""15.3.2""**"
,,,https://github.com/facebook/react/issues/8473,8473,Try/cath render childrens,[],closed,False,,7,2016-12-01T11:44:37Z,2016-12-01T18:57:11Z,2016-12-01T18:01:28Z,NONE,completed,,"Hi, i have a problem in my application, this use a window with various childrens. 

![captura de tela 2016-12-01 as 09 32 35](https://cloud.githubusercontent.com/assets/6270495/20792503/42fb4fba-b7a9-11e6-9056-36e9aaba5820.png)

Each card is a children. The problem occurs when load data from server, and a runtime exception happens. Then others childrens not load. I believe the problem would be solved with try/catch in father component, 
but I did not figure out how to do it."
,,,https://github.com/facebook/react/issues/8901,8901,Warning message is swallowed when using shape inside oneOfType,"[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null}]",closed,False,,13,2017-01-31T09:33:40Z,2017-03-12T00:25:14Z,2017-03-12T00:25:14Z,NONE,completed,,"See http://codepen.io/jochenberger/pen/egVNzX
I'd expect a warning that says ""Invalid prop `bar` supplied to `App`. A foo should not have a bar.' Or even better ""Invalid prop `foo.bar` supplied to..."".
But I only get ""Invalid prop `foo` supplied to `App`"".
"
,,,https://github.com/facebook/react/issues/8821,8821,unstable_handleError - allow disabling of making the error bubble up to the parent upon retry,[],closed,False,,7,2017-01-18T20:14:15Z,2017-01-21T00:51:49Z,2017-01-18T21:18:40Z,NONE,completed,,"The `unstable_handleError` feature #2461 , which allows for error boundaries in components, will attempt to re-render the component after the first error is handled in the boundary defined in `unstable_handleError`.

On this second render, by design, if an unhandled error occurs in the render, the error bubbles up to the parent:
https://github.com/facebook/react/blob/3bc5595dfd6db741b19f17e7aef98b2c1e4be847/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js#L483

It would be better if we can configure this behavior - to be able to choose to have it bubble up, or be handled by the `unstable_handleError` upon retry.

In our case, it is acceptable to continue to retry over and over to render the screen and have a few errors, as there is the occasional race condition where the current state is not ready yet for the current component being rendered. It can error a few times until the state is ready."
,,,https://github.com/facebook/react/issues/8847,8847,DOM element rendered with same props is not detected as wasted,[],closed,False,,1,2017-01-23T02:52:30Z,2017-10-04T16:27:34Z,2017-10-04T16:27:34Z,NONE,completed,,"I found this issue when  #trying to demo React Perf in Chrome which basically utilizing `react-addons-perf`. When `input` DOM element is rendered with same `checked={true}` or `checked=""checked""` prop, it is not detected as wasted.

Code below cannot not be detected as wasted even onClick is new function for every render.
```
const DumbCompnent = ({onClick, text, completed}) => {
  return (
    <div>
      <input type=""checkbox"" checked={completed} readOnly onClick={onClick} /><label>{text}</label>
    </div>
  );
}
```

Interestingly, if the code just exempt `checked` prop if the value is false, it can detect it as wasted properly. Code as below
```
const DumbCompnent = ({onClick, text, completed}) => {
  const checkedProp = completed ? {checked: true} : {};
  return (
    <div>
      <input type=""checkbox"" {...checkedProp} readOnly onClick={onClick} /><label>{text}</label>
    </div>
  );
}
```

I have created minimal TODO-like project to reproduce this issue https://github.com/mocheng/sample-wasted

Repro Steps:
1. Click ""Start"" on Perf Tab;
2. Check one item in web page;
3. Click ""Stop"" on Perf Tab;

Expected Result: It should detect wasted render .

Actual Result: No wasted is detected.

This can be reproduced In React v15.4.2."
,,,https://github.com/facebook/react/issues/8869,8869,onSubmit handler has Proxy object as first argument,[],closed,False,,2,2017-01-26T02:18:30Z,2017-01-26T16:20:12Z,2017-01-26T16:20:12Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
I believe this is a bug, since I can't find any documentation on this behavior changing.

**What is the current behavior?**
When calling a submit handler like `onSubmit`, the first argument is a `Proxy` object and the second argument is an `Event` object.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**
https://codepen.io/anon/pen/zNEGpw?editors=0010

(see the console to see both objects)

**What is the expected behavior?**
The first argument should be an `Event` object, not a `Proxy` object.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
This is happening in react 15.4.1 and 15.4.2. It is not happening on 15.3.1."
,,,https://github.com/facebook/react/issues/8874,8874,Remove or rewrite examples,[],closed,False,,9,2017-01-26T18:11:37Z,2017-07-12T11:22:33Z,2017-07-12T11:22:33Z,CONTRIBUTOR,completed,,"Prompted by https://github.com/facebook/react/pull/6925#issuecomment-275452387. Our examples are really not great examples of how to use React. They are not maintained at all and add little value.

We should consider either:

1. Rewriting all the examples so they are easier to use and represent good practices.
2. Rewrite only a couple and remove all the rest
3. Remove all examples

I'm partial to just removing all of them, or if anything providing a single example that is well built.

cc @gaearon @spicyj @bvaughn "
,,,https://github.com/facebook/react/issues/8838,8838,dangerouslySetInnerHTML should NOT remove script tag,[],closed,False,,14,2017-01-21T01:36:59Z,2020-02-28T04:50:07Z,2017-07-12T11:23:41Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug
**What is the current behavior?**
There are many cases in the real-world where we need to inject external 3rd party script. For example, adding google-analytics code, adding stripe button and so on. Currently dangerouslySetInnerHTML removes the script tag making it hard to simply inject JS code to the page.
Because of this issue, people are writing **bloated** components like [react-ga (google analytics)](https://github.com/react-ga/react-ga) that's 12KB(minimized) and all it does it to add a script tag! There are other similar libs like: [react-scripts](https://www.npmjs.com/package/react-scripts) and [stripe-checkout]( https://github.com/azmenak/react-stripe-checkout) (8KB minimized to add the script).

I believe that at least when using dangerouslySetInnerHTML, we should not remove script tag and instead run the script.

For example, adding stripe's button is as follows.
https://stripe.com/docs/checkout/tutorial#embedding
```
<form action=""/your-server-side-code"" method=""POST"">
  <script
    src=""https://checkout.stripe.com/checkout.js"" class=""stripe-button""
    data-key=""pk_test_5qV78InO5XtnYvFRZ2VKnIjy""
    data-amount=""999""
    data-name=""Demo Site""
    data-description=""Widget""
    data-image=""https://stripe.com/img/documentation/checkout/marketplace.png""
    data-locale=""auto"">
  </script>
</form>
```
**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**

```
var StripeCheckout = React.createClass({
  createMarkup: function() {
    return {__html: 
      `Below script should create a Stripe button:
      <form action=""/your-server-side-code"" method=""POST"">
        <script
          src=""https://checkout.stripe.com/checkout.js"" class=""stripe-button""
          data-key=""pk_test_5qV78InO5XtnYvFRZ2VKnIjy""
          data-amount=""999""
          data-name=""Demo Site""
          data-description=""Widget""
          data-image=""https://stripe.com/img/documentation/checkout/marketplace.png""
          data-locale=""auto"">
        </script>
      </form>`
    };
  },
  render: function() {
    return  <span dangerouslySetInnerHTML={this.createMarkup()} />;
  }
})

ReactDOM.render(
  <StripeCheckout />,
  document.getElementById('container')
);
```

**What is the expected behavior?**
It should display a ""Stripe"" button button.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
15.4.2. I believe that this is how React worked for a long time."
,,,https://github.com/facebook/react/issues/8744,8744,Make Circle run properly on 15-stable branch,"[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null}]",closed,False,,4,2017-01-10T23:35:40Z,2017-01-31T16:14:29Z,2017-01-31T16:14:29Z,COLLABORATOR,completed,,We're missing the .circle.yml config on our 15-stable branch. It would be great to copy it over and whatever other files need to be copied to make CI pass. Anyone should be able to test by sending a PR to 15-stable (unlike normal PRs which go to master) with the changes and seeing if Circle will pass. It might be as simple as just copying .circle.yml and scripts/circleci.
,,,https://github.com/facebook/react/issues/8709,8709,"When children is Array, the error message of validateChildKeys not consistent.",[],closed,False,,6,2017-01-07T18:04:36Z,2017-10-04T16:18:28Z,2017-10-04T16:18:28Z,NONE,completed,,"**validateChildKeys results were inconsistent**
```js
// ReactElementValidator.createElement
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }
```
```js
// ReactElement.createElement
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    if (process.env.NODE_ENV !== 'production') {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }
```

**When *childrenLength* equals 1, the result is different.**

**And try this for the result: [http://jsbin.com/nonucegozo/edit?html,output](http://jsbin.com/nonucegozo/edit?html,output)**

**sorry, My English is on the way, I use the google translate.**

**Thanks.**"
,,,https://github.com/facebook/react/issues/8909,8909,pasteOnCapture triggers when the DOM event is in the bubbling phase,"[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,4,2017-02-01T04:32:07Z,2017-10-04T16:39:05Z,2017-10-04T16:39:04Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
BUG
**What is the current behavior?**
When setting up an `onPaste` handler, react provides two choices: `onPaste`, or `onPasteCapture`. In both cases, the DOM event.currentTarget is the #document (which is reasonable given how react's delegate behavior works), but the `eventPhase` is `3` (aka bubbling) in BOTH cases.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar 
http://jsbin.com/dacolavipe/edit?js,console,output

**What is the expected behavior?**
Expected is that `onPasteCapture` fires when the DOM event is in the capture phase. This is needed to be able to manipulate the paste handler properly when playing focus games on Edge

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Latest version of React, affects at least Chrome and Edge, but I suspect it is browser/OS independent.
"
,,,https://github.com/facebook/react/issues/8980,8980,setState errors,[],closed,False,,2,2017-02-12T11:20:00Z,2017-02-12T12:30:30Z,2017-02-12T12:30:30Z,NONE,completed,,"Hey Guys, Im new to react and I wanted to know why the setState always gives me this: bundle.js:53089 Uncaught (in promise) TypeError: Cannot read property 'setState' of undefined

this is my code:

```
firebase.auth().onAuthStateChanged(function(user) {
     if (user) {
       axios.get('http://api-goes-here).then(function(res){
         this.setState({facebook : 11111}, function(){
           console.log(this.state.facebook);
         });
       })
     }
   }.bind(this));
```"
,,,https://github.com/facebook/react/issues/8932,8932,setState doesn't call render when testing React components,[],closed,False,,1,2017-02-06T12:38:39Z,2017-02-06T14:32:20Z,2017-02-06T14:32:20Z,NONE,completed,,"First case - When using a ref function that holds the rendered instance and then taking an action.
```
const renderComponent = (element, callback) => {
    ReactDOM.render(
    <MyElement {...props} ref={instance => { callback(instance); } />
    , element);
};

const myDiv = document.createElement('div');
renderComponent(myDiv, instance => {
   spyOn(instance, 'render').and.callThrough();
   TestUtils.Simulate.click(myDiv.querySelector('<some-btn>')); // will call setState
  expect(instance.render).toHaveBeenCalledTimes(1); // throws error that render hasn't been called. since the rendering was called asynchronously I guess.
});
```

Second case - Without using the ref (which is now deprecated).
```
const renderComponent = (element, callback) => {
    const instance = ReactDOM.render(
    <MyElement {...props} />
    , element);
    callback(instance);
};

const myDiv = document.createElement('div');
renderComponent(myDiv, instance => {
   spyOn(instance, 'render').and.callThrough();
   TestUtils.Simulate.click(myDiv.querySelector('<some-btn>')); // will call setState
  expect(instance.render).toHaveBeenCalledTimes(1); // works, since the rendering was called right away
});
```

So the issue here, Is it necessary to batch the rendering in the first case presented?
and if so, is there a way to disable batching in react? It should be very useful for testing matters.
"
,,,https://github.com/facebook/react/issues/9011,9011,Key property on SVG elements causes warning,[],closed,False,,7,2017-02-15T19:38:55Z,2017-02-15T21:03:17Z,2017-02-15T21:03:17Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
When I use `key` property on SVG elements (line, text, circle), I see `Warning: line: 'key' is not a prop`.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**

Can't reproduce it in JSFiddle ([tried](https://jsfiddle.net/reactjs/69z2wepo/)), but can in a fresh project created with `create-react-app`

**What is the expected behavior?**

No warnings

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

- Project created with `create-react-app`
- React version is `15.4.2`
- MacOS 10.12.3
- Chrome 56.0.2924.87"
,,,https://github.com/facebook/react/issues/9052,9052,is it possible to remove ref /key /children from Props ? ,[],closed,False,,3,2017-02-23T06:28:04Z,2017-10-04T18:13:19Z,2017-10-04T18:12:48Z,NONE,completed,,"Currently `React.createElement(ctor,props,children)`  extracting ref/key from props (props.key/props.ref) ,because of this compiled to js lanuages([scala.js](http://www.scala-js.org/),[bukclescript/reasonml](https://github.com/bloomberg/bucklescript),..) can't use their native classes as props (currently they wrapping inside js literal).

With Inline elements `{ type: Baz, props: { }, key: 'baz', ref: null } ` they can use native classes as props but it fails when component have children/ref 

From my point of view props should be Component Props and ref,key,children should be placed in different location! 
"
,,,https://github.com/facebook/react/issues/9229,9229,react-dom v15.4.2  fails to load for latest nodejs v7.7.3 (missing dependencies from clean install on travis-ci),[],closed,False,,2,2017-03-21T15:03:21Z,2017-03-22T06:53:22Z,2017-03-21T15:08:44Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
react-dom@15.4.2 cannot successfully be required by node v7.73

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**

reproduction here @ this travis-ci build
https://travis-ci.org/npmdoc/node-npmdoc-react-dom/builds/213432945#L330
```
testCase testCase_buildApidoc_default failed
Cannot find module 'react/lib/ReactComponentTreeHook'
Error: Cannot find module 'react/lib/ReactComponentTreeHook'
    at Function.Module._resolveFilename (module.js:470:15)
    at Function.Module._load (module.js:418:25)
    at Module.require (module.js:498:17)
    at require (internal/module.js:20:19)
    at Object.<anonymous> (/home/travis/build/npmdoc/node-npmdoc-react-dom/node_modules/react-dom/lib/ReactDebugTool.js:16:30)
    at Module._compile (module.js:571:32)
    at Object.Module._extensions..js (module.js:580:10)
    at Module.load (module.js:488:32)
    at tryModuleLoad (module.js:447:12)
    at Function.Module._load (module.js:439:3)
[node test-case 1 of 1 failed] - testCase_buildApidoc_default
```

**What is the expected behavior?**
react-dom@15.4.2 should successfully be required by node v7.73

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
don't know only install latest version of react on latest version of nodejs on travis-ci"
,,,https://github.com/facebook/react/issues/9112,9112,Question/Bug report in higher-order-components.md,[],closed,False,,1,2017-03-04T23:55:29Z,2017-03-05T20:25:08Z,2017-03-05T20:25:08Z,NONE,completed,,"Hey, at the moment the docs at https://github.com/facebook/react/blob/master/docs/docs/higher-order-components.md (and in https://facebook.github.io/react/docs/higher-order-components.html#static-methods-must-be-copied-over) say that static methods need to be copied over.

However, class inheritance in JavaScript also works for static properties.

```js
class Base {
  static get x() { return 5; }
}
class Sub extends Base {}
console.log(Sub.x); // 5
```

Looking at the recommended `hoist-non-react-statics` it looks like it just [copies the properties over](https://github.com/mridgway/hoist-non-react-statics/blob/master/index.js#L41) but `extends` is supposed to do that (with prototypical inheritance) anyway.

Is this an error in the docs (from a time ES2015 classes were not used, in ES5 `Function.prototype` extension this doesn't work - only with classes)? "
,,,https://github.com/facebook/react/issues/9307,9307,this.props undefined,[],closed,False,,5,2017-03-31T14:33:08Z,2017-03-31T22:49:08Z,2017-03-31T17:56:08Z,NONE,completed,,"SideBarDemo:
class SidebarDemo extends React.Component {

constructor(props, context) {
    super(props, context);

    this.state = {
        isVisible: false,
        layout:""Hierarchial"",

    };
}
render(){

return(
<div><App layout={this.state.layout}/></div>

);
}
App:
static createDefaultGraph() {

if(this.props.layout===""Hierarchial""){
//do something
}

render(){
console.log(this.props.layout);
return(

);

}

}

""when I use console.log(this.props.layout) in App I able to get value of layout but when calling this.props.layout in createDefaultGraph method it gives ""TypeError: Cannot read property 'layout' of undefined"" """
,,,https://github.com/facebook/react/issues/9180,9180,[Feature/Issue] Throw Warning when defaultProp is set for a isRequired propType,[],closed,False,,2,2017-03-15T06:28:34Z,2020-03-12T21:05:09Z,2017-03-17T22:25:35Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**
*Feature*
**What is the current behavior?**
Currently, when you declare 
`TitleBar.propTypes = {
  title: React.PropTypes.string.isRequired
};`

And then declare
`TitleBar.defaultProps = {
  title: 'Default Title'
}`

When you go ahead and use the `<TitleBar/>` component without declaring the title prop no error is thrown (like is supposed to happen when using isRequired). Based on the documentation ([here](https://facebook.github.io/react/docs/typechecking-with-proptypes.html)) it states 

> The propTypes typechecking happens after defaultProps are resolved, so typechecking will also apply to the defaultProps.

So this is expected behavior. I think when a user is using `isRequired` there should at least be a warning to change the propType typechecking to optional. 

Also I'd love to try and fix this myself so if I could get some pointers that would be much appreciated as I've never contributed to React before.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React version 15.4.2, Running Chrome on Mac OS X El Capitan V 10.11.6"
,,,https://github.com/facebook/react/issues/9133,9133,RN APP will reject by apple? ,[],closed,False,,1,2017-03-08T02:49:20Z,2017-03-08T02:56:50Z,2017-03-08T02:55:19Z,NONE,completed,," JSPatch applications are rejected by apple, RN APP will be rejected ？
"
,,,https://github.com/facebook/react/issues/9095,9095,this.props inside a method no longer works,[],closed,False,,7,2017-03-02T14:41:53Z,2017-06-17T03:35:59Z,2017-03-02T16:15:59Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
I believe this might be a bug, I'm not 100% sure. A little while ago, with `react-scripts: 0.7.0`, I could do something like this:
```
class MyComponent extends React.Component{
    render(){
        return (<div>Hello {this.props.name}</div>
    }
}
```
And It'd work fine

But now, it says

> Cannot read property 'name' of undefined

I can still do
```
class MyComponent extends React.Component{
    constructor(props){
        super(props);
        this.name = props.name;
    }
    render(){
        return (<div>Hello {this.name}</div>
    }
}
```


I've tried to reproduce that in https://github.com/cyberhck/react-test-bare project.
PS:
this [commit](https://github.com/cyberhck/react-test-bare/commit/0d9d8f08f4fe82d265349aae19a0a76eb6dc9b36) results in failure of tests

**What is the expected behavior?**

I was expecting that to work.

It used to work before, but now it won't work.

Or is it the intended behavior? Or am I doing something wrong?"
,,,https://github.com/facebook/react/issues/9248,9248,Add Jest to Tic Tac Toe tutorial,[],closed,False,,14,2017-03-24T06:15:51Z,2017-04-18T15:47:59Z,2017-04-18T14:00:20Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**

Would there be any interest in adding a Jest section to the Tic Tac Toe tutorial doc? I'm currently working on my own tutorial (based on Eric's code) so figured I'd ask. If it's beyond the scope of React docs, it could also be added as another bullet point in the ""Wrapping Up"" section."
,,,https://github.com/facebook/react/issues/9135,9135,autoCompleteType attribute unknown prop warning,[],closed,False,,5,2017-03-08T14:46:56Z,2017-03-08T17:07:15Z,2017-03-08T16:52:59Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
BUG

**What is the current behavior?**
If you add an autoCompleteType attribute to an input react will warn with this.

`Warning: Unknown prop 'autoCompleteType' on <input> tag. Remove this prop from the element.`

here is a fiddle that shows the issue
https://jsfiddle.net/wjvfxq6r/2/

**What is the expected behavior?**
autoCompleteType does seem to be a standard, there for it should not warn.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Tested version is 15.4.2.  All browsers
"
,,,https://github.com/facebook/react/issues/9181,9181,PropTypes.oneOf relies upon stringification when using Symbols,[],closed,False,,2,2017-03-15T08:06:08Z,2019-02-08T22:27:41Z,2017-04-09T21:12:30Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
`React.PropTypes.oneOf` prints a less than helpful error message when passed a Symbol which is not in the target value set: `Failed prop type: Cannot convert a symbol to a string`

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar.**

http://codepen.io/anon/pen/BWdEKb?editors=1011#0

**What is the expected behavior?**
`oneOf` prints the same or similar helpful error message that other primitive types get: 
```Failed prop type: Invalid prop `symbolSize` of value `Symbol(medium)` supplied to `Thing`, expected one of [Symbol(small),Symbol(large)].```


**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 15.4.2
macOS 10.12.3 / Safari 10.0.3 and Chrome 57.0.2987.98
Never worked"
,,,https://github.com/facebook/react/issues/9501,9501,"Keys not working, element loses css transition",[],closed,False,,4,2017-04-23T01:25:41Z,2017-06-13T23:40:55Z,2017-06-13T23:40:55Z,NONE,completed,,"If I swap the position of two react elements (`item0` and `item1`) positioned with `transform: translate();` a css transition is triggered, only if the elements were rendered in the same order.

If I change the order of the render (position swap still the same but now `item0` renders after `item1`), the css transition is not triggered.

It looks like react is deleting the DOM element and recreating it, even if they have React **keys** set and no `componentDidMount`/`componentWillUnmount` are called.

Here is a simple JSfiddle with the problem.

https://jsfiddle.net/santiagopuentep/vvpezbp9/2/"
,,,https://github.com/facebook/react/issues/9345,9345,Offer an opinionated helper for HOC creation for authors,[],closed,False,,5,2017-04-05T17:57:04Z,2017-09-20T16:20:45Z,2017-09-20T16:20:45Z,NONE,completed,,"HOCs are great, I think we can all agree. What is not so great, however, is that React has no opinion on how people should implement HOCs, and so both users and authors alike have no guideline when it comes to implementing a consistent api for ""using multiple HOCs"", especially when those HOCs get chained. As such, I think that there's an opportunity to make the lives of both developers who work with React, as well as HOC maintainers who have to make sure their HOCs work in a variety of code bases easier by having React be slightly opinionated on how to write a HOC.

To describe the problem: right now there is no established way to ask a HOC for the component class(es) that were put in, nor an established way to access the ""real element"" that a HOC wraps. As such, each HOC has to either settle for ""too bad for my users"" or invent its own API for this, and as many have gone the second route, there are a fair few different ways that this access has been implemented over different HOCs.

To fix this, I'd like to suggest establishing a best practice, guided by React, by adding a `React.createHOC({ ... })` mechanism with corresponding `import HOC from React; class Thing extends HOC { ... }`"" to the next version of React, so that users and authors no longer need to guess APIs.

My suggestion would be for this React.HOC class to define:

- a constructor that takes an arbitrary number of Component classes
- a getClasses() function that returns the (list of) Component class(es) that were passed in
- a getInstances() function that returns the (list of) element(s) that the HOC actually builds (and knows how to access by `ref` based on the Component class names)

As an example (and the following code is public domain - which I unfortunately need to be point out because I am unable to sign the CLA necessary to file PRs, so I can't file a PR in conjunction to this issue. As such, the following code lacks as much implementation as possible so as to allow for PRs by others):

```
class HOC extends Component {
  constructor(...componentClasses) {
    this.componentClasses = componentClasses
  }

  getClasses() {
  /*
    Passed component might themselves be HOCs, so this function needs
    to perform an iteration check to build a valid list of contained classes.

      classesList = this.componentClasses.map( componentClass => {
        if (componentClass.getClasses) {
          return componentClass.getClasses()
        }
      }).filter( result => result)

    probably paired with an array flattening operation
  */
  }

  getInstances() {
  /*
    the same holds here; in order to make this work, a naming convention needs
    to be declared around refs: if you use React.HOC then you will name your refs
    after the component class you pushed in.

      instanceRefs = this.componentClasses.map( c => c.constructor.name )
      elements = instanceRefs.map(ref => this.refs[ref])

    this then needs the same check before we can return it:

      elements = elements.map(e=> e.getInstances ? e.getInstances() : e)

    and again probably with an array unpack so it's a flat list.
  */
  }
}
```

This lets React solve the problem of standardizing the barebones functionality that users and authors should be able to rely on to ""just work"", without interfering with how HOCs currently work, or dictating how people should write their HOCs: you can keep writing HOCs as plain Components that wrap one or more components, but extending from HOC now offers you a zero-effort option to impart some functionality for free that users will appreciate.

There is an interesting suggestion in https://github.com/yannickcr/eslint-plugin-react/issues/678#issuecomment-291816217 that instead relies on rebinding `props`, but this might not good enough as this would also expose refs used by the HOC for internal purposes, and the user should not be able to fiddle with.

Anyway, this is mostly an issue filed to get a ball rolling on not so much standardizing ""how HOCs should be made"" (it feels like React should stay unopinionated on that) but on having React offer a helping opinion on one way in which you can write a HOC, with the promise that using that means you're now compatible with any other HOC that uses the same suggestion."
,,,https://github.com/facebook/react/issues/9561,9561,Controlled input allows dot,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,10,2017-04-29T20:31:21Z,2017-06-05T22:52:15Z,2017-06-05T22:52:14Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
React allows a dot in a controlled input that doesn't allow changing the value, if the value set as a prop is a number. If it's a string the issue is not present.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**
https://jsfiddle.net/84v837e9/23/

In this example the first input allows a dot, even though the code doesn't allow changes. The second input doesn't allow the dot.

**What is the expected behavior?**
The dot shouldn't be allowed.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
version 15.5.4, Chrome and Firefox (see the jsfiddle example)"
,,,https://github.com/facebook/react/issues/9418,9418,Please stay PropTypes in lib,[],closed,False,,1,2017-04-13T12:13:12Z,2017-04-13T13:11:10Z,2017-04-13T13:11:10Z,NONE,completed,,"Subj,
vary many packages use it and very very many dependencies,
or create symlink in lib to 'prop-types' package"
,,,https://github.com/facebook/react/issues/9380,9380,Bug: render() before componentDidMount() ,[],closed,False,,1,2017-04-08T18:06:34Z,2017-04-08T22:13:43Z,2017-04-08T22:13:43Z,CONTRIBUTOR,completed,,"How to reproduce?

```bash
$ git clone git@github.com:comerc/cra-render-bug.git
$ cd cra-render-bug
$ yarn
$ yarn start
```

Chrome:

![2017-04-08 21 00 48](https://cloud.githubusercontent.com/assets/1025241/24831218/83daf15c-1c9e-11e7-8b55-7f487003fd9f.png)

Source:
```jsx
class App extends Component {
  componentDidMount() {
    console.log('componentDidMount')
  }
  render() {
    console.log('render')
    return (
      <div className=""App"">
      </div>
    );
  }
}
```

Ubuntu: 14.04
Chrome: 57
React: 15.5.3"
,,,https://github.com/facebook/react/issues/9351,9351,TypeError: Cannot read property 'firstChild' of null at precacheChildNodes (react-dom.js:6619),"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,23,2017-04-06T08:38:02Z,2017-04-06T23:31:54Z,2017-04-06T23:31:54Z,NONE,completed,bvaughn,"With 15.5.0-rc.1, I get
```
Uncaught TypeError: Cannot read property 'firstChild' of null
    at precacheChildNodes (react-dom.js:6619)
    at getNodeFromInstance (react-dom.js:6714)
    at ReactDOMComponent.trapBubbledEventsLocal (react-dom.js:5772)
    at CallbackQueue.notifyAll (react-dom.js:948)
    at ReactTestReconcileTransaction.close (react-dom.js:12207)
    at ReactTestReconcileTransaction.closeAll (react-dom.js:14993)
    at ReactTestReconcileTransaction.perform (react-dom.js:14940)
    at ReactUpdatesFlushTransaction.perform (react-dom.js:14927)
    at ReactUpdatesFlushTransaction.perform (react-dom.js:13047)
    at Object.flushBatchedUpdates (react-dom.js:13130)
```"
,,,https://github.com/facebook/react/issues/9524,9524,what does total time mean? in console log the total time is less than the sum of the time print by printInclude function,[],closed,False,,3,2017-04-25T15:24:01Z,2017-07-11T13:21:40Z,2017-07-11T13:21:40Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
"
,,,https://github.com/facebook/react/issues/9357,9357,404 Link in Web Components docs,[],closed,False,,3,2017-04-06T19:43:09Z,2017-10-04T16:40:36Z,2017-10-04T16:40:35Z,NONE,completed,,"

At the bottom of the Web components docs [https://facebook.github.io/react/docs/web-components.html](https://facebook.github.io/react/docs/web-components.html) page there's a link to a 404.

[https://github.com/facebook/react/tree/master/examples/webcomponents](https://github.com/facebook/react/tree/master/examples/webcomponents)
"
,,,https://github.com/facebook/react/issues/9421,9421,[DOCS] The new tabs on installation page doesn't work with link,[],closed,False,,1,2017-04-13T20:06:26Z,2017-04-13T20:52:24Z,2017-04-13T20:51:20Z,NONE,completed,,"Opening the link https://facebook.github.io/react/docs/installation.html#adding-react-to-an-existing-application displays the ""Try React"" tab."
,,,https://github.com/facebook/react/issues/9630,9630,persistant event,[],closed,False,,2,2017-05-09T04:51:14Z,2017-05-23T07:03:43Z,2017-05-16T21:06:13Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
persistent event is broken
console prints different values before and after async operation
```
[""number"", ""3""]
[""number"", """"]
```

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**
http://codepen.io/trejgun/pen/YVYYqO

**What is the expected behavior?**
console should print same value before and after async operation 
```
[""number"", ""3""]
[""number"", ""3""]
```

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

i'm using
react 15.5.4
chrome 58.0.3029.96 (64-bit)
os mac

"
,,,https://github.com/facebook/react/issues/9631,9631,React + Djnogo,[],closed,False,,3,2017-05-09T05:40:22Z,2017-05-11T15:06:23Z,2017-05-11T15:06:22Z,NONE,completed,,"hello, I use react+djnogo to develop web system, but I meet a issue，it can not upload picture use the form tag with input tag, I put this tags in React render function, I do not know where the problem is. I need help, thanks very much!
"
,,,https://github.com/facebook/react/issues/9614,9614,How to get PropType info from a Component (even built in's),[],closed,False,,5,2017-05-05T13:27:56Z,2017-05-05T16:26:21Z,2017-05-05T13:42:22Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Feature

**What is the current behavior?**

Unknown

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**

**What is the expected behavior?**

It would be nice if there was something like PropTypes.getPropTypes(Component) that would accept a component and return its PropType definitions.  This should work for anything including default HTML element types.

Something like:

```
PropTypes.getPropTypes('span');
PropTypes.getPropTypes(MyComponent);
```

Even better would be if it worked with elements as well, but that seems like you could just hit the element's prototype.

Currently I can't find a good way to do an ""extension"" and retain the prop types of the default component, and/or a way to get prop types from HTML elements.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

""react-dom"": ""^15.5.4"""
,,,https://github.com/facebook/react/issues/9807,9807,[Fiber]ref(instance) cause error,[],closed,False,,8,2017-05-29T14:39:46Z,2020-04-20T16:38:53Z,2017-05-30T11:38:26Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**
I am not sure,maybe a bug.

**What is the current behavior?**
```
Uncaught TypeError: ref is not a function
    at commitAttachRef (eval at 18 (vendor.bf495772693e68a40763.js:746), <anonymous>:13520:7)
    at commitAllLifeCycles (eval at 18 (vendor.bf495772693e68a40763.js:746), <anonymous>:13995:9)
    at HTMLUnknownElement.boundFunc (eval at 18 (vendor.bf495772693e68a40763.js:746), <anonymous>:229:14)
    at invokeGuardedCallback (eval at 18 (vendor.bf495772693e68a40763.js:746), <anonymous>:243:16)
    at invokeGuardedCallback (eval at 18 (vendor.bf495772693e68a40763.js:746), <anonymous>:278:34)
    at commitAllWork (eval at 18 (vendor.bf495772693e68a40763.js:746), <anonymous>:14101:19)
    at completeUnitOfWork (eval at 18 (vendor.bf495772693e68a40763.js:746), <anonymous>:14241:11)
    at performUnitOfWork (eval at 18 (vendor.bf495772693e68a40763.js:746), <anonymous>:14273:14)
    at workLoop (eval at 18 (vendor.bf495772693e68a40763.js:746), <anonymous>:14395:26)
    at HTMLUnknownElement.boundFunc (eval at 18 (vendor.bf495772693e68a40763.js:746), <anonymous>:229:14)
```

And when I debugger,I find below:

![Imgur](http://i.imgur.com/VMCfXAb.jpg)

![Imgur](http://i.imgur.com/QyT4Hsx.jpg)

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

I use react-16.0.0-alpha.12. windows-64,chrome-canary-61.0.3113.0
"
,,,https://github.com/facebook/react/issues/9623,9623,react/PATENTS suck!,[],closed,True,,3,2017-05-07T18:52:19Z,2017-09-22T22:09:26Z,2017-05-07T19:23:41Z,NONE,completed,,"What is wrong with you people... who puts this sort of indirect limitation on an ""open source"" project... 

I just started to use react and I love it, why on earth this (I don't have the right words for it)...

So if Facebook breaks the rules they will break my projects... this is a lowest thing ever done by you Facebook!

Maybe it is not code related but it is a developer potential abuse!"
,,,https://github.com/facebook/react/issues/9774,9774,[Question] How to make Table Date Scheduler with Previous and Next Button in React,[],closed,False,,3,2017-05-25T08:33:08Z,2017-05-26T01:38:13Z,2017-05-26T01:38:13Z,NONE,completed,,"![screen shot 2017-05-25 at 4 33 50 pm](https://cloud.githubusercontent.com/assets/27617963/26442664/0b7fc356-4168-11e7-8a1a-adf54da88893.png)
"
,,,https://github.com/facebook/react/issues/9808,9808,Problem with unstable_renderSubtreeIntoContainer and refs,[],closed,False,,6,2017-05-29T14:57:29Z,2017-06-21T23:31:13Z,2017-06-13T11:23:03Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Report a bug.

**What is the current behavior?**
I use the usual technique of portals with unstable_renderSubtreeIntoContainer. Also I need to control portal children with `refs` (using legacy syntax I know).

The problem is `unstable_renderSubtreeIntoContainer` is async and can be called after `componentDidUpdate`. When refs are used in `componentDidUpdate`, they can be undefined due to async nature of `unstable_renderSubtreeIntoContainer`.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**
[Demo](https://jsfiddle.net/cassln/cusus029/2/). Open the browser console and press ""add"" button. You will got this error:
```
Uncaught TypeError: Cannot read property 'getBoundingClientRect' of undefined
    at App.componentDidUpdate (<anonymous>:33:64)
    at measureLifeCyclePerf (react-dom.js:4581)
    at react-dom.js:5235
    at CallbackQueue.notifyAll (react-dom.js:948)
    at ReactReconcileTransaction.close (react-dom.js:11454)
    at ReactReconcileTransaction.closeAll (react-dom.js:14882)
    at ReactReconcileTransaction.perform (react-dom.js:14829)
    at ReactUpdatesFlushTransaction.perform (react-dom.js:14816)
    at ReactUpdatesFlushTransaction.perform (react-dom.js:12936)
    at Object.flushBatchedUpdates (react-dom.js:13019)
```
It causes because of, according to logs
```
componentDidUpdate
complete unstable_renderSubtreeIntoContainer
```
`componentDidUpdate` called before `unstable_renderSubtreeIntoContainer` callback.

**What is the expected behavior?**
Are needed defined `refs` in `componentDidUpdate`. In the general case, a completely completed render.

I know about pattern with using `unstable_renderSubtreeIntoContainer` callback, but this is not preferred solution. Because of I have quite complex combination of two libraries and don't have access to `unstable_renderSubtreeIntoContainer` callback. If someone is interested in libs, this is [react-autocomplete](https://github.com/reactjs/react-autocomplete) and [react-tether](https://github.com/souporserious/react-tether).

There may be a way with avoiding rerender and saving the refs from the first render?

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
I'm using v15.4.2.
"
,,,https://github.com/facebook/react/issues/9804,9804,React won't work behind proxy with basic authentication,[],closed,False,,1,2017-05-29T10:10:24Z,2017-05-29T10:13:26Z,2017-05-29T10:13:26Z,NONE,completed,,"Hello

I have a react application running in our local intranet.
All our apps run behind a web proxy with a Basic Authentication, user/password checked against our AD server.

When accessing my react app directly, or via unauthenticated proxy, everything works fine.

When I access the app with the proxy authentication enabled, I manage to fetch the very first page, but every other request performed using 'fetch' fails with a 401 Unauthorized.

Basically the Authorization Header with the hashed credentials is not passed to the fetch request, while it works seamlessly for any other <script> or <css> request.

I looked on the internet for a workaround, but I couldn't find anything other than hardcoding the Authorization Header in the fetch request, which is really not a feasible solution. Nor is implementing specific login logic to work around the proxy issue.

Could you please advise?"
,,,https://github.com/facebook/react/issues/9712,9712,"BUG: input type=""number""",[],closed,False,,5,2017-05-18T04:00:42Z,2017-06-13T02:20:12Z,2017-06-13T02:20:12Z,CONTRIBUTOR,completed,,"```
render () {
  <input type=""number"" value={this.props.value} />
}
```

for example, when the original value is '.98', we need format it to '0.98'. but it is not  take effect。

```javascript
class Test extends React.Component {
 state = {
    value: '.98',
  }
 changeValue = () => {
    alert(0.98);
    this.setState({
      value: '0.98',
    });
  }

 render() {
    return <div>
      <input type=""number"" value={this.state.value} />
      <button onClick={this.changeValue}>changeValue</button>
    </div>;
  }
}

ReactDOM.render(<Test />, mountNode);
```


"
,,,https://github.com/facebook/react/issues/9666,9666,React's GitHub wiki security issue?,[],closed,False,,3,2017-05-11T14:54:28Z,2017-05-11T16:16:42Z,2017-05-11T15:55:06Z,NONE,completed,,"When browsing React's GitHub wiki, we noticed the following:
https://github.com/facebook/react/wiki/chevrolet

How did it get there? Can anyone just edit the wiki without being reviewed?

EDIT: it is linked from the main wiki page."
,,,https://github.com/facebook/react/issues/9747,9747,Convert elements to test objects for toMatchObject in Jest,[],closed,False,,3,2017-05-22T16:51:38Z,2017-07-11T12:37:24Z,2017-07-11T12:37:24Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**

Request your guidance to add a **feature** for testing, especially with Jest and Enzyme

**What is the current behavior?**

To get the benefit of **descriptive JSX** you must pay a cost of irrelevant details in some **snapshot tests**, which cause unnecessary updates, and risk incorrect decisions.

**What is the proposed behavior?**

**Goal**: balance effort to **write** tests initially and **update** tests correctly when components change.

Replace some `toMatchSnapshot` with `toMatchObject` for elements with a **relevant subset** of props.

Therefore, this issue to **convert** the expected React elements directly to test objects, especially for shallow rendering and a new deep-event/shallow-test pattern (see Table-C example).

For more information, see:

* Overview: https://github.com/pedrottimark/whimper#interlude-about-snapshot-testing
* Status: https://github.com/facebook/jest/issues/2202#issuecomment-297745964

**Proposed**: be able to import from `react-test-renderer`

* `irrelevant` String sentinel value to **ignore** children, or absence of children, in received object
* `relevantTestObject` Given a React element, return the **unrendered** element as a test object:
  * `$$typeof` is enumerable, see https://github.com/facebook/jest/issues/2351
  * `props` is omitted if there are no properties, not including `children`
  * `children` is omitted if it is `[irrelevant]`

Can you think of clearer names? I am willing to contribute with your guidance.

Draft of code: https://github.com/pedrottimark/whimper/blob/master/src/testing/react-test-renderer/relevantTestObject.js

Because `toMatchObject` expects an object, `relevantTestObject` doesn’t expect an array of elements, which components can render in React 16. Can you think of test cases when it should?

Examples of tests:

* enzyme: although https://github.com/adriantoine/enzyme-to-json/pull/56 is pending
  * `mountToDeepJson` in https://github.com/pedrottimark/whimper/blob/master/src/components/__tests__/Table-U.test.js
  * `mountToShallowJson` via `tbodyShallow` in https://github.com/pedrottimark/whimper/blob/master/src/components/__tests__/Table-C.test.js and so on
* react-test-renderer: https://github.com/pedrottimark/whimper/blob/master/src/components/__tests__/TableHead-R.test.js#L54-L129
* react-test-renderer/shallow: https://github.com/pedrottimark/whimper/blob/master/src/components/__tests__/shallow.test.js
"
,,,https://github.com/facebook/react/issues/10031,10031,refs.root breaks between 4.9.0 and 4.9.1,[],closed,False,,3,2017-06-23T14:50:05Z,2017-06-23T15:17:41Z,2017-06-23T15:06:54Z,NONE,completed,,"**Bug report **

I rely on a saved ref from the `<Fabric>` component to do some layout formatting for my Excel add-in.  I used the `ref` property of the `<Fabric>` component, and save a reference to `alias.refs.root`.  Between 4.9.0 and 4.9.1, this functionality broke - `alias.refs.root` is no longer defined.

React Version: 15.4.2 up to 15.6.1
Browser: Reproduced on Safari and Chrome (MacOS), and Chrome (Windows)

Here is a CodePen reproducing the behavior:

https://codepen.io/tcarruthers/pen/vZJeaw

Thanks!

Nick"
,,,https://github.com/facebook/react/issues/9855,9855,ReactPlayer autoplay muted video on mobile,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,3,2017-06-05T22:34:17Z,2017-06-05T23:13:13Z,2017-06-05T23:13:13Z,NONE,completed,,"I can't manage to autoplay video on mobile browser, I dont have any audio and there is my code :
```
<div className=""react-video"" ref={el => this.videoWrapper = el}>
    <ReactPlayer width={this.state.width} height={this.state.height}
        url='https://atmost.fr/assets/video/yosemite720.webm' fileConfig={{ attributes: { ""muted"": ""true"", ""autoPlay"": ""true"" } }} muted playinline playing={this.state.playing} loop autoplay />
</div>
```

When I inspect my page I only see this :
`<video src=""https://atmost.fr/assets/video/yosemite720.webm"" preload=""auto"" loop autoplay style=""width: 100%; height: 100%; display: block;""></video>`"
,,,https://github.com/facebook/react/issues/10078,10078,Input with type=radio incorrectly trigger onChange handler,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,11,2017-06-30T08:27:03Z,2017-10-04T20:06:56Z,2017-10-04T20:06:56Z,NONE,completed,,"Bug.

If I put several input type=""radio"" with same name (as in jsfiddle example below) onChange handler triggered only once for individual input when mouse click on input happen.

```jsx
<input type=""radio"" name=""some"" onChange={...} />
<input type=""radio"" name=""some"" onChange={...} />
...
```

Example: https://jsfiddle.net/Bacher/jxrar3ke/7/
Try to click on different radio inputs several times. Next clicks has no console.log output.

I expect trigger onChange every time when I click on non-selected radio input.

Bug reproduces in several latest versions of React, at least 15.6.0 and 15.6.1.
My OS is Ubuntu. I try in latest Chrome and latest Firefox."
,,,https://github.com/facebook/react/issues/9967,9967,Error: addComponentAsRefTo(...),[],closed,False,,2,2017-06-14T19:35:11Z,2017-06-15T07:42:41Z,2017-06-15T07:42:41Z,NONE,completed,,"started getting this error right after upgrading to 15.6.0:

> Error: addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner)."
,,,https://github.com/facebook/react/issues/9860,9860,We have fully translated the latest version of react docs into Chinese.,[],closed,False,,4,2017-06-06T09:52:46Z,2017-06-06T10:35:12Z,2017-06-06T10:30:41Z,NONE,completed,,"You can see the Chinese docs here: [react docs in Chinese](https://discountry.github.io/react/)

Translated from the `v15.5.4` docs.

We've directly modified the original markdown files, so it's hard to pull request and merge the official docs.

Is there any plans to add i18n feature to the jekyll doc website?"
,,,https://github.com/facebook/react/issues/9878,9878,Add an export of html props in react package since React is already using them for validation,[],closed,False,,2,2017-06-07T06:58:34Z,2017-06-07T18:00:14Z,2017-06-07T17:58:52Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
feature

**What is the current behavior?**
The react package does not provide a list of acceptable props for html node (div, span, etc.)
Sometimes, other packages pass on other props, like react-redux passing `dispatch` when no `mapDispatchToProps` is provided. This (below) will pop an error saying there's an unknown prop `dispatch` on a `div` tag
```
const { myProp1, myProp2, ...otherProps } = this.props
return <div {...otherProps}>...</div>
 ```

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**

**What is the expected behavior?**
Since React is using a list of those props for validation, the react package should also provide them to allow react users to make sure they pass on normal props

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
15.5
"
,,,https://github.com/facebook/react/issues/10058,10058,Installation warnings and errors on Ubuntu 6.4.x,[],closed,False,,3,2017-06-27T23:59:10Z,2017-06-28T01:20:27Z,2017-06-28T00:34:34Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?** Report a bug.

**What is the current behavior?** Receiving errors and warnings while executing the `create-react-app ...` command

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**

While creating a new app on Node 8.1.2 I received the following...

```
benjamin@thor:~/MY_APPS $ create-react-app my-first-react-app
Creating a new React app in /home/benjamin/MY_APPS/my-first-react-app.

Installing packages. This might take a couple minutes.
Installing react, react-dom, and react-scripts...


> fsevents@1.0.17 install /home/benjamin/MY_APPS/my-first-react-app/node_modules/fsevents
> node-pre-gyp install --fallback-to-build

node-pre-gyp info it worked if it ends with ok
node-pre-gyp verb cli [ '/home/benjamin/.nvm/versions/node/v8.1.2/bin/node',
node-pre-gyp verb cli   '/home/benjamin/MY_APPS/my-first-react-app/node_modules/fsevents/node_modules/.bin/node-pre-gyp',
node-pre-gyp verb cli   'install',
node-pre-gyp verb cli   '--fallback-to-build' ]
node-pre-gyp info using node-pre-gyp@0.6.32
node-pre-gyp info using node@8.1.2 | linux | x64
node-pre-gyp verb command install []
node-pre-gyp info check checked for ""/home/benjamin/MY_APPS/my-first-react-app/node_modules/fsevents/lib/binding/Release/node-v57-linux-x64/fse.node"" (not found)
node-pre-gyp http GET https://fsevents-binaries.s3-us-west-2.amazonaws.com/v1.0.17/fse-v1.0.17-node-v57-linux-x64.tar.gz
node-pre-gyp http 404 https://fsevents-binaries.s3-us-west-2.amazonaws.com/v1.0.17/fse-v1.0.17-node-v57-linux-x64.tar.gz
node-pre-gyp ERR! Tried to download(404): https://fsevents-binaries.s3-us-west-2.amazonaws.com/v1.0.17/fse-v1.0.17-node-v57-linux-x64.tar.gz 
node-pre-gyp ERR! Pre-built binaries not found for fsevents@1.0.17 and node@8.1.2 (node-v57 ABI) (falling back to source compile with node-gyp) 
node-pre-gyp http 404 status code downloading tarball https://fsevents-binaries.s3-us-west-2.amazonaws.com/v1.0.17/fse-v1.0.17-node-v57-linux-x64.tar.gz 
node-pre-gyp verb command build [ 'rebuild' ]
gyp WARN download NVM_NODEJS_ORG_MIRROR is deprecated and will be removed in node-gyp v4, please use NODEJS_ORG_MIRROR
gyp WARN download NVM_NODEJS_ORG_MIRROR is deprecated and will be removed in node-gyp v4, please use NODEJS_ORG_MIRROR
gyp WARN download NVM_NODEJS_ORG_MIRROR is deprecated and will be removed in node-gyp v4, please use NODEJS_ORG_MIRROR
make: Entering directory '/home/benjamin/MY_APPS/my-first-react-app/node_modules/fsevents/build'
  SOLINK_MODULE(target) Release/obj.target/.node
  COPY Release/.node
make: Leaving directory '/home/benjamin/MY_APPS/my-first-react-app/node_modules/fsevents/build'
node-pre-gyp info ok 
npm notice created a lockfile as package-lock.json. You should commit this file.
+ react@15.6.1
+ react-dom@15.6.1
+ react-scripts@1.0.7
added 1193 packages in 31.426s

```

**What is the expected behavior?**
Should create app without any warnings.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React Version = latest

Operating System...
Distributor ID:	Ubuntu
Description:	Ubuntu 16.04.2 LTS
Release:	16.04
Codename:	xenial
 
No browser used yet, all in Node and *nix"
,,,https://github.com/facebook/react/issues/9927,9927,WRONG: Javascript heap out of memory with 0.45.1,[],closed,False,,0,2017-06-12T14:41:39Z,2017-06-12T14:43:55Z,2017-06-12T14:43:18Z,NONE,completed,,"EDIT: Sorry, wrong project, meant to post that on react-native"
,,,https://github.com/facebook/react/issues/9970,9970,*bug* style undefined in setValueForStyles,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,8,2017-06-14T23:34:12Z,2017-11-02T09:28:04Z,2017-07-05T21:33:50Z,NONE,completed,,"It appears that it is possible to have the style property on node undefined in the setValueForStyles method in CSSPropertyOperations.js (using v15.5.4)

https://github.com/facebook/react/blob/v15.5.4/src/renderers/dom/shared/CSSPropertyOperations.js#L220

It is unknown how it was able to get into this state, but here is the stack trace:

TypeError: style is undefined
  at style(~/react-dom/lib/CSSPropertyOperations.js:190:0)
  at CSSPropertyOperations(~/react-dom/lib/ReactDOMComponent.js:880:0)
  at this(~/react-dom/lib/ReactDOMComponent.js:514:0)
  at internalInstance(~/react-dom/lib/ReactReconciler.js:46:0)
  at ReactReconciler(~/react-dom/lib/ReactCompositeComponent.js:371:0)
  at this(~/react-dom/lib/ReactCompositeComponent.js:258:0)
  at internalInstance(~/react-dom/lib/ReactReconciler.js:46:0)
  at ReactReconciler(~/react-dom/lib/ReactMultiChild.js:238:0)
  at this(~/react-dom/lib/ReactDOMComponent.js:697:0)
  at this(~/react-dom/lib/ReactDOMComponent.js:516:0)
  at internalInstance(~/react-dom/lib/ReactReconciler.js:46:0)
  at ReactReconciler(~/react-dom/lib/ReactCompositeComponent.js:371:0)
  at this(~/react-dom/lib/ReactCompositeComponent.js:258:0)
  at internalInstance(~/react-dom/lib/ReactReconciler.js:46:0)
  at ReactReconciler(~/react-dom/lib/ReactCompositeComponent.js:371:0)
  at this(~/react-dom/lib/ReactCompositeComponent.js:258:0)
  at internalInstance(~/react-dom/lib/ReactReconciler.js:46:0)
  at ReactReconciler(~/react-dom/lib/ReactMultiChild.js:238:0)
  at this(~/react-dom/lib/ReactDOMComponent.js:697:0)
  at this(~/react-dom/lib/ReactDOMComponent.js:516:0)
  at internalInstance(~/react-dom/lib/ReactReconciler.js:46:0)
  at ReactReconciler(~/react-dom/lib/ReactMultiChild.js:238:0)
  at this(~/react-dom/lib/ReactDOMComponent.js:697:0)
  at this(~/react-dom/lib/ReactDOMComponent.js:516:0)
  at internalInstance(~/react-dom/lib/ReactReconciler.js:46:0)
  at ReactReconciler(~/react-dom/lib/ReactCompositeComponent.js:371:0)
  at this(~/react-dom/lib/ReactCompositeComponent.js:258:0)
  at internalInstance(~/react-dom/lib/ReactReconciler.js:46:0)
  at ReactReconciler(~/react-dom/lib/ReactMultiChild.js:238:0)
  at this(~/react-dom/lib/ReactDOMComponent.js:697:0)
  at this(~/react-dom/lib/ReactDOMComponent.js:516:0)
  at internalInstance(~/react-dom/lib/ReactReconciler.js:46:0)
  at ReactReconciler(~/react-dom/lib/ReactCompositeComponent.js:371:0)
  at this(~/react-dom/lib/ReactCompositeComponent.js:258:0)
  at internalInstance(~/react-dom/lib/ReactReconciler.js:46:0)
  at ReactReconciler(~/react-dom/lib/ReactCompositeComponent.js:371:0)
  at this(~/react-dom/lib/ReactCompositeComponent.js:258:0)
  at internalInstance(~/react-dom/lib/ReactReconciler.js:46:0)
  at ReactReconciler(~/react-dom/lib/ReactMultiChild.js:238:0)
  at this(~/react-dom/lib/ReactDOMComponent.js:697:0)
  at this(~/react-dom/lib/ReactDOMComponent.js:516:0)
  at internalInstance(~/react-dom/lib/ReactReconciler.js:46:0)
  at ReactReconciler(~/react-dom/lib/ReactCompositeComponent.js:371:0)
  at this(~/react-dom/lib/ReactCompositeComponent.js:258:0)
  at internalInstance(~/react-dom/lib/ReactReconciler.js:46:0)
  at ReactReconciler(~/react-dom/lib/ReactMultiChild.js:238:0)
  at this(~/react-dom/lib/ReactDOMComponent.js:697:0)
  at this(~/react-dom/lib/ReactDOMComponent.js:516:0)
  at internalInstance(~/react-dom/lib/ReactReconciler.js:46:0)
  at ReactReconciler(~/react-dom/lib/ReactCompositeComponent.js:371:0)"
,,,https://github.com/facebook/react/issues/10110,10110,Tutorial Starter Code,[],closed,False,,3,2017-07-05T13:16:11Z,2017-07-05T14:07:19Z,2017-07-05T14:07:19Z,NONE,completed,,"The [starter code](https://codepen.io/gaearon/pen/oWWQNa?editors=0010) in the tutorial is linked to the final code on codepen not to the starter code. 

"
,,,https://github.com/facebook/react/issues/10320,10320,Uncaught TypeError: this.updater.enqueueCallback is not a function when using setState callback,[],closed,False,,11,2017-07-28T20:25:27Z,2021-01-10T03:21:16Z,2017-07-29T00:19:56Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Bug on a beta version.

**What is the current behavior?**

![image](https://user-images.githubusercontent.com/5426427/28733836-40316b42-73de-11e7-914e-6d196201c2da.png)

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**

In my Component, I used a pretty simple piece of code:

```js
  doSomeMore = () => {
    // Do stuff
  }

  doSomething = (value) => {
    this.setState({ value }, this.doSomeMore );
  }
```

firing doSomething() causes this error.

**What is the expected behavior?**

I expect this.doSomeMore function to be called after this.setState from this.doSomething. 

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Version of React: 16.0.0-beta.2
I have tested several other versions and I can confirm that:
* This bug also appears on 16.0.0-beta.1
* This bug does NOT appear on 15.6.1"
,,,https://github.com/facebook/react/issues/10152,10152,Request a 16.0.0-alpha.14 build,[],closed,False,,1,2017-07-12T09:10:55Z,2017-07-12T11:24:18Z,2017-07-12T11:24:18Z,NONE,completed,,"I'm not entirely sure whether this is the correct place for my request, if not then my apologies for wasting your time.

We are integrating React 16 in a large legacy webclient and jumping through hoops to render at comment nodes. To our great joy we noticed that #9835 is merged, which allows us to remove our hacks. However, it's merged after the latest alpha build (13) was created, so I'd love to get an alpha 14 build published."
,,,https://github.com/facebook/react/issues/10328,10328,Some invariant messages aren't extracted,[],closed,False,"{""url"":""https://api.github.com/repos/facebook/react/milestones/23"",""html_url"":""https://github.com/facebook/react/milestone/23"",""labels_url"":""https://api.github.com/repos/facebook/react/milestones/23/labels"",""id"":1670888,""node_id"":""MDk6TWlsZXN0b25lMTY3MDg4OA=="",""number"":23,""title"":""16.0"",""description"":"""",""creator"":{""login"":""gaearon"",""id"":810438,""node_id"":""MDQ6VXNlcjgxMDQzOA=="",""avatar_url"":""https://avatars.githubusercontent.com/u/810438?v=4"",""gravatar_id"":"""",""url"":""https://api.github.com/users/gaearon"",""html_url"":""https://github.com/gaearon"",""followers_url"":""https://api.github.com/users/gaearon/followers"",""following_url"":""https://api.github.com/users/gaearon/following{/other_user}"",""gists_url"":""https://api.github.com/users/gaearon/gists{/gist_id}"",""starred_url"":""https://api.github.com/users/gaearon/starred{/owner}{/repo}"",""subscriptions_url"":""https://api.github.com/users/gaearon/subscriptions"",""organizations_url"":""https://api.github.com/users/gaearon/orgs"",""repos_url"":""https://api.github.com/users/gaearon/repos"",""events_url"":""https://api.github.com/users/gaearon/events{/privacy}"",""received_events_url"":""https://api.github.com/users/gaearon/received_events"",""type"":""User"",""site_admin"":false},""open_issues"":0,""closed_issues"":69,""state"":""closed"",""created_at"":""2016-03-29T02:12:16Z"",""updated_at"":""2017-10-04T11:52:38Z"",""due_on"":null,""closed_at"":""2017-10-04T11:52:38Z""}",3,2017-07-30T16:52:48Z,2017-08-02T09:38:28Z,2017-08-02T09:38:28Z,MEMBER,completed,,"Not sure why but I can see these messages in the beta bundles:

```
ReactDOM.render(): Invalid component element. Instead of passing a string like 'div', pass React.createElement('div') or <div />.
Missing injection for fiber findDOMNode
Missing injection for stack findDOMNode
Element appears to be neither ReactComponent nor DOMNode. Keys: %s
Target container is not a DOM element.
```

I'd like to understand why."
,,,https://github.com/facebook/react/issues/10278,10278,async/await lifecycle functions need be executed in order.,[],closed,False,,2,2017-07-26T02:53:53Z,2017-07-26T08:47:29Z,2017-07-26T05:15:14Z,NONE,completed,,"request a *feature*

**What is the current behavior?**

https://jsfiddle.net/cxpg4y9c/

**What is the expected behavior?**

async/await lifecycle functions need be executed in order.

We need `async componentWillMount()` then `componentDidMount`.

Now `componentDidMount` had be executed on `async componentWillMount()` still pending.

v15.4.0

Chrome 59

"
,,,https://github.com/facebook/react/issues/10103,10103,Improve error when you've forgotten to extend React.Component,"[{""id"":40929153,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement"",""name"":""Type: Enhancement"",""color"":""84b6eb"",""default"":false,""description"":null},{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null},{""id"":139653724,""node_id"":""MDU6TGFiZWwxMzk2NTM3MjQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities"",""name"":""Component: Core Utilities"",""color"":""c5def5"",""default"":false,""description"":null}]",closed,False,,12,2017-07-04T05:44:46Z,2017-10-31T12:03:09Z,2017-10-31T12:03:09Z,NONE,completed,aweary,"When you forget to extend `React.Component` you get the following error:

```
TypeError: Cannot call a class as a function
    at _classCallCheck (null.js:7:99)
    at Hello (null.js:11:5)
    ...react internals...
```

[[Example](http://react.jsbin.com/?html,js,console)]

It would be nice if in dev you could do a check for `Component.prototype.render` and if it exists, provide a better warning along the lines of:

```
Warning: Using a class with a render method as a function, did you forget to extend React.Component?
``` 

I believe it would happen in [ReactCompositeComponent.js](https://github.com/facebook/react/blob/b840229286ac2a82fa49553ce793cf7b953d1845/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js#L248)."
,,,https://github.com/facebook/react/issues/10218,10218,"Enable to set fontFamily to ""Press Start 2""",[],closed,False,,2,2017-07-19T13:40:28Z,2017-07-19T14:51:42Z,2017-07-19T13:54:37Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug
**What is the current behavior?**
When setting fontFamily to ""Press Start 2"", no fontFamily style property will be set
**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**
https://codesandbox.io/s/7Jyk6BYj
**What is the expected behavior?**
I would like to see the fontFamily property set to ""Press Start 2"" in chrome debugger
**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Last React version, Chrome for Mac. I don't know if it worked before
"
,,,https://github.com/facebook/react/issues/10323,10323,[Documentation] Improve tutorial example code write,[],closed,False,,1,2017-07-29T05:59:50Z,2017-10-08T17:54:37Z,2017-10-08T17:54:37Z,NONE,completed,,"I tried tutorial.

> 3. Delete all files in the src/ folder of the new project.

I think that good example code here.
For example `rm -f src/*`
Because, I had a misunderstanding remove src directory.

Thank you."
,,,https://github.com/facebook/react/issues/10307,10307,Server rendering warnings too vague,[],closed,False,"{""url"":""https://api.github.com/repos/facebook/react/milestones/23"",""html_url"":""https://github.com/facebook/react/milestone/23"",""labels_url"":""https://api.github.com/repos/facebook/react/milestones/23/labels"",""id"":1670888,""node_id"":""MDk6TWlsZXN0b25lMTY3MDg4OA=="",""number"":23,""title"":""16.0"",""description"":"""",""creator"":{""login"":""gaearon"",""id"":810438,""node_id"":""MDQ6VXNlcjgxMDQzOA=="",""avatar_url"":""https://avatars.githubusercontent.com/u/810438?v=4"",""gravatar_id"":"""",""url"":""https://api.github.com/users/gaearon"",""html_url"":""https://github.com/gaearon"",""followers_url"":""https://api.github.com/users/gaearon/followers"",""following_url"":""https://api.github.com/users/gaearon/following{/other_user}"",""gists_url"":""https://api.github.com/users/gaearon/gists{/gist_id}"",""starred_url"":""https://api.github.com/users/gaearon/starred{/owner}{/repo}"",""subscriptions_url"":""https://api.github.com/users/gaearon/subscriptions"",""organizations_url"":""https://api.github.com/users/gaearon/orgs"",""repos_url"":""https://api.github.com/users/gaearon/repos"",""events_url"":""https://api.github.com/users/gaearon/events{/privacy}"",""received_events_url"":""https://api.github.com/users/gaearon/received_events"",""type"":""User"",""site_admin"":false},""open_issues"":0,""closed_issues"":69,""state"":""closed"",""created_at"":""2016-03-29T02:12:16Z"",""updated_at"":""2017-10-04T11:52:38Z"",""due_on"":null,""closed_at"":""2017-10-04T11:52:38Z""}",5,2017-07-27T11:53:59Z,2018-08-17T01:51:02Z,2017-07-27T17:02:17Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Feature

**What is the current behavior?**

While server rendering React DOM and then hydrating with a different structure, React rightly warns that there are inconsistencies. But when I first saw these warnings I was not sure exactly what was going wrong.

Here are a few of the warnings I have been receiving:

```
Warning: Did not find a matching <button> in <div>.

Warning: Did not find a matching <img> in <div>.

Warning: Did not expect server HTML to contain a <div> in <div>.
```

Only on that last error did I catch on that this was a problem with server-rendering and the inconsistencies between that and my client render (intentional at the moment while testing some things in unpure render functions).

**What is the expected behavior?**

Being more explicit that this was a rendering inconsistency between server and client.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React v16-beta.1"
,,,https://github.com/facebook/react/issues/10125,10125,Curried onBlur handler not triggered anymore when using v15.6.1 in production mode,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,7,2017-07-08T12:04:44Z,2017-07-11T11:43:00Z,2017-07-11T11:42:01Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**
*bug*?

**What is the current behavior?**
When switching from `v15.6.1`'s `development` into `production` mode, the in the examples below defined curried `onBlur` handler suddenly stops working. It seems to have something to do with the number of arguments.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**
React `v15.6.1` (`production`, partially working)
http://jsfiddle.net/axc28sfq/

React `v15.6.1` (`development`, fully working)
http://jsfiddle.net/z0mp7gv5/

React `v15.1.0` (`production`, fully working - _also works fine in `development` mode_)
http://jsfiddle.net/85w1uL3f/

React `v16.0.0-alpha.13` (`development`, partially working)
https://jsfiddle.net/z0fystqx/

**What is the expected behavior?**
Whatever the correct usage of the handler function might be in the end, at least the behavior should stay the same across the different build modes?

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
This was working fine with `v15.1.0` (`development` and `production`).
"
,,,https://github.com/facebook/react/issues/10366,10366,Async Top-level Hook Before Commit,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":739761016,""node_id"":""MDU6TGFiZWw3Mzk3NjEwMTY="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler"",""name"":""Component: Reconciler"",""color"":""f9a798"",""default"":false,""description"":null}]",closed,False,,6,2017-08-03T04:36:26Z,2018-08-16T04:13:43Z,2018-08-16T04:13:43Z,COLLABORATOR,completed,acdlite,"_(This isn't needed for 16.0.)_

I think we're missing a top-level API. If you want to integrate with non-React code around you in an async way, then you probably have some parents around you. It's not always the case that you want to show those parents before React is done. Maybe you can hide them and then show them at the callback time.

However, it would be better if you could start building the tree async with React, and then get a callback *before* we trigger life-cycles so that you can insert the tree into the actual DOM and do whatever manipulation you need. Only after that do we trigger the life-cycles. That way they will have the CSS and layout information available to them by virtue of being in the document already.

I see two possible routes:

a) We just call out for this hook and then commit immediately after.

b) We invoke a callback and pass another function. That function, when invoked, does the actual commit. This approach has precedence in the DOM with ""append async"" and offscreen canvas.

The second option is probably preferable but we should only do that if we can do it efficiently and cleanly."
,,,https://github.com/facebook/react/issues/10556,10556,TypeError: Cannot read property '_currentElement' of null,[],closed,False,,1,2017-08-28T03:17:03Z,2017-08-28T15:58:33Z,2017-08-28T15:58:33Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

bug

## version

    ""react"": ""15.6.1"",
    ""react-dom"": ""15.6.1"",

## error

```
[HMR] connected
webpack:///./node_modules/react-dom/lib/ReactCompositeComponent.js?:744 Uncaught (in promise) TypeError: Cannot read property '_currentElement' of null
    at ReactCompositeComponentWrapper._updateRenderedComponent (webpack:///./node_modules/react-dom/lib/ReactCompositeComponent.js?:744)
    at ReactCompositeComponentWrapper._performComponentUpdate (webpack:///./node_modules/react-dom/lib/ReactCompositeComponent.js?:723)
    at ReactCompositeComponentWrapper.updateComponent (webpack:///./node_modules/react-dom/lib/ReactCompositeComponent.js?:644)
    at ReactCompositeComponentWrapper.receiveComponent (webpack:///./node_modules/react-dom/lib/ReactCompositeComponent.js?:546)
    at Object.receiveComponent (webpack:///./node_modules/react-dom/lib/ReactReconciler.js?:124)
    at ReactCompositeComponentWrapper._updateRenderedComponent (webpack:///./node_modules/react-dom/lib/ReactCompositeComponent.js?:753)
    at ReactCompositeComponentWrapper._performComponentUpdate (webpack:///./node_modules/react-dom/lib/ReactCompositeComponent.js?:723)
    at ReactCompositeComponentWrapper.updateComponent (webpack:///./node_modules/react-dom/lib/ReactCompositeComponent.js?:644)
    at ReactCompositeComponentWrapper.performUpdateIfNecessary (webpack:///./node_modules/react-dom/lib/ReactCompositeComponent.js?:560)
    at Object.performUpdateIfNecessary (webpack:///./node_modules/react-dom/lib/ReactReconciler.js?:156)
webpack:///./node_modules/react-dom/lib/ReactCompositeComponent.js?:744 Uncaught TypeError: Cannot read property '_currentElement' of null
    at ReactCompositeComponentWrapper._updateRenderedComponent (webpack:///./node_modules/react-dom/lib/ReactCompositeComponent.js?:744)
    at ReactCompositeComponentWrapper._performComponentUpdate (webpack:///./node_modules/react-dom/lib/ReactCompositeComponent.js?:723)
    at ReactCompositeComponentWrapper.updateComponent (webpack:///./node_modules/react-dom/lib/ReactCompositeComponent.js?:644)
    at ReactCompositeComponentWrapper.receiveComponent (webpack:///./node_modules/react-dom/lib/ReactCompositeComponent.js?:546)
    at Object.receiveComponent (webpack:///./node_modules/react-dom/lib/ReactReconciler.js?:124)
    at ReactCompositeComponentWrapper._updateRenderedComponent (webpack:///./node_modules/react-dom/lib/ReactCompositeComponent.js?:753)
    at ReactCompositeComponentWrapper._performComponentUpdate (webpack:///./node_modules/react-dom/lib/ReactCompositeComponent.js?:723)
    at ReactCompositeComponentWrapper.updateComponent (webpack:///./node_modules/react-dom/lib/ReactCompositeComponent.js?:644)
    at ReactCompositeComponentWrapper.performUpdateIfNecessary (webpack:///./node_modules/react-dom/lib/ReactCompositeComponent.js?:560)
    at Object.performUpdateIfNecessary (webpack:///./node_modules/react-dom/lib/ReactReconciler.js?:156)
```"
,,,https://github.com/facebook/react/issues/10411,10411,Two steps Server Side Rendering,[],closed,False,,4,2017-08-08T17:00:15Z,2017-10-04T20:38:26Z,2017-10-04T20:38:26Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Feature

**What is the current behavior?**
Imagine you have a component which triggers an api request on its `componentWillMount` method, then, it updates its internal state and you want to render the version of the component after this operation.

**You have to call `renderToString` twice**
```javascript
// pseudo code
Promise
  .resolve(renderToString(<App />)) // this triggers component lifeCycle events
  .then(() => waitForSomething()) // wait for results
  .then(() => renderToString(<App />)) // render the correct version of the app
  .then(html => res.html(html))
;
```

**What is the expected behavior?**
```javascript
const mounted = mount(<App />); // trigger component lifeCycle events
// then wait and perform async operations
res.html(mounted.renderToString())
```

There are many ways to achieve this, static methods on Component, etc...
By the way, they seem to be tricks...
Having a proper api would be better.
"
,,,https://github.com/facebook/react/issues/10581,10581,Accept Ref Objects as Refs?,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":270986513,""node_id"":""MDU6TGFiZWwyNzA5ODY1MTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Big%20Picture"",""name"":""Type: Big Picture"",""color"":""61dafb"",""default"":false,""description"":null},{""id"":739777675,""node_id"":""MDU6TGFiZWw3Mzk3Nzc2NzU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API"",""name"":""Component: Component API"",""color"":""d4c5f9"",""default"":false,""description"":null}]",closed,False,,6,2017-08-31T02:56:51Z,2018-08-15T19:49:26Z,2018-08-15T19:49:25Z,COLLABORATOR,completed,,"[Reason React](https://github.com/reasonml/reason-react) uses first class OCaml refs to store mutable values (instead of on `this` instances).

These are basically just an object with a mutable `contents` property. These can be updated with callback refs `n => ref.contents = n` but it would be a nice convenience feature to just have that built-in.

We could also make these first class objects on isomorphic React.

```js
React.createRef = () => ({ contents: null });
```

```js
class Foo extends React.Component {
  state = {
    myDiv: React.createRef()
  };
  componentDidMount() {
    if (myDiv.contents) {
      myDiv.contents.focus();
    }
  }
  render() {
    return <div ref={this.state.myDiv} />;
  }
}
```

Basically the implementation would just be:

```js
if (typeof ref === 'function') {
  ref(newValue);
} else if (typeof ref === 'object') {
  ref.contents = newValue;
} else if (typeof ref === 'string') {
  owner.refs[ref] = newValue;
}
```

This is something that needs to be implemented in the core runtime and not as part of any particular component API since refs cross that boundary.

cc @adamjernst
"
,,,https://github.com/facebook/react/issues/10523,10523,[BUG] Argument 1 of EventTarget.dispatchEvent does not implement interface Event.,"[{""id"":40929154,""node_id"":""MDU6TGFiZWw0MDkyOTE1NA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Invalid"",""name"":""Resolution: Invalid"",""color"":""e6e6e6"",""default"":false,""description"":null}]",closed,False,,1,2017-08-23T20:46:12Z,2017-08-23T21:42:00Z,2017-08-23T21:20:34Z,NONE,completed,,"I have applyed a event (onMouseDown) for a element, but on Firefox 54.0.1 (64-bit) OSx I catch this error (title).

I did a debug and see that it occurs at `ReactErrorUtils.invokeGuardedCallback` function when execute the code `fakeNode.dispatchEvent(evt)`.

React 15.6.1
ReactDOM 15.6.1

OS Details
---------------
OS X Yousemite 
version 10.10.5 (14F2009)
Processor 2.8 GHz Intel Core i7
Memory 16 GB 1600 MHz DDR3
Graphics Intel Iris Pro 1536 MB
"
,,,https://github.com/facebook/react/issues/10360,10360,Throw when host component has a function child,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,2,2017-08-02T19:51:33Z,2017-08-04T00:47:31Z,2017-08-04T00:42:19Z,MEMBER,completed,,"It surprised me that this doesn’t throw (neither in Stack nor in Fiber):

```js
ReactDOM.render(
  <div>
    {function() {}}
  </div>,
  document.getElementById('container')
 );
```

Isn’t this always indicative of a mistake?"
,,,https://github.com/facebook/react/issues/10479,10479,Window Object for Virtual Dom,[],closed,False,,1,2017-08-17T16:21:00Z,2017-08-17T18:52:17Z,2017-08-17T18:52:17Z,NONE,completed,,"Hi There. I have a question.

Can I use Javascript window object in jsx file ?
Is it DOM Manipulation ?
Is it changing the virtual DOM ?
and what is the best place to use Window object in ES6 jsx file."
,,,https://github.com/facebook/react/issues/10566,10566,Performance issue in react,[],closed,False,,1,2017-08-29T12:38:50Z,2017-08-29T14:05:02Z,2017-08-29T14:05:02Z,NONE,completed,,"I am currently using reactJS version ""15.0.1"" in my web application. In one of the feature we need to keep pooling some information continuously after each 2 seconds. So we receive the response which is List of some object(700/1000 items in list) which we update and show in the react web application. 

The Problem is after some time the application becomes unresponsive and takes too much time for any operation. On profiling I found its render, batch updates and dispatch event in react that takes the longest time. 

Is there any recommended way to get away with the performance issue in react. The feature needs to be refreshed every 2 seconds and list size is more than 1000 items each time.

The performance issue is observed in IE and Chrome browser."
,,,https://github.com/facebook/react/issues/10541,10541,React.js with asp.net core 2.0,[],closed,False,,1,2017-08-25T13:30:20Z,2017-08-25T13:44:31Z,2017-08-25T13:44:31Z,NONE,completed,,"
Hello, could anyone link a good template to start hacking with react + asp.net 2.0. I am interested in jsx no tsx ;))) Thanks ;)"
,,,https://github.com/facebook/react/issues/10390,10390,react-test-renderer and shallow API mismatch,"[{""id"":204945357,""node_id"":""MDU6TGFiZWwyMDQ5NDUzNTc="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Shallow%20Renderer"",""name"":""Component: Shallow Renderer"",""color"":""eb6420"",""default"":false,""description"":null},{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":710400704,""node_id"":""MDU6TGFiZWw3MTA0MDA3MDQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Renderer"",""name"":""Component: Test Renderer"",""color"":""006b75"",""default"":false,""description"":null}]",closed,False,,3,2017-08-04T23:13:20Z,2020-03-18T11:20:08Z,2020-03-18T11:20:08Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Feature

Currently, `react-test-renderer` and `react-test-renderer/shallow` have different APIs. Is there a reason for this? It would be helpful switching between them if shallow supported `create`. I can put together a PR for it if there's interest.

## react-test-renderer

```javascript
import TestRenderer from 'react-test-renderer';

it('renders', () => {
  const result = TestRenderer.create(<MyComponent />);
  expect(result).toMatchSnapshot();
});
```

## shallow

```javascript
import ShallowRenderer from 'react-test-renderer/shallow';

it('renders', () => {
  const renderer = new ShallowRenderer()
  const result = renderer.render(<MyComponent />);
  expect(result).toMatchSnapshot();
});
```"
,,,https://github.com/facebook/react/issues/10616,10616,Tests: toTree on a rendered array,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,0,2017-09-06T08:21:34Z,2017-10-03T15:29:58Z,2017-10-03T15:29:58Z,NONE,completed,clemmy,"I don't know if this is a bug or if i am doing it wrong,
When i have a component that the render returns an array in Fiber, the rendered returns only the first element

```javascript
const Wrap = ({ children }) => children;

describe('Test', () => {

    it('renders 2 div', () => {
        const rendered = ReactTestRenderer.create(
            <Wrap>
                <div>One</div>
                <div>Two</div>
            </Wrap>
        );
        console.log(rendered.toTree().rendered);
    })
})
```

**What is the current behavior?**
Log's only the first element

**What is the expected behavior?**
I think this should be an array of elements

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 16
"
,,,https://github.com/facebook/react/issues/10880,10880,Tutorial: text of challenge 1 is unclear,[],closed,False,,1,2017-09-27T16:14:06Z,2017-11-02T21:48:15Z,2017-11-02T21:48:15Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
A bug.

**What is the current behavior?**
The first challenge at the end of the tutorial says `Display the move locations in the format ""(1, 3)"" instead of ""6"".`

* It suggests that we are already displaying the locations of the moves, but we are not!
* It doesn't specify where the move locations should be displayed either.

This makes the challenge unclear.

**What is the expected behavior?**
I'd change the text of the challenge to `Display the location for each move in the format (col, row) in each history link`, or something similar.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
v16"
,,,https://github.com/facebook/react/issues/10691,10691,`select` should warn if `value` is not available,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,4,2017-09-13T09:06:11Z,2020-01-19T01:48:44Z,2020-01-19T01:48:44Z,NONE,completed,,"IMO, 
```
<select value=""foo"" onChange={...}>
  <option value=""yes"">Yes</option>
  <option value=""no"">No</option>
</select>
```
should warn because there is no ""foo"" option. It should probably also warn if `value` is not specified, because there is no ""empty"" option either.
One could also argue that the change handler should be called with {value: 'yes'} when the component renders and the first option is selected instead of an invalid/non-existing one."
,,,https://github.com/facebook/react/issues/10869,10869,Thinking in React Example does not filter correctly,[],closed,False,,2,2017-09-27T12:42:21Z,2019-06-09T23:34:17Z,2017-09-27T12:50:24Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
If you type ""bas"" you don't get hits for Baseball and Basketball

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/ebsrpraL/).**

[https://facebook.github.io/react/docs/thinking-in-react.html](url)

**What is the expected behavior?**
You get Basketball and Baseball when you type ""bas""

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Version 16
"
,,,https://github.com/facebook/react/issues/10756,10756,React 16: className with bem-cn like libraries,[],closed,False,,14,2017-09-20T13:23:03Z,2017-12-18T19:05:47Z,2017-09-27T00:17:25Z,NONE,completed,,"Hello! Really love new features and architecture of Fiber.

But because of this new behavior:
> **Non-event attributes with function values**:
> React 16: Warns and ignores them.

I've got this issue:
```jsx
const fn = () => null;
fn.toString = () => 'foo';

const render = () => (
  <div className={fn}>doesn't add class</div>
);
```

It wouldn't add className, even if i've override `toString` method, but with object it works:

```jsx
const obj = { toString: () => 'foo' };

const render = () => (
  <div className={obj}>works</div>
);
```

I think it's OK to have same behavior with function and object.
This feature is needed in ""bem-cn"" like library, so I can write just `fn`, instead of `fn()` or `fn.toString()`
"
,,,https://github.com/facebook/react/issues/10898,10898,[website] Footer links do not reset scroll to top,"[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null}]",closed,False,,6,2017-09-27T20:23:00Z,2017-09-28T15:28:47Z,2017-09-28T14:41:40Z,COLLABORATOR,completed,bvaughn,"1. Open http://reactjs.netlify.com/docs/hello-world.html
1. Scroll to the bottom and click a link in the footer (eg Resources > Conferences).
1. The new page will load but the scroll position will remain at the bottom (so it's not obvious that a new page loaded)."
,,,https://github.com/facebook/react/issues/10986,10986,[website] Buttons in Live Code sections have bad styling,"[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null}]",closed,False,,4,2017-09-30T10:17:13Z,2017-10-03T10:40:04Z,2017-10-03T10:40:04Z,MEMBER,completed,,"On the new site, the button in the ""todo"" example looks strange (non-standard):
![](http://ss.dan.cx/2017/09/chrome_30-20.14.50.png)

Generally this happens when border styling is overridden and no nice styling is applied to the button. This appears to be the case here. Removing `border-color: inherit` fixes the styling:
![](http://ss.dan.cx/2017/09/chrome_30-20.17.29.png)

![](http://ss.dan.cx/2017/09/chrome_30-20.15.35.png)
"
,,,https://github.com/facebook/react/issues/10990,10990,Webpack (v3.6.0) not building most of the react and react-dom packages in version 16.0.0,[],closed,False,,2,2017-09-30T13:18:30Z,2017-09-30T14:54:21Z,2017-09-30T13:53:40Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
I would call it a bug. 

Webpack (v3.6.0) not building most of the react and react-dom packages when I am using version 16.0.0. Running command ``webpack`` tells me only ""31 hidden modules""

But keeping everything else same, works fine (and the app is launching correctly) when I am using version 15.6.2 for react and react-dom. And now, running ``webpack`` tells me ""187 hidden modules""

The machine is Ubuntu 16.04

Here is my **package.json**:

```
""dependencies"": {
    ""express"": ""^4.15.5"",
    ""react"": ""^16.0.0"",
    ""react-dom"": ""^16.0.0""
  },
  ""devDependencies"": {
    ""babel-core"": ""^6.26.0"",
    ""babel-eslint"": ""^8.0.1"",
    ""babel-loader"": ""^7.1.2"",
    ""babel-polyfill"": ""^6.26.0"",
    ""babel-preset-es2015"": ""^6.24.1"",
    ""babel-preset-es2016"": ""^6.24.1"",
    ""babel-preset-es2017"": ""^6.24.1"",
    ""babel-preset-react"": ""^6.24.1"",
    ""eslint"": ""^4.7.2"",
    ""eslint-config-airbnb"": ""^15.1.0"",
    ""eslint-plugin-import"": ""^2.7.0"",
    ""eslint-plugin-jsx-a11y"": ""^5.1.1"",
    ""eslint-plugin-react"": ""^7.4.0"",
    ""webpack"": ""^3.6.0""
  }
```

And here's my **webpack.config.js** file
```
module.exports = {
  entry: './public/app.jsx',
  output: {
    path: __dirname,
    filename: './public/bundle.js'
  },
  resolve: {
    extensions: ['*', '.js', '.jsx']
  },
  module: {
    loaders: [
      {
        loader: 'babel-loader',
        query: {
          presets: ['react', 'es2015']
        },
        test: /\.jsx?$/,
        exclude: /(node_modules|bower_components)/
      }
    ]
  }
};
```

Running ``$ webpack --display-modules`` (to show hidden modules), with version 16.0.0 gives me

```
Version: webpack 3.6.0
Time: 848ms
             Asset    Size  Chunks                    Chunk Names
./public/bundle.js  837 kB       0  [emitted]  [big]  main
   [0] ./node_modules/process/browser.js 5.42 kB {0} [built]
   [1] ./node_modules/fbjs/lib/emptyFunction.js 959 bytes {0} [built]
   [2] ./node_modules/fbjs/lib/invariant.js 1.51 kB {0} [built]
   [3] ./node_modules/object-assign/index.js 2.11 kB {0} [built]
   [4] ./node_modules/fbjs/lib/emptyObject.js 332 bytes {0} [built]
   [5] ./node_modules/fbjs/lib/warning.js 1.9 kB {0} [built]
   [6] ./node_modules/react/index.js 190 bytes {0} [built]
   [7] ./node_modules/prop-types/checkPropTypes.js 2.87 kB {0} [built]
   [8] ./node_modules/prop-types/lib/ReactPropTypesSecret.js 314 bytes {0} [built]
   [9] ./node_modules/fbjs/lib/ExecutionEnvironment.js 935 bytes {0} [built]
  [10] ./node_modules/fbjs/lib/EventListener.js 2.25 kB {0} [built]
  [11] ./node_modules/fbjs/lib/shallowEqual.js 1.62 kB {0} [built]
  [12] ./node_modules/fbjs/lib/containsNode.js 923 bytes {0} [built]
  [13] ./node_modules/fbjs/lib/focusNode.js 578 bytes {0} [built]
  [14] ./node_modules/fbjs/lib/getActiveElement.js 912 bytes {0} [built]
  [15] ./public/app.jsx 3.6 kB {0} [built]
  [16] ./node_modules/react/cjs/react.production.min.js 5.61 kB {0} [built]
  [17] ./node_modules/react/cjs/react.development.js 55.3 kB {0} [built]
  [18] ./node_modules/react-dom/index.js 1.36 kB {0} [built]
  [19] ./node_modules/react-dom/cjs/react-dom.production.min.js 108 kB {0} [built]
  [20] ./node_modules/fbjs/lib/isTextNode.js 479 bytes {0} [built]
  [21] ./node_modules/fbjs/lib/isNode.js 702 bytes {0} [built]
  [22] ./node_modules/react-dom/cjs/react-dom.development.js 607 kB {0} [built]
  [23] ./node_modules/fbjs/lib/hyphenateStyleName.js 848 bytes {0} [built]
  [24] ./node_modules/fbjs/lib/hyphenate.js 674 bytes {0} [built]
  [25] ./node_modules/fbjs/lib/camelizeStyleName.js 875 bytes {0} [built]
  [26] ./node_modules/fbjs/lib/camelize.js 582 bytes {0} [built]
  [27] ./node_modules/fbjs/lib/performanceNow.js 719 bytes {0} [built]
  [28] ./node_modules/fbjs/lib/performance.js 462 bytes {0} [built]
  [29] ./node_modules/prop-types/index.js 956 bytes {0} [built]
  [30] ./node_modules/prop-types/factoryWithTypeCheckers.js 19.8 kB {0} [built]
  [31] ./node_modules/prop-types/factoryWithThrowingShims.js 1.49 kB {0} [built]
```

And running ``$ webpack --display-modules``, with version 15.6.2 gives me..

```
Version: webpack 3.6.0
Time: 2204ms
             Asset    Size  Chunks                    Chunk Names
./public/bundle.js  738 kB       0  [emitted]  [big]  main
   [0] ./node_modules/process/browser.js 5.42 kB {0} [built]
   [1] ./node_modules/fbjs/lib/invariant.js 1.51 kB {0} [built]
   [2] ./node_modules/fbjs/lib/warning.js 1.9 kB {0} [built]
   [3] ./node_modules/react-dom/lib/reactProdInvariant.js 1.11 kB {0} [built]
   [4] ./node_modules/object-assign/index.js 2.11 kB {0} [built]
   [5] ./node_modules/react-dom/lib/ReactDOMComponentTree.js 6.15 kB {0} [built]
   [6] ./node_modules/fbjs/lib/ExecutionEnvironment.js 935 bytes {0} [built]
   [7] ./node_modules/react/lib/ReactComponentTreeHook.js 11.7 kB {0} [built]
   [8] ./node_modules/react-dom/lib/ReactInstrumentation.js 479 bytes {0} [built]
   [9] ./node_modules/fbjs/lib/emptyFunction.js 959 bytes {0} [built]
  [10] ./node_modules/react/lib/ReactCurrentOwner.js 499 bytes {0} [built]
  [11] ./node_modules/react-dom/lib/ReactUpdates.js 9.33 kB {0} [built]
  [12] ./node_modules/react-dom/lib/SyntheticEvent.js 9.23 kB {0} [built]
  [13] ./node_modules/react-dom/lib/DOMProperty.js 8.12 kB {0} [built]
  [14] ./node_modules/react/lib/ReactElement.js 11.1 kB {0} [built]
  [15] ./node_modules/react-dom/lib/PooledClass.js 3.23 kB {0} [built]
  [16] ./node_modules/react/lib/React.js 4.96 kB {0} [built]
  [17] ./node_modules/react/lib/reactProdInvariant.js 1.11 kB {0} [built]
  [18] ./node_modules/react-dom/lib/ReactReconciler.js 6.09 kB {0} [built]
  [19] ./node_modules/react-dom/lib/DOMLazyTree.js 3.59 kB {0} [built]
  [20] ./node_modules/react-dom/lib/EventPropagators.js 4.97 kB {0} [built]
  [21] ./node_modules/react-dom/lib/EventPluginHub.js 8.98 kB {0} [built]
  [22] ./node_modules/react-dom/lib/SyntheticUIEvent.js 1.45 kB {0} [built]
  [23] ./node_modules/react-dom/lib/ReactInstanceMap.js 1.1 kB {0} [built]
  [24] ./node_modules/react/lib/canDefineProperty.js 539 bytes {0} [built]
  [25] ./node_modules/fbjs/lib/emptyObject.js 332 bytes {0} [built]
  [26] ./node_modules/react-dom/lib/EventPluginRegistry.js 9.62 kB {0} [built]
  [27] ./node_modules/react-dom/lib/Transaction.js 9.43 kB {0} [built]
  [28] ./node_modules/react-dom/lib/SyntheticMouseEvent.js 2.02 kB {0} [built]
  [29] ./node_modules/react-dom/lib/setInnerHTML.js 3.74 kB {0} [built]
  [30] ./node_modules/react-dom/lib/escapeTextContentForBrowser.js 3.31 kB {0} [built]
  [31] ./node_modules/react-dom/lib/ReactBrowserEventEmitter.js 12.4 kB {0} [built]
  [32] ./node_modules/react/lib/lowPriorityWarning.js 2.04 kB {0} [built]
  [33] ./node_modules/react-dom/lib/EventPluginUtils.js 7.82 kB {0} [built]
  [34] ./node_modules/react-dom/lib/ReactErrorUtils.js 2.09 kB {0} [built]
  [35] ./node_modules/react-dom/lib/getEventTarget.js 888 bytes {0} [built]
  [36] ./node_modules/react-dom/lib/isEventSupported.js 1.81 kB {0} [built]
  [37] ./node_modules/react-dom/lib/getEventModifierState.js 1.1 kB {0} [built]
  [38] ./node_modules/react-dom/lib/DOMChildrenOperations.js 7.59 kB {0} [built]
  [39] ./node_modules/react-dom/lib/DOMNamespaces.js 383 bytes {0} [built]
  [40] ./node_modules/react-dom/lib/createMicrosoftUnsafeLocalFunction.js 688 bytes {0} [built]
  [41] ./node_modules/react-dom/lib/LinkedValueUtils.js 5.12 kB {0} [built]
  [42] ./node_modules/react-dom/lib/ReactComponentEnvironment.js 1.18 kB {0} [built]
  [43] ./node_modules/fbjs/lib/shallowEqual.js 1.62 kB {0} [built]
  [44] ./node_modules/react-dom/lib/shouldUpdateReactComponent.js 1.28 kB {0} [built]
  [45] ./node_modules/react-dom/lib/KeyEscapeUtils.js 1.17 kB {0} [built]
  [46] ./node_modules/react-dom/lib/ReactUpdateQueue.js 9.23 kB {0} [built]
  [47] ./node_modules/react-dom/lib/validateDOMNesting.js 13.5 kB {0} [built]
  [48] ./node_modules/react-dom/lib/getEventCharCode.js 1.38 kB {0} [built]
  [49] ./node_modules/react/lib/ReactBaseClasses.js 5.31 kB {0} [built]
  [50] ./node_modules/react/lib/ReactNoopUpdateQueue.js 3.24 kB {0} [built]
  [51] ./node_modules/react/lib/ReactElementSymbol.js 500 bytes {0} [built]
  [52] ./node_modules/react/lib/getIteratorFn.js 997 bytes {0} [built]
  [53] ./node_modules/react/lib/ReactElementValidator.js 9.08 kB {0} [built]
  [54] ./node_modules/prop-types/factory.js 768 bytes {0} [built]
  [55] ./node_modules/prop-types/node_modules/fbjs/lib/emptyFunction.js 959 bytes {0} [built]
  [56] ./node_modules/prop-types/node_modules/fbjs/lib/invariant.js 1.51 kB {0} [built]
  [57] ./node_modules/prop-types/node_modules/fbjs/lib/warning.js 1.9 kB {0} [built]
  [58] ./node_modules/prop-types/lib/ReactPropTypesSecret.js 314 bytes {0} [built]
  [59] ./node_modules/react-dom/lib/ReactDOMComponentFlags.js 307 bytes {0} [built]
  [60] ./node_modules/react-dom/lib/accumulateInto.js 1.57 kB {0} [built]
  [61] ./node_modules/react-dom/lib/forEachAccumulated.js 733 bytes {0} [built]
  [62] ./node_modules/react-dom/lib/getTextContentAccessor.js 833 bytes {0} [built]
  [63] ./node_modules/react-dom/lib/CallbackQueue.js 3.04 kB {0} [built]
  [64] ./node_modules/react-dom/lib/ReactFeatureFlags.js 506 bytes {0} [built]
  [65] ./node_modules/react-dom/lib/inputValueTracking.js 2.97 kB {0} [built]
  [66] ./node_modules/react-dom/lib/isTextInputElement.js 895 bytes {0} [built]
  [67] ./node_modules/react-dom/lib/ViewportMetrics.js 482 bytes {0} [built]
  [68] ./node_modules/react-dom/lib/setTextContent.js 1.33 kB {0} [built]
  [69] ./node_modules/fbjs/lib/focusNode.js 578 bytes {0} [built]
  [70] ./node_modules/react-dom/lib/CSSProperty.js 3.69 kB {0} [built]
  [71] ./node_modules/react-dom/lib/DOMPropertyOperations.js 7.49 kB {0} [built]
  [72] ./node_modules/react-dom/lib/ReactPropTypesSecret.js 320 bytes {0} [built]
  [73] ./node_modules/react-dom/lib/ReactDOMSelect.js 6.69 kB {0} [built]
  [74] ./node_modules/react-dom/lib/instantiateReactComponent.js 4.93 kB {0} [built]
  [75] ./node_modules/react-dom/lib/ReactNodeTypes.js 894 bytes {0} [built]
  [76] ./node_modules/react-dom/lib/ReactEmptyComponent.js 582 bytes {0} [built]
  [77] ./node_modules/react-dom/lib/ReactHostComponent.js 1.85 kB {0} [built]
  [78] ./node_modules/react-dom/lib/traverseAllChildren.js 6.92 kB {0} [built]
  [79] ./node_modules/fbjs/lib/EventListener.js 2.25 kB {0} [built]
  [80] ./node_modules/react-dom/lib/ReactInputSelection.js 4.15 kB {0} [built]
  [81] ./node_modules/fbjs/lib/getActiveElement.js 912 bytes {0} [built]
  [82] ./node_modules/react-dom/lib/ReactMount.js 25.4 kB {0} [built]
  [83] ./node_modules/react-dom/lib/getHostComponentFromComposite.js 618 bytes {0} [built]
  [84] ./public/app.jsx 3.6 kB {0} [built]
  [85] ./node_modules/react/react.js 56 bytes {0} [built]
  [86] ./node_modules/react/lib/ReactChildren.js 6.07 kB {0} [built]
  [87] ./node_modules/react/lib/PooledClass.js 3.23 kB {0} [built]
  [88] ./node_modules/react/lib/traverseAllChildren.js 6.91 kB {0} [built]
  [89] ./node_modules/react/lib/KeyEscapeUtils.js 1.17 kB {0} [built]
  [90] ./node_modules/react/lib/ReactDOMFactories.js 5.36 kB {0} [built]
  [91] ./node_modules/react/lib/checkReactTypeSpec.js 4.07 kB {0} [built]
  [92] ./node_modules/react/lib/ReactPropTypeLocationNames.js 450 bytes {0} [built]
  [93] ./node_modules/react/lib/ReactPropTypesSecret.js 320 bytes {0} [built]
  [94] ./node_modules/react/lib/ReactPropTypes.js 378 bytes {0} [built]
  [95] ./node_modules/prop-types/factoryWithTypeCheckers.js 19.8 kB {0} [built]
  [96] ./node_modules/prop-types/node_modules/object-assign/index.js 2.11 kB {0} [built]
  [97] ./node_modules/prop-types/checkPropTypes.js 2.87 kB {0} [built]
  [98] ./node_modules/react/lib/ReactVersion.js 228 bytes {0} [built]
  [99] ./node_modules/react/lib/createClass.js 566 bytes {0} [built]
 [100] ./node_modules/create-react-class/factory.js 28.3 kB {0} [built]
 [101] ./node_modules/react/lib/onlyChild.js 1.22 kB {0} [built]
 [102] ./node_modules/react-dom/index.js 59 bytes {0} [built]
 [103] ./node_modules/react-dom/lib/ReactDOM.js 5.05 kB {0} [built]
 [104] ./node_modules/react-dom/lib/ReactDefaultInjection.js 3.38 kB {0} [built]
 [105] ./node_modules/react-dom/lib/ARIADOMPropertyConfig.js 1.69 kB {0} [built]
 [106] ./node_modules/react-dom/lib/BeforeInputEventPlugin.js 13.1 kB {0} [built]
 [107] ./node_modules/react-dom/lib/FallbackCompositionState.js 2.3 kB {0} [built]
 [108] ./node_modules/react-dom/lib/SyntheticCompositionEvent.js 977 bytes {0} [built]
 [109] ./node_modules/react-dom/lib/SyntheticInputEvent.js 967 bytes {0} [built]
 [110] ./node_modules/react-dom/lib/ChangeEventPlugin.js 10.7 kB {0} [built]
 [111] ./node_modules/react-dom/lib/ReactRef.js 2.44 kB {0} [built]
 [112] ./node_modules/react-dom/lib/ReactOwner.js 3.4 kB {0} [built]
 [113] ./node_modules/react-dom/lib/ReactDebugTool.js 11.5 kB {0} [built]
 [114] ./node_modules/react-dom/lib/ReactInvalidSetStateWarningHook.js 862 bytes {0} [built]
 [115] ./node_modules/react-dom/lib/ReactHostOperationHistoryHook.js 614 bytes {0} [built]
 [116] ./node_modules/fbjs/lib/performanceNow.js 719 bytes {0} [built]
 [117] ./node_modules/fbjs/lib/performance.js 462 bytes {0} [built]
 [118] ./node_modules/react-dom/lib/DefaultEventPluginOrder.js 955 bytes {0} [built]
 [119] ./node_modules/react-dom/lib/EnterLeaveEventPlugin.js 3.03 kB {0} [built]
 [120] ./node_modules/react-dom/lib/HTMLDOMPropertyConfig.js 6.47 kB {0} [built]
 [121] ./node_modules/react-dom/lib/ReactComponentBrowserEnvironment.js 782 bytes {0} [built]
 [122] ./node_modules/react-dom/lib/Danger.js 2.12 kB {0} [built]
 [123] ./node_modules/fbjs/lib/createNodesFromMarkup.js 2.54 kB {0} [built]
 [124] ./node_modules/fbjs/lib/createArrayFromMixed.js 3.99 kB {0} [built]
 [125] ./node_modules/fbjs/lib/getMarkupWrap.js 2.91 kB {0} [built]
 [126] ./node_modules/react-dom/lib/ReactDOMIDOperations.js 833 bytes {0} [built]
 [127] ./node_modules/react-dom/lib/ReactDOMComponent.js 39 kB {0} [built]
 [128] ./node_modules/react-dom/lib/AutoFocusUtils.js 477 bytes {0} [built]
 [129] ./node_modules/react-dom/lib/CSSPropertyOperations.js 7.08 kB {0} [built]
 [130] ./node_modules/fbjs/lib/camelizeStyleName.js 875 bytes {0} [built]
 [131] ./node_modules/fbjs/lib/camelize.js 582 bytes {0} [built]
 [132] ./node_modules/react-dom/lib/dangerousStyleValue.js 2.94 kB {0} [built]
 [133] ./node_modules/fbjs/lib/hyphenateStyleName.js 848 bytes {0} [built]
 [134] ./node_modules/fbjs/lib/hyphenate.js 674 bytes {0} [built]
 [135] ./node_modules/fbjs/lib/memoizeStringOnly.js 572 bytes {0} [built]
 [136] ./node_modules/react-dom/lib/quoteAttributeValueForBrowser.js 578 bytes {0} [built]
 [137] ./node_modules/react-dom/lib/ReactEventEmitterMixin.js 836 bytes {0} [built]
 [138] ./node_modules/react-dom/lib/getVendorPrefixedEventName.js 2.75 kB {0} [built]
 [139] ./node_modules/react-dom/lib/ReactDOMInput.js 13 kB {0} [built]
 [140] ./node_modules/react-dom/lib/ReactDOMOption.js 3.56 kB {0} [built]
 [141] ./node_modules/react-dom/lib/ReactDOMTextarea.js 6.34 kB {0} [built]
 [142] ./node_modules/react-dom/lib/ReactMultiChild.js 14.4 kB {0} [built]
 [143] ./node_modules/react-dom/lib/ReactChildReconciler.js 5.98 kB {0} [built]
 [144] ./node_modules/react-dom/lib/ReactCompositeComponent.js 35.1 kB {0} [built]
 [145] ./node_modules/react-dom/lib/checkReactTypeSpec.js 4.09 kB {0} [built]
 [146] ./node_modules/react-dom/lib/ReactPropTypeLocationNames.js 450 bytes {0} [built]
 [147] ./node_modules/react/lib/getNextDebugID.js 315 bytes {0} [built]
 [148] ./node_modules/react-dom/lib/ReactElementSymbol.js 500 bytes {0} [built]
 [149] ./node_modules/react-dom/lib/getIteratorFn.js 997 bytes {0} [built]
 [150] ./node_modules/react-dom/lib/flattenChildren.js 2.65 kB {0} [built]
 [151] ./node_modules/react-dom/lib/ReactServerRenderingTransaction.js 2.17 kB {0} [built]
 [152] ./node_modules/react-dom/lib/ReactServerUpdateQueue.js 4.71 kB {0} [built]
 [153] ./node_modules/react-dom/lib/ReactDOMEmptyComponent.js 1.78 kB {0} [built]
 [154] ./node_modules/react-dom/lib/ReactDOMTreeTraversal.js 3.6 kB {0} [built]
 [155] ./node_modules/react-dom/lib/ReactDOMTextComponent.js 5.69 kB {0} [built]
 [156] ./node_modules/react-dom/lib/ReactDefaultBatchingStrategy.js 1.76 kB {0} [built]
 [157] ./node_modules/react-dom/lib/ReactEventListener.js 5.17 kB {0} [built]
 [158] ./node_modules/fbjs/lib/getUnboundedScrollPosition.js 996 bytes {0} [built]
 [159] ./node_modules/react-dom/lib/ReactInjection.js 1.08 kB {0} [built]
 [160] ./node_modules/react-dom/lib/ReactReconcileTransaction.js 5.14 kB {0} [built]
 [161] ./node_modules/react-dom/lib/ReactDOMSelection.js 6.65 kB {0} [built]
 [162] ./node_modules/react-dom/lib/getNodeForCharacterOffset.js 1.5 kB {0} [built]
 [163] ./node_modules/fbjs/lib/containsNode.js 923 bytes {0} [built]
 [164] ./node_modules/fbjs/lib/isTextNode.js 479 bytes {0} [built]
 [165] ./node_modules/fbjs/lib/isNode.js 702 bytes {0} [built]
 [166] ./node_modules/react-dom/lib/SVGDOMPropertyConfig.js 7.2 kB {0} [built]
 [167] ./node_modules/react-dom/lib/SelectEventPlugin.js 5.93 kB {0} [built]
 [168] ./node_modules/react-dom/lib/SimpleEventPlugin.js 7.85 kB {0} [built]
 [169] ./node_modules/react-dom/lib/SyntheticAnimationEvent.js 1.09 kB {0} [built]
 [170] ./node_modules/react-dom/lib/SyntheticClipboardEvent.js 1.05 kB {0} [built]
 [171] ./node_modules/react-dom/lib/SyntheticFocusEvent.js 944 bytes {0} [built]
 [172] ./node_modules/react-dom/lib/SyntheticKeyboardEvent.js 2.58 kB {0} [built]
 [173] ./node_modules/react-dom/lib/getEventKey.js 2.75 kB {0} [built]
 [174] ./node_modules/react-dom/lib/SyntheticDragEvent.js 949 bytes {0} [built]
 [175] ./node_modules/react-dom/lib/SyntheticTouchEvent.js 1.16 kB {0} [built]
 [176] ./node_modules/react-dom/lib/SyntheticTransitionEvent.js 1.1 kB {0} [built]
 [177] ./node_modules/react-dom/lib/SyntheticWheelEvent.js 1.8 kB {0} [built]
 [178] ./node_modules/react-dom/lib/ReactDOMContainerInfo.js 845 bytes {0} [built]
 [179] ./node_modules/react-dom/lib/ReactDOMFeatureFlags.js 317 bytes {0} [built]
 [180] ./node_modules/react-dom/lib/ReactMarkupChecksum.js 1.35 kB {0} [built]
 [181] ./node_modules/react-dom/lib/adler32.js 1.07 kB {0} [built]
 [182] ./node_modules/react-dom/lib/ReactVersion.js 228 bytes {0} [built]
 [183] ./node_modules/react-dom/lib/findDOMNode.js 2.34 kB {0} [built]
 [184] ./node_modules/react-dom/lib/renderSubtreeIntoContainer.js 300 bytes {0} [built]
 [185] ./node_modules/react-dom/lib/ReactDOMUnknownPropertyHook.js 4.2 kB {0} [built]
 [186] ./node_modules/react-dom/lib/ReactDOMNullInputValuePropHook.js 1.25 kB {0} [built]
 [187] ./node_modules/react-dom/lib/ReactDOMInvalidARIAHook.js 3.02 kB {0} [built]
```

"
,,,https://github.com/facebook/react/issues/10788,10788,If react will under mit license next week,[],closed,False,,2,2017-09-23T07:26:34Z,2017-09-23T09:22:04Z,2017-09-23T09:22:04Z,NONE,completed,,"Some days age,my boss asked me stop react cause react was under bsd+patent grant license. so our plan for develop is stopped ,and we have to choose a new framework, and learn it.
Reat is the best framework for me.

I heard that fb is relicenseing react under mit license next week,is it true?

Till now,we want use react , but we also need learn other framework, if the news is true, we can make a decision to back react."
,,,https://github.com/facebook/react/issues/10659,10659,React doesn't correctly re-render dynamically created Components added to an <svg> via state,[],closed,False,,1,2017-09-10T02:50:15Z,2017-09-10T04:41:21Z,2017-09-10T04:41:21Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
I believe I am reporting a *bug*

**What is the current behavior?**
When I have a dynamic tag named through a const, the element attributes will be parsed correctly, but the tag name won't be resolved all the way down to it's react component and thus, won't be rendered.


**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/ebsrpraL/).**

https://jsfiddle.net/ebsrpraL/1/

Click in the SVG box. A <Circle /> tag appears in the svg DOM with its attributes looking like html (with dashes instead of camelCase).

**What is the expected behavior?**
If you change ""ShapeTag"" to ""Circle"", things work as intended and another circle appears.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Bash on Ubuntu on Windows in Chrome
"
,,,https://github.com/facebook/react/issues/10888,10888,"[website] Side nav sometimes shows an incorrect ""current"" highlight","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null}]",closed,False,,7,2017-09-27T18:05:07Z,2017-10-02T15:57:31Z,2017-10-02T15:57:31Z,CONTRIBUTOR,completed,,"**Bug**:
The active navbar item is incorrect sometimes.

**Reproduction steps:**
Navigate to http://reactjs.netlify.com/docs/handling-events.html. Observe that **Synthetic Event** is highlighted.

**Expected Behavior:**
`Quick Start > Handling Events` should be highlighted.
"
,,,https://github.com/facebook/react/issues/10770,10770,Toggle Menu from external button,[],closed,False,,3,2017-09-21T13:23:48Z,2017-09-22T19:16:11Z,2017-09-22T19:08:24Z,NONE,completed,,"I have 2 different components (not related in any manner). One has a button and second one has a menu. I want to open/close menu from other component when I click the button inside it.
Is there any way to add a class directly without setting redux state?"
,,,https://github.com/facebook/react/issues/10606,10606,Facebook,[],closed,False,,0,2017-09-05T06:14:14Z,2017-09-05T08:12:35Z,2017-09-05T08:12:35Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/ebsrpraL/).**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
"
,,,https://github.com/facebook/react/issues/10755,10755,TypeError: undefined is not an object (evaluating 's.get.call') from input onChange - React 15.6.1 ReactDOM 15.6.0 on Safari 9.1.x,[],closed,False,"{""url"":""https://api.github.com/repos/facebook/react/milestones/23"",""html_url"":""https://github.com/facebook/react/milestone/23"",""labels_url"":""https://api.github.com/repos/facebook/react/milestones/23/labels"",""id"":1670888,""node_id"":""MDk6TWlsZXN0b25lMTY3MDg4OA=="",""number"":23,""title"":""16.0"",""description"":"""",""creator"":{""login"":""gaearon"",""id"":810438,""node_id"":""MDQ6VXNlcjgxMDQzOA=="",""avatar_url"":""https://avatars.githubusercontent.com/u/810438?v=4"",""gravatar_id"":"""",""url"":""https://api.github.com/users/gaearon"",""html_url"":""https://github.com/gaearon"",""followers_url"":""https://api.github.com/users/gaearon/followers"",""following_url"":""https://api.github.com/users/gaearon/following{/other_user}"",""gists_url"":""https://api.github.com/users/gaearon/gists{/gist_id}"",""starred_url"":""https://api.github.com/users/gaearon/starred{/owner}{/repo}"",""subscriptions_url"":""https://api.github.com/users/gaearon/subscriptions"",""organizations_url"":""https://api.github.com/users/gaearon/orgs"",""repos_url"":""https://api.github.com/users/gaearon/repos"",""events_url"":""https://api.github.com/users/gaearon/events{/privacy}"",""received_events_url"":""https://api.github.com/users/gaearon/received_events"",""type"":""User"",""site_admin"":false},""open_issues"":0,""closed_issues"":69,""state"":""closed"",""created_at"":""2016-03-29T02:12:16Z"",""updated_at"":""2017-10-04T11:52:38Z"",""due_on"":null,""closed_at"":""2017-10-04T11:52:38Z""}",8,2017-09-20T08:07:11Z,2017-09-20T21:26:47Z,2017-09-20T21:26:47Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
A bug

**What is the current behavior?**
onChange onKeyUp onKeyDown causes TypeError: undefined is not an object (evaluating 's.get.call') only in Safari.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/ebsrpraL/).**
https://codepen.io/anon/pen/rGevxK

**What is the expected behavior?**
Component should get event.target.value and then update the state, which in turn re-renders the h1 with new state values.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
It works for React 15.3.1 ReactDOM15.3.1  
"
,,,https://github.com/facebook/react/issues/10849,10849,Use of ReactOS logo and project name,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,True,,32,2017-09-26T21:39:09Z,2018-01-30T00:02:38Z,2017-10-31T20:22:45Z,NONE,completed,,"This project seems to have subsumed almost the same name and logo of the ReactOS project. 

That seems rather disengenuous.

The ReactOS logo is very close the spinning atom logo with a globe in the middle and so is yours. The project name is ReactOS and your is ReactJS. This seems at best confusing and at worst it looks as if your project is treading on the coat-tails of ReactOS.

EDIT: name correction"
,,,https://github.com/facebook/react/issues/11159,11159,autoFocus doesn't work with SSR in React 16,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710332294,""node_id"":""MDU6TGFiZWw3MTAzMzIyOTQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering"",""name"":""Component: Server Rendering"",""color"":""d4c5f9"",""default"":false,""description"":null}]",closed,False,,12,2017-10-09T15:48:25Z,2017-10-11T18:05:49Z,2017-10-11T18:05:49Z,COLLABORATOR,completed,,"`<input autoFocus />` works on the client but not when hydrated.

That's because this used to be implemented in JS as a special case but `hydrateInstance` doesn't cause a commit effect to be scheduled that can call `.focus()` like `finalizeChildren` does.

The question here is, should we even bother implementing this in JS anymore or should we just emit the `autofocus` attribute in SSR and let the browser take care of it.

"
,,,https://github.com/facebook/react/issues/11021,11021,Leading zeros in controlled input with integer value,[],closed,False,,2,2017-10-02T07:57:14Z,2017-10-03T08:40:11Z,2017-10-02T19:30:01Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
In the text input, I can see leading zeros when I pass digit value.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/ebsrpraL/).**
For some reason, I can't reproduce this bug on jsfiddle or codepen. Moreover, react works fine there.

Steps:

1. Create controlled text input and add `onChange` listener, which saves input value to `state` as an integer.
2. Pass value from `state` to input.
3. Write `0000001` to input. Value in `state` is equal to `1`, but value of input is `0000001`

**What is the expected behavior?**
A value in the input is the same as in the state — `1`. Without leading zeros.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
CRA, React 15.5.4
Chrome, IE 11/Edge, Firefox

I understand that this is the very low amount of information, so I will be happy to provide more. Just need to know what else would be useful.
"
,,,https://github.com/facebook/react/issues/11289,11289,Make invalid prop type warnings more specific if they are falsy,"[{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":725156255,""node_id"":""MDU6TGFiZWw3MjUxNTYyNTU="",""url"":""https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)"",""name"":""good first issue (taken)"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,8,2017-10-19T18:19:50Z,2017-10-31T13:03:00Z,2017-10-31T13:03:00Z,COLLABORATOR,completed,,"This is a common pattern:

```js
<div onClick={condition && () => {}} className={condition && 'foo'} />
```

However if condition is `false`, `0` or `""""` then this correctly warns.

You should have used `condition ? ... : undefined` instead.

We could suggest that more specifically in the warning.

The longer term alternative is to use the [proposed](https://github.com/tc39-transfer/proposal-nullish-coalescing) more concise `??` operator. "
,,,https://github.com/facebook/react/issues/11209,11209,vs push,[],closed,False,,0,2017-10-12T22:26:31Z,2017-10-12T22:26:51Z,2017-10-12T22:26:51Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
"
,,,https://github.com/facebook/react/issues/11403,11403,In some cases will lose some components,[],closed,False,,5,2017-10-31T03:57:22Z,2017-10-31T12:10:02Z,2017-10-31T06:29:16Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
I just have a problem do not understand
**What is the current behavior?**
Behind react in the div, there are some components that are not loaded
**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**
`<body><div id=""successDiv""/><div id=""reactDiv""/><div id=""notLoadedDiv""/></body>`
The document structure looks like this.The second div is used with react components,The first div is able to load properly into dom,But the last div can not load into dom
**What is the expected behavior?**
All divs should be loaded normally
**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
react:
https://cdn.bootcss.com/react/16.0.0/cjs/react.development.js""
https://cdn.bootcss.com/react/16.0.0/cjs/react.production.min.js
https://cdn.bootcss.com/react/16.0.0/umd/react.development.js""
https://cdn.bootcss.com/react/16.0.0/umd/react.production.min.js
system:win10  14393"
,,,https://github.com/facebook/react/issues/11342,11342,Support onEnd SVG event,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,3,2017-10-23T15:35:57Z,2017-10-23T15:59:43Z,2017-10-23T15:59:37Z,NONE,completed,,"Hi,
I'm trying to use the \<animateTransform\> Element in a React project. But I'm not able to use the ""onend"" attribute:

> Warning: Unknown event handler property `onend`. It will be ignored.

Is there a workaround for this ?"
,,,https://github.com/facebook/react/issues/11394,11394,Occams software,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,9,2017-10-28T21:38:10Z,2017-11-03T15:34:05Z,2017-11-03T15:15:30Z,NONE,completed,," I am a reasonably familiar React coder that was looking for a simple template for a image oriented app.  I downloaded and reviewed/hacked/played with many of the examples in this section.  While most are useful I did notice something that I felt was worth mentioning.

Perhaps I am alone but I find that many files are  confusing when trying to figure out how code works.  Perhaps it is the hangover for java trained engineers bringing their coding style to javascript?  If so then I really wish I had been to the party!

The very nice emoji search app is a good example.  If one consolidates all the files into one file one can make a version that is clear and readable and easily understood with  fewer lines of code **than there are code modules** to wade through to figure out how the code works.

I actually thought this to be impossible  (and it is impossible  with 80 character or 132 character lines) but with the full use of a 1080p monitor it is very easy to do.

I am only mentioning this here because react seems to be a particularly sprawling framework that could do with a bit of grooming.  

Most of the demo's from FB with react are single page demo's (more or less).  

Does anyone else agree with me? and if so I would like to propose that there be a section of examples called ""full app snippets"" (or something equally silly) for those of us who get _directory vertigo_  easily. 

Sometimes it reminds me of sitting in the back of a car reading a book 

on a very windy road :)
![image](https://user-images.githubusercontent.com/9357805/32138757-9d1158ca-bbed-11e7-8433-4de1430e1381.png)
"
,,,https://github.com/facebook/react/issues/11140,11140,"Deduplicate the ""Can only update a mounted or mounting component"" warning","[{""id"":40929153,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement"",""name"":""Type: Enhancement"",""color"":""84b6eb"",""default"":false,""description"":null},{""id"":139653724,""node_id"":""MDU6TGFiZWwxMzk2NTM3MjQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities"",""name"":""Component: Core Utilities"",""color"":""c5def5"",""default"":false,""description"":null}]",closed,False,,10,2017-10-06T22:06:38Z,2019-09-08T09:48:40Z,2017-11-03T15:17:11Z,MEMBER,completed,,"## Note: @anushreesubramani is working on this, please don’t send PRs if you aren’t her :-)

----

Similar to https://github.com/facebook/react/issues/11081.

@anushreesubramani Wanna take this one as well? It would need to deduplicate based on owner/stack info, similar to how https://github.com/facebook/react/pull/11120 works."
,,,https://github.com/facebook/react/issues/11076,11076,react-dom problems with CSP?,[],closed,False,,1,2017-10-03T23:40:05Z,2017-10-04T00:06:48Z,2017-10-03T23:54:23Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
Refused to apply inline style because it violates the following Content Security Policy directive: ""style-src 'self' . Either the 'unsafe-inline' keyword, a hash ('sha256-....'), or a nonce ('nonce-...') is required to enable inline execution.

**What is the expected behavior?**
no error with CSP.

I am try use react-select(1.0.0-rc.10) in my app, and the CSP is enabled, but the result is the mentioned.Apparently the problem is by react-dom in this line:
![csp](https://user-images.githubusercontent.com/11939055/31154044-056f50e4-a86a-11e7-8043-6ebb75a47128.png)

"
,,,https://github.com/facebook/react/issues/11409,11409,Why are Error Boundaries not triggered for event handlers?,"[{""id"":139653724,""node_id"":""MDU6TGFiZWwxMzk2NTM3MjQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities"",""name"":""Component: Core Utilities"",""color"":""c5def5"",""default"":false,""description"":null},{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,43,2017-10-31T12:19:14Z,2021-04-23T16:01:28Z,2017-11-01T14:48:39Z,NONE,completed,,"
**Do you want to request a *feature* or report a *bug*?**
feature , question ?

**What is the current behavior?**
componentDidCatch is not triggered when the error occurred  on event handlers in react components 

**What is the expected behavior?**
to be honest , without reading the full documentation about error boundaries , my first attempt to test error boundaries was to trigger an error in an event handler (ouch!) , then i discovered that componentDidCatch is triggered only on react lifecycle methods and render  . I'm wondering why this design decision has been done like that ? it would be convenient to have only one component that handle all unexpected exceptions inside our components , instead now we should have two ways to handle errors inside the component.
I have also created an stackoverflow question : https://stackoverflow.com/questions/47020422/why-reactjs-error-boundaries-are-not-triggered-on-event-handlers with the same concern.
thanks!

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
""react"": ""^16.0.0"""
,,,https://github.com/facebook/react/issues/11412,11412,JSX 代表 Objects,[],closed,False,,2,2017-10-31T15:13:21Z,2017-10-31T15:41:53Z,2017-10-31T15:41:53Z,NONE,completed,,"错误：JSX表示对象  

> Babel将JSX编译成React.createElement()电话。


修改：Babel 转译器会把 JSX转换成一个名为`React.createElement()`的方法调用"
,,,https://github.com/facebook/react/issues/11143,11143,React 16 & bad UX! & scroll bug!,[],closed,False,,4,2017-10-07T02:10:14Z,2017-10-07T09:12:20Z,2017-10-07T09:12:20Z,NONE,completed,,"# React 16 & bad UX!

![image](https://user-images.githubusercontent.com/18028768/31303856-952a37aa-ab47-11e7-9c5d-1726e1100d3f.png)

> right menu is too bad for UX!

> left menu should be much more better!"
,,,https://github.com/facebook/react/issues/11079,11079,Improving Browser QA,"[{""id"":71502270,""node_id"":""MDU6TGFiZWw3MTUwMjI3MA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure"",""name"":""Component: Build Infrastructure"",""color"":""f9d0c4"",""default"":false,""description"":null},{""id"":710615342,""node_id"":""MDU6TGFiZWw3MTA2MTUzNDI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella"",""name"":""Type: Umbrella"",""color"":""5319e7"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,15,2017-10-04T02:31:39Z,2020-01-19T01:49:05Z,2020-01-19T01:49:05Z,CONTRIBUTOR,completed,,"We manually test a lot of behavior that can not be captured by JSDOM. Change events, number input quirks, event pooling, error handling, etc.

Despite this test suite, comprehensive unit tests, alpha, beta, and release candidates, a number of bugs have slipped through. Particularly around change events.

I want to explore what it would look like to reduce the burden of manual browser QA when possible. Particularly around things like change events, which hook into JavaScript DOM APIs and should be automatable.

I've filed this issue for myself to explore the following areas (though I'd be happy for others to pitch in 😄):

- [ ] Deploying the [DOM Test Fixtures](https://github.com/facebook/react/tree/master/fixtures/dom) to a public URL to distribute manual QA and run automated tests against it
- [ ] Investigate [BrowserStack](https://browserstack.com) or [Sauce Labs](https://saucelabs.com) as possible browser automation options
- [ ] Deploy a nightly or edge build of React with an accompanying JSFiddle to make it easier to determine if a fix works on master without needing to know how to setup React locally.
- [ ] With automation in place, what extremely laborious (but comprehensive) tests could we run to help fight regressions?

---

I'm probably missing something, but this is where I'm going to start. I'll post follow-up comments as I learn stuff."
,,,https://github.com/facebook/react/issues/11055,11055,react-test-renderer/shallow throws if NODE_ENV===production,[],closed,False,,3,2017-10-02T23:14:40Z,2017-10-02T23:21:21Z,2017-10-02T23:21:15Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Feels like a bug, open to correction/context

**What is the current behavior?**
react-test-renderer/shallow throws if `NODE_ENV===production`; more details under ""which versions of React"" below

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**
does `NODE_ENV=production jest` count? ;) jk
`NODE_ENV=production jest` with specs comparing snapshots of shallow rendered components utilizing libraries that change behavior when `NODE_ENV=production` (ex: [recompose](https://github.com/acdlite/recompose/blob/e50934ebc4a313a9bee9a02d182171eb06a4fe72/src/packages/recompose/renderComponent.js#L7-L9))

**What is the expected behavior?**
Able to shallow render components as they would/will be when built and deployed to production.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
[v15.x react-test-renderer/shallow](https://github.com/facebook/react/blob/v15.6.1/packages/react-test-renderer/shallow.js) runs happily, [the check and error throw appears to be new in v16.x](https://github.com/facebook/react/blob/v16.0.0/packages/react-test-renderer/shallow.js#L3-L5)

Related: [7231 comment](https://github.com/facebook/react/issues/7231#issuecomment-236370277) had a response of 
>There should be no difference...between dev and prod versions of React. 

which is great news in terms of react 👍  but disallowing prod version of shallow render doesn't cover the prod code path of other libraries/dependencies 🙏 "
,,,https://github.com/facebook/react/issues/11240,11240,"""Cannot create property for a non-extensible object"".",[],closed,False,,1,2017-10-16T16:00:03Z,2017-10-17T11:05:29Z,2017-10-17T11:05:29Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**

An error is thrown in IE 11. The error message states ""Cannot create property for a non-extensible object"". It originates from the following location:

File ""webpack:///./node_modules/react-dom/lib/PooledClass.js"" line 98

**What is the expected behavior?**

No errors.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

The version number is react-dom@15.6.1. This used to work, and the error messages started when I implemented DLLPlugin on Webpack, which involved outputting all dependencies in a single file. I'm not sure why that would be a problem, though.
"
,,,https://github.com/facebook/react/issues/11353,11353,Error boundary stack traces show components as Unknown in IE11,"[{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,False,,3,2017-10-24T16:47:52Z,2017-10-29T13:00:11Z,2017-10-29T13:00:11Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Bug? Unless I missed something required for IE11 support.

**What is the current behavior?**

Error boundary component stack traces show `Unknown` for every component name in IE11:

```
    in Unknown
    in Unknown
    in div
    in Unknown
```

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**

Trigger an error, catch with an error boundary, observe `info.componentStack` string. [Shingo Yamazaki's codepen demo](https://codepen.io/zaki-yama/pen/dzYWNM) will reproduce the issue.

**What is the expected behavior?**

```
    in BuggyCounter (created by App)
    in ErrorBoundary (created by App)
    in div (created by App)
    in App
```

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

* React 16.0.0
* IE11, Windows 8.1 / 10
* N/A
"
,,,https://github.com/facebook/react/issues/11049,11049,Resolution failure with bundle-collapser and non-unique file contents,[],closed,False,,3,2017-10-02T22:12:58Z,2017-10-03T14:50:44Z,2017-10-03T14:50:44Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**

Report a bug.

### What is the expected behavior?

Expected behavior is that `$ browserify index.js` and the [recommended optimization](https://reactjs.org/docs/optimizing-performance.html#browserify) `$ browserify index.js -p bundle-collapser/plugin` resolve requires correctly and produce functionally equivalent output.

### What is the current behavior?

Observed behavior is that [bundle-collapser](https://github.com/substack/bundle-collapser) causes a browserified bundle to resolve files incorrectly when components with different paths have identical contents.

### Steps to reproduce

For a full reproduction, see: [bundle-collapser-uniqueness-failure#react](https://github.com/rreusser/bundle-collapser-uniqueness-failure/tree/react). `a/index.js` and `b/index.js` should render different values (coming from `a/value.js` and `b/value.js`, respectively), but since the component content is identical, `b/index.js` erroneously resolves to the wrong component and displays a's value.

For a simpler reproduction not specific to react, see [bundle-collapser-uniqueness-failure](https://github.com/rreusser/bundle-collapser-uniqueness-failure).

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

This is a browserify+bundle-collapser issue so that the react version is irrelevant. The real issue here is that it's an [officially recommended optimization](https://reactjs.org/docs/optimizing-performance.html#browserify) that may result in an invalid bundle."
,,,https://github.com/facebook/react/issues/11027,11027,Loosen up type requirements for event handlers,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,11,2017-10-02T14:44:19Z,2019-01-18T02:53:36Z,2018-01-02T15:23:15Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Feature

**What is the current behavior?**

When adding event handlers, it is common practice to do something like:

```js
const MyButton = ({ canClick, onClick }) =>
  <div onClick={canClick && onClick}></div>
```

This was fine in React 15.x, but in 16 it reports a warning, which is technically correct:

> Expected `onClick` listener to be a function, instead got a value of `boolean` type.

However, this now forces you to use the more verbose variant:

```js
const MyButton = ({ canClick, onClick }) =>
  <div onClick={(canClick && onClick) ? onClick : undefined}></div>
```

**What is the expected behavior?**

I think it makes sense to allow `null`, `false`, and `undefined` in addition to function types for event handlers. Or just anything ""falsy"", although that may be too much to ask.

I definitely understand the rationale from a type safety perspective, but this does make it less pragmatic. I am personally a huge fan of how JS evaluates `null`, `0`, `""""` and `undefined` to `false`, and it reduces the amount of boilerplate needed to conditionally wire up handlers.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React 16, all browsers. This did not emit a warning in React 15 and below.
"
,,,https://github.com/facebook/react/issues/11519,11519,Consider including directory name into the stack trace for some files,"[{""id"":139653724,""node_id"":""MDU6TGFiZWwxMzk2NTM3MjQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities"",""name"":""Component: Core Utilities"",""color"":""c5def5"",""default"":false,""description"":null},{""id"":588833528,""node_id"":""MDU6TGFiZWw1ODg4MzM1Mjg="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium"",""name"":""Difficulty: medium"",""color"":""fbca04"",""default"":false,""description"":null},{""id"":725156255,""node_id"":""MDU6TGFiZWw3MjUxNTYyNTU="",""url"":""https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)"",""name"":""good first issue (taken)"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,3,2017-11-10T19:51:16Z,2018-08-09T02:33:30Z,2018-08-09T02:33:30Z,MEMBER,completed,,"See https://twitter.com/deadcoder0904/status/929050109425229824

Maybe if the file is called `index.js` (pretty common with some directory structures) we should include the directory name into the short component stack trace. "
,,,https://github.com/facebook/react/issues/11574,11574,React and react-router. If I create a component it calls render(). If not a component it is good without render(). It's crazy,[],closed,False,,4,2017-11-16T18:47:44Z,2017-11-17T01:55:07Z,2017-11-17T01:55:07Z,NONE,completed,,"Here is the link to [Sandbox][1]

I have simple code like this:

**Sidebar.js**:

    import React, { Component } from ""react"";
    import { BrowserRouter as Router, Route, NavLink } from ""react-router-dom"";
    
    import Menu from ""./Menu"";
    
    class SidebarExample extends Component {
      render() {
        console.log(""Sidebar - render()"", new Date());
        return (
          <Router>
            <div>
              <div>
                If I uncomment the below component Menu the render() method of the component is called everytime I change the link. Why? In the Menu component the is the same html code below. What is going on?
                {/*<Menu />*/}
                <ul>
                  <li>
                    <NavLink exact to=""/"">
                      Home
                    </NavLink>
                  </li>
                  <li>
                    <NavLink to=""/bubblegum"">Bubblegum</NavLink>
                  </li>
                  <li>
                    <NavLink to=""/shoelaces"">Shoelaces</NavLink>
                  </li>
                </ul>
              </div>
            </div>
          </Router>
        );
      }
    }
    
    export default SidebarExample;

**Menu.js**:

    import React, { Component } from ""react"";
    import { NavLink } from ""react-router-dom"";
    
    class Menu extends Component {
      render() {
        console.log(""Menu - render()"", new Date());
        return (
          <ul>
            <li>
              <NavLink exact to=""/"">
                Home
              </NavLink>
            </li>
            <li>
              <NavLink to=""/bubblegum"">Bubblegum</NavLink>
            </li>
            <li>
              <NavLink to=""/shoelaces"">Shoelaces</NavLink>
            </li>
          </ul>
        );
      }
    }
    
    export default Menu;

If I uncomment the component the render() method of the component is called everytime I change the link. Why? In the Menu component there is the same html code below.

**What is going on?**

I'm loosing my mind!


  [1]: http://codesandbox.io/s/34r1l9wl4m"
,,,https://github.com/facebook/react/issues/11659,11659,Move ReactFiberTreeReflection to react-reconciler/reflection,"[{""id"":71502270,""node_id"":""MDU6TGFiZWw3MTUwMjI3MA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure"",""name"":""Component: Build Infrastructure"",""color"":""f9d0c4"",""default"":false,""description"":null},{""id"":725156255,""node_id"":""MDU6TGFiZWw3MjUxNTYyNTU="",""url"":""https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)"",""name"":""good first issue (taken)"",""color"":""b60205"",""default"":false,""description"":null},{""id"":760751171,""node_id"":""MDU6TGFiZWw3NjA3NTExNzE="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20challenging"",""name"":""Difficulty: challenging"",""color"":""f2687c"",""default"":false,""description"":null}]",closed,False,,12,2017-11-25T15:57:33Z,2017-11-28T17:36:14Z,2017-11-28T17:36:14Z,MEMBER,completed,,"We should:

* Move `ReactFiberTreeReflection` to be exported from `react-reconciler/reflection` entry point (similar to how `react-dom/test-utils` entry point is set up).
* Create a flat bundle for it (similar to how `react-dom/test-utils` is set up in `bundles.js`).
* Change code that imports `ReactFiberTreeReflection` directly to do it through `react-reconciler/reflection` instead.
* Make `react-reconciler` a dependency of `react-noop-renderer` in `package.json`. This should ensure the reconciler doesn't actually get bundled with `react-noop-renderer`, and instead stays a `require()` call. Then the interaction of these two packages will actually be tested when you run `yarn test-build` (after `yarn build core,noop,reconciler --type=NODE`).

This task is not friendly to beginners. It requires an understanding of the relationship between different packages, and a willingness to research and experiment with how our build process is set up."
,,,https://github.com/facebook/react/issues/11701,11701,ReactDOM.createPortal support Fragment?,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,7,2017-11-29T13:38:08Z,2020-11-16T21:36:03Z,2017-11-29T14:48:11Z,NONE,completed,,"Hello. Maybe it's possible add support Fragment for .createPortal method?
Example this code add wrapper for buttons
```javascript
class FormButtons extends PureComponent {
  constructor(props) {
    super(props);
    this.el = document.createElement('span');
    // this.el = <Fragment />;  // - it's the best solution without any wrappers
  }

  componentDidMount() {
    const { portalSelector } = this.props;
    document.getElementById(portalSelector).appendChild(this.el);
  }

  componentWillUnmount() {
    const { portalSelector } = this.props;
    document.getElementById(portalSelector).removeChild(this.el);
  }

  render() {
    const { submit, reset, submitting, pristine } = this.props;
    return ReactDOM.createPortal(
      <Fragment>
        <button
          className=""btn btn-primary btn-block""
          type=""submit""
          onClick={submit}
          disabled={submitting}
        >
          Заказать
        </button>
        <button
          className=""btn btn-primary btn-block""
          type=""button""
          onClick={reset}
          disabled={submitting || pristine}
        >
          Сбросить
        </button>
      </Fragment>,
      this.el
    );
  }
}
```


**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.2"
,,,https://github.com/facebook/react/issues/11650,11650,forceUpdate recalls all ref callbacks,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,3,2017-11-24T10:47:19Z,2017-11-24T12:37:34Z,2017-11-24T12:26:56Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**

Bug, maybe

**What is the current behavior?**

On calling forceUpdate ref callbacks called again. So, doing forceUpdate in ref callback makes infinite loop.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**

https://codepen.io/TrySound/pen/mqKqeB?editors=0012

**What is the expected behavior?**

Do not recall refs

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

react 16.1.1
chrome 62"
,,,https://github.com/facebook/react/issues/11522,11522,Cannot disable form submission using onSubmit handler,"[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,3,2017-11-10T22:21:46Z,2020-09-08T15:41:30Z,2017-11-13T14:09:37Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
it is not currently possible to prevent form submission using the `onSubmit` handler

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**
sample code at https://codesandbox.io/s/jpx80rj6vy

**What is the expected behavior?**
`form` should never submit because `onSubmit` returns false every time

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 16

simplified code snippet below so you don't have to load the sandbox repro
```
<form onSubmit={() => false}>
  <input type=""text"" name=""bar"" placeholder=""type and hit enter"" />
</form>
```"
,,,https://github.com/facebook/react/issues/11490,11490,Default Browser on Android 4.0.x Not Working (Blank) to Access Web Build From React,[],closed,False,,1,2017-11-08T09:22:03Z,2017-11-08T09:34:14Z,2017-11-08T09:34:14Z,NONE,completed,,"I have a problem, me build web with React and i tried to access with default browser on android.
on android 4.0.x not working (blank)
and on android 4.1 above is wokring

we write with es 6 and compile es 5, but it not working, if i test in android default browser 4.0.x not working (blank)

default browser on android 4.0.x not support with es 5, right ?

can someone help me ?"
,,,https://github.com/facebook/react/issues/11502,11502,Iterators are not supported inside Component.render,"[{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""},{""id"":739761016,""node_id"":""MDU6TGFiZWw3Mzk3NjEwMTY="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler"",""name"":""Component: Reconciler"",""color"":""f9a798"",""default"":false,""description"":null}]",closed,False,,14,2017-11-09T15:46:38Z,2018-08-02T18:49:50Z,2017-11-10T15:52:09Z,NONE,completed,,"**What is the current behavior?**

When you provide a list of React components -- its works. When you provide an iterator of React components -- it does not work.

This works:

```
const App = props => (
    <ul>
        {[...elements()]}
    </ul>
);

const elements = function* () {
    yield (<li>1</li>);
    yield (<li>2</li>);
    yield (<li>3</li>);
};

```
Doesn't work:


```
const App = props => (
    <ul>
        {elements()}
    </ul>
);

const elements = function* () {
    yield (<li>1</li>);
    yield (<li>2</li>);
    yield (<li>3</li>);
};

```

Unfortunately, I couldn't make it run on JSFiddle, maybe it has no support of iterators.

**What is the expected behavior?**

It should render exactly the same version as list-based one:

* 1
* 2
* 3

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

react-dom 16.0.0 and 15.x, browser-independent (I tried in Firefox 56)."
,,,https://github.com/facebook/react/issues/11613,11613,Request in IE9,[],closed,False,,1,2017-11-21T18:55:29Z,2017-11-21T18:59:24Z,2017-11-21T18:59:24Z,NONE,completed,,"Hello guys, how can I make request in IE9?, actually I make request with axios, but in IE 9 dont work =/, response returns with Network Error and using Fetch response returns with Access Denied.

React 16.0

With Axios 

```
async function makeRequest(endpoint, method = 'get', params = null, headers = {}) {
  const request = axios({
    method,
    url: BASE_URL + endpoint,
    data: params,
    headers
  });

  return await request;
}
```

with Fetch

```
fetch(BASE_URL + endpoint, {
        method: 'POST',
        headers: headers,
        body: JSON.stringify(creds)
      }).then(data => {
        console.log(data);
      }, error => {
        console.log(error);
      })
```

"
,,,https://github.com/facebook/react/issues/11500,11500,React renders differently on server and client,[],closed,False,,1,2017-11-09T10:00:48Z,2017-11-09T10:37:37Z,2017-11-09T10:37:37Z,NONE,completed,," Warning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:
 (client) <div data-reactroot="""" da
 (server) <div class=""container"" da


How come it's rendered different? what is the solution

I have tried with renderToStaticMarkup instead of renderToString ..but it is not working"
,,,https://github.com/facebook/react/issues/11508,11508,Unnecessary re-rendering under bailed-out components when a legacy context provider and a deep child are updated in the same batch,"[{""id"":40929156,""node_id"":""MDU6TGFiZWw0MDkyOTE1Ng=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Wontfix"",""name"":""Resolution: Wontfix"",""color"":""ffffff"",""default"":false,""description"":null},{""id"":178761159,""node_id"":""MDU6TGFiZWwxNzg3NjExNTk="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Regression"",""name"":""Type: Regression"",""color"":""e11d21"",""default"":false,""description"":null},{""id"":739761016,""node_id"":""MDU6TGFiZWw3Mzk3NjEwMTY="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler"",""name"":""Component: Reconciler"",""color"":""f9a798"",""default"":false,""description"":null}]",closed,False,,23,2017-11-09T22:53:30Z,2019-04-21T19:23:27Z,2019-04-21T19:22:57Z,CONTRIBUTOR,completed,,"This issue is going to start off mostly theoretical as I’m still working to make a minimal repro case.

We have a scenario where one component is having `shouldComponentUpdate()` return false to bail out, but a child component is still having its `render` method called.

Avoiding many details this is roughly what we have:

```jsx
import React, { Component } from 'react';

class A extends Component {
  shouldComponentUpdate(nextProps) {
    const result = Boolean(nextProps.item);
    console.log('A#shouldComponentUpdate?', result);
    return result;
  }

  render() {
    console.log('A#render', this.props.item);
    return <B item={this.props.item} />;
  }
}

class B extends Component {
  state = { seconds: 0 };
  componentDidMount() {
    this._interval = setInterval(
      () => this.setState({ seconds: this.state.seconds + 1 }),
      1000
    );
  }

  componentWillUnMount() {
    clearInterval(this._interval);
  }

  render() {
    console.log('B#render', this.props.item);
    return (
      <div>
        <strong>{this.props.item.name}</strong>
        <span>{this.state.seconds} seconds</span>
      </div>
    );
  }
}

export default A;
```

While this case does work as expected it seems to be in the direction of the
errors we’re seeing.

There is something taking place in our render cycle where B is being rendered
_without_ reusing the `item` prop from the previous reconcile.

My first question is are there any theories on why this may be happening that I
can explore? We _are_ using `context` as the parent of `A` and as`B` and these
are reading from a `flux`-thing (I think a fork of the original OSS Flux), they
they these are both passing all props through and not having any naming
collisions. I’m fairly certain we are not performing any mutations on our end.

(If I do manage to pull off a repro case I will immediately post it here with
utter joy in my heart)

cc @acdlite @gaearon (this is the issue I was asking about in Messenger recently)"
,,,https://github.com/facebook/react/issues/11593,11593,Warn if this.state is set to this.props referentially,"[{""id"":40929153,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement"",""name"":""Type: Enhancement"",""color"":""84b6eb"",""default"":false,""description"":null},{""id"":52079258,""node_id"":""MDU6TGFiZWw1MjA3OTI1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter"",""name"":""Difficulty: starter"",""color"":""94ce52"",""default"":false,""description"":null},{""id"":725156255,""node_id"":""MDU6TGFiZWw3MjUxNTYyNTU="",""url"":""https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)"",""name"":""good first issue (taken)"",""color"":""b60205"",""default"":false,""description"":null},{""id"":739761016,""node_id"":""MDU6TGFiZWw3Mzk3NjEwMTY="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler"",""name"":""Component: Reconciler"",""color"":""f9a798"",""default"":false,""description"":null}]",closed,False,,14,2017-11-18T19:24:43Z,2018-08-28T18:23:24Z,2018-08-28T13:17:45Z,MEMBER,completed,,"See this example: https://github.com/facebook/react/issues/11508#issuecomment-345464797.

I think it probably reflects a misunderstanding of how props and state work, and we should detect and warn if we see this."
,,,https://github.com/facebook/react/issues/11904,11904,Feature - Append component,[],closed,False,,4,2017-12-21T18:28:20Z,2017-12-21T23:13:17Z,2017-12-21T23:08:52Z,NONE,completed,,"Is there a way of appending components like we [append nodes](https://developer.mozilla.org/pt-BR/docs/Web/API/Node/appendChild):
```
function List({listRef}) {
  return <ul ref={listRef}></ul>;
}

class Parent extends React.Component {

  handleClick = (data)=>{
   //.appendChild
    this.list.appendComponent(<Item data={data} />)  
  };

  render() {
    return (
      <List listRef={(node)=>{this.list = node;}} />
    );
  }
}
```
I know that it can be easily handled by state."
,,,https://github.com/facebook/react/issues/11844,11844,redirect to home after login react - redux,[],closed,False,,1,2017-12-13T15:34:26Z,2017-12-14T04:50:04Z,2017-12-14T04:50:04Z,NONE,completed,,"I'm new working with react v4 and I try to redirect to another page, something like a home page after the user authenticate in but I'm getting problems with nested routes, I've tried [this solution](https://stackoverflow.com/questions/42095600/nested-routes-in-react-router-v4) and [this other one](https://reacttraining.com/react-router/web/example/basic) in documentation but doesn't work the way that I need.


I have a basic code for the login in [this github repository ](https://github.com/falzate81/LoginReact)

Thanks in advance for your help.
"
,,,https://github.com/facebook/react/issues/11937,11937,fiber-triangle fixture is not working,[],closed,False,,2,2017-12-31T09:55:23Z,2017-12-31T15:35:23Z,2017-12-31T15:35:23Z,CONTRIBUTOR,completed,,"I cannot see any difference between async on/off.
I am using Chrome v63 on MacBook Pro."
,,,https://github.com/facebook/react/issues/11856,11856,Not able to build a basic file,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,4,2017-12-14T16:28:15Z,2017-12-14T17:47:55Z,2017-12-14T17:46:27Z,NONE,completed,,"Hi All,

The error I get is : 

> Invariant Violation: Element type is invalid: expected a string (for built-in components) but got : object. You likely forgot to export your component from the file it's defined in.
> 
> The error is located at : 
> in RCTView (at View.js:112)
> in View (at AppContainer.js:102)
> in RCTView (at View.js:112)
> in View (at AppContainer.js:122)
> in AppContainer (at renderApplication.js: 34)
> 

https://image.ibb.co/b8EK4m/Screen_Shot_2017_12_14_at_16_27_33.png



My App.js is like this. Not sure what I am doing wrong here. Would be grateful for any pointers. Thank you :)

```
import React from 'react';
import { AppRegistry, View, Text } from 'react-native';

class App extends React.Component {
  render(){
    return (
      <View>
        <Text> Sierra </Text>
        <Text> Tanner </Text>
      </View>
    )
  }
}

AppRegistry.registerComponent('SampleApp', () => App);

```


"
,,,https://github.com/facebook/react/issues/11816,11816,Devan Criego,[],closed,False,,0,2017-12-09T03:37:36Z,2017-12-09T03:42:46Z,2017-12-09T03:42:46Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
"
,,,https://github.com/facebook/react/issues/11807,11807,False positive warning about style mismatch when hydrating server markup in IE11,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":69105383,""node_id"":""MDU6TGFiZWw2OTEwNTM4Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Browser:%20IE"",""name"":""Browser: IE"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":588833528,""node_id"":""MDU6TGFiZWw1ODg4MzM1Mjg="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium"",""name"":""Difficulty: medium"",""color"":""fbca04"",""default"":false,""description"":null},{""id"":710332294,""node_id"":""MDU6TGFiZWw3MTAzMzIyOTQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering"",""name"":""Component: Server Rendering"",""color"":""d4c5f9"",""default"":false,""description"":null},{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""},{""id"":725156255,""node_id"":""MDU6TGFiZWw3MjUxNTYyNTU="",""url"":""https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)"",""name"":""good first issue (taken)"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,14,2017-12-08T02:20:24Z,2018-09-04T13:56:19Z,2018-09-04T13:26:52Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug? (not a biggy - not sure if IE11 is support for development)

**What is the current behavior?**

IE11 seems to always throw a warning for hydration failures
eg

> **Warning: Prop `style` did not match. Server: ""text-decoration: none;"" Client: ""text-decoration:none""**

Note: there is a space between the colon and none from Server, Client has no space

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**

Have a SSR rendered component, using inline styles
```
                       <a href=""/page1"" style={{ textDecoration: ""none"" }}>
                            <h1 className=""splash-head"">Go to Page1</h1>
                        </a>
```

Then hydrate it on IE11
`ReactDOM.hydrate(component, document.getElementById(""app""));`

This **doesnt** occur in either Chrome or Firefox

**What is the expected behavior?**

No warning

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React: 16.1.1
Browser: IE11

"
,,,https://github.com/facebook/react/issues/11917,11917,według projektu ,[],closed,False,,0,2017-12-24T05:57:34Z,2017-12-24T06:23:10Z,2017-12-24T06:23:10Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
"
,,,https://github.com/facebook/react/issues/11836,11836,React preserves duplicates of DOM node on re-render.,"[{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,False,,4,2017-12-12T14:06:37Z,2017-12-17T12:02:08Z,2017-12-17T07:08:33Z,NONE,completed,,"Hi guys. I'm getting really weird behavior in my latest project. I assume it's a bug in React.
I want to override default browser context menu. I subscribed for `contextmenu` and `click` events in `componentDidMount`. On right click (context menu) I want to show my custom div. On left click, this div should hide. In event listeners I do:

```
onContextMenu = (e) => {
	if ((e.target as any).id === CONTEXT_MENU_ID) {
		const {offsetX, offsetY} = e
		const contextMenu = {
			isActive: true,
			position: {
				x: offsetX,
				y: offsetY,
			},
		}
		this.setState({contextMenu})
		e.preventDefault()
	}
}

onClick = (e) => {
	const contextMenu = {
		isActive: false,
		position: {x: 0, y: 0},
	}
	this.setState({contextMenu})
}
```
and in `render` there's:
```
{(this.state.contextMenu.isActive) && (
	<div className='menu-item noselect'>
		<i className='fa fa-plus'/>
		<span> Add new note </span>
	</div>
)}
```
I assume everybody can imagine expected behavior. But real behavior is:
right click > context menu shows up > left click > context menu is still there > right click > another context menu shows up... and so on... You can literally see DOM nodes being duplicated in Elements tab in DevTools

You can try it here: https://github.com/jake-daniels/zen-tab
The code is in `src/app/controller/NotesBoard.tsx` file.
Try `npm install` `npm start`, then right/left click somewhere on blue area.

Environment:
MS Windows 8.1 x64
Chrome 63.0.3239.84
React 16.2.0
"
,,,https://github.com/facebook/react/issues/11850,11850,React-form-with-constraints: Unable to find node on an unmounted component,[],closed,False,,3,2017-12-14T05:52:39Z,2017-12-14T10:30:19Z,2017-12-14T10:30:19Z,NONE,completed,,"I'm using react-form-with-constraints for my form validation (version 0.2.3) and my createCompany file extends this. On form submit click i'm calling super.handleSubmit() for validation but it throws below error:

    Uncaught Error: Unable to find node on an unmounted component.
    at invariant (commons.chunk.js.f2d6763b.js:214)
    at Object.findDOMNode (bundle.f2d6763b.js:96653)
    at CreateCompanyForm.FormWithConstraints.showFormErrors

  The package's built in FormWithConstaints file looks like

    handleSubmit(e: React.FormEvent<HTMLFormElement>) {
        this.showFormErrors();
      }
    
      private showFormErrors() {
        const form = ReactDOM.findDOMNode(this);
        const inputs = form.querySelectorAll('[name]');
        inputs.forEach((input: any) => this.showFieldError(input));
      }

I can't switch to higher version as the higher version breaks most of my code. Could someone help me.

My package.json looks like

        ""react"": ""^15.6.1"",
        ""react-dom"": ""^15.6.1"",
        ""react-form-with-constraints"": ""^0.2.2""


My CompanyForm file looks like:

    import React from 'react';
    import TextInput from '../../../../components/common/input/TextInput';
    import Button from '../../../../components/common/button/PrimaryButton';
    import { FormWithConstraints } from 'react-form-with-constraints';
    import PropTypes from 'prop-types';

    class CreateCompanyForm extends FormWithConstraints {
        constructor(props) {
            super(props);
            this.handleChange = this.handleChange.bind(this);
            this.handleSubmit = this.handleSubmit.bind(this);
            this.getInitialState = this.getInitialState.bind(this);
            this.state = this.getInitialState();
        }

        getInitialState(){
            return({
                name: '',
                address:'',
            });
        }

        handleChange(event) {
            console.log(""handle change"");
            const target = event.currentTarget;

            this.setState({
                [target.name]: target.value
            });

            super.handleChange(event);
        }

        handleSubmit(event) {
            event.preventDefault();

            super.handleSubmit(event);

            if (!this.isValid()) {
                //dont proceed
            } else {
                this.props.onSubmit();
            }
        }

        render() {
            return (
                <div>
                    <form onSubmit={this.handleSubmit}>
                        <div>Create New Company</div>
                        <div style={{marginTop: 10}} className=""row"">
                            <div className=""col-md-6"">
                                <TextInput
                                    readOnly={false}
                                    required={true}
                                    label=""Name of Company""
                                    value={this.state.name}
                                    onChange={this.handleChange}
                                    name=""name""/>
                            </div>
                            <div className=""col-md-6"">
                                <TextInput
                                    readOnly={false}
                                    required={true}
                                    label=""Registered Address""
                                    value={this.state.address}
                                    onChange={this.handleChange}
                                    name=""address""/>
                            </div>
                        </div>

                        <div>
                            <Button
                                label={""Create Company""}
                                onClick={this.handleSubmit}
                            />
                        </div>

                    </form>

                </div>
            );
        }
    }


    CreateCompanyForm.propTypes ={
        onSubmit: PropTypes.func.isRequired

    };

    export default CreateCompanyForm;


The parent component looks like:

    class CreateCompanyHome extends React.Component {
        constructor(props) {
            super(props);
            this.state = {
                reload: true,
                loading:false,
                error:{},
                success:{},
                isSuperUser: false,

            };
            this.onSubmit = this.onSubmit.bind(this);
        }

        componentDidMount(){
            this.setState({isSuperUser:Auth.isSuperUser}); //check if the user is SU
        }

        onSubmit(createCompanyParams={}){
            //call api
        }

        render() {
                return (
                    <div>
                        {this.state.loading?<Loader />:null}
                        {this.state.reload?
                            <CreateCompanyForm
                                opacity={this.state.loading}
                                onSubmit={this.onSubmit}/>:null}
                    </div>);
            }
    }

    function mapStateToProps(state) {
        return {
            userRoleSetMap: state.authentication.userRoleSet,
            cwEntityMap: state.authentication.cwEntityMap,
        };
    }

    export default connect(mapStateToProps)(CreateCompanyHome);



"
,,,https://github.com/facebook/react/issues/12086,12086,Remove Component.childContextTypes / Component.contextTypes and PropTypes requirements for Context,[],closed,False,,2,2018-01-24T05:38:51Z,2018-01-24T15:00:22Z,2018-01-24T15:00:22Z,NONE,completed,,"Since there is currently undergoing work (https://github.com/facebook/react/pull/11818) on the Context API, I feel like this may be a good time to bring this up.

----

In my projects, the design decision to not use `PropTypes` in our internal components was made early on, under the assumption that if we were to use `PropTypes`, we may as well go the whole way and use `flow` or `TypeScript` as well.

Enforcing a `PropType` declaration on a single React feature doesn't make much sense. If `PropTypes` are optional on `props`, why are they required on `context`?

To get around this enforcement, my components end up looking like the following:

```javascript
// makeContext.js
import PropTypes from 'prop-types';

const makeContext = (keys) => {
  const obj = {};
  keys.forEach((key) => {
    obj[key] = PropTypes.any;
  });
  return obj;
};

export default makeContext;
```

```javascript
// contextTypes.js
import makeContext from './makeContext';

export default makeContext([
  'someValue',
  'someOtherValue',
]);
```

```javascript
// ParentComponent.js
import contextTypes from './contextTypes';
import ChildComponent from './ChildComponent';

class ParentComponent extends React.Component {
  getChildContext() {
    return { someValue: 1, someOtherValue: false };
  }
  render() {
    return <ChildComponent />;
  }
}
ParentComponent.childContextTypes = contextTypes;
```

```javascript
// ChildComponent.js
import contextTypes from './contextTypes';

const ChildComponent = (props, { someValue }) => (
  <p>{someValue}</p>
);
ChildComponent.contextTypes = contextTypes;
```

----

As you can see, the declaration of both `childContextTypes` and `contextTypes` is essentially pointless, yet I am forced to do so because the API enforces it.

It seems that, much like `props` and `PropTypes`, it should be down to the developer to decide whether or not the rule should be enforced."
,,,https://github.com/facebook/react/issues/12021,12021,Add referrerPolicy to iframe for react 16,[],closed,False,,1,2018-01-15T12:48:08Z,2018-01-15T12:50:35Z,2018-01-15T12:50:35Z,NONE,completed,,"Property 'referrerPolicy' does not exist on type 'DetailedHTMLProps<IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>'.

see https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/referrerPolicy

react@16.2.0
react-dom@16.2.0"
,,,https://github.com/facebook/react/issues/12125,12125,How to fix Only secure origins are allowed with nginx?,[],closed,False,,1,2018-01-31T08:12:37Z,2018-01-31T11:15:50Z,2018-01-31T11:15:50Z,NONE,completed,,"I don't want to use https.
thanks!"
,,,https://github.com/facebook/react/issues/12041,12041,"Suppress message: ""Download the React DevTools for ...""","[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,6,2018-01-18T15:08:02Z,2018-12-14T20:18:18Z,2018-01-19T10:02:00Z,NONE,completed,,"**feature/bug**

**What is the current behavior?**
React library logs either ""*Download the React DevTools for a better development experience: https://fb.me/react-devtools*"" or logs ""*Warning: The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://fb.me/react-devtools*"" if previous ""fix"" is employed.

**reproduce**
Run React site without production flag and without React DevTools extension installed.

**What is the expected behavior?**
No log output.

**Which versions of React**

React: 16.2.0

**Tried**
According to comment on #3877 the following should work in React >= 16.1.0.
```
      new webpack.DefinePlugin({
        '__REACT_DEVTOOLS_GLOBAL_HOOK__': '({ isDisabled: true })'
      }),
```
However this changes the log to:
""Warning: The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://fb.me/react-devtools""

Other fixes such as those from StackOverflow yield the same results: https://stackoverflow.com/a/42196820.

Also the plugin itself doesn't work for me because of https://github.com/facebook/react-devtools/issues/897. So installing it isn't an option, for me at least.

**TLDR**

I'm loving React. But logging the install note is a tad annoying. Previous fixes don't seem to work. So please provide an option to disable the log.
"
,,,https://github.com/facebook/react/issues/12002,12002,Add React.Children.isRenderable,[],closed,False,,2,2018-01-10T16:05:12Z,2018-01-10T19:06:00Z,2018-01-10T16:56:04Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
A feature

**Motivation:**
Given a component which gets props from `context` (e.g. it accepts props from Redux store via `connect` HoC) and renders either `null` or some React node by condition based on data from context it would be helpful to know outside the component whether it renders any markup or not. It would let us render wrappers for the component only if it is visible.

**Usage example:**
Let's say, we have a `FancyContainer` which wraps every child in a `FancyWrapper` (which can add margins, borders, animation etc).
```
<FancyContainer>
  <ConnectedComponent/>
  <ConnectedComponentConditionallyReturningNull/>
  <ConnectedComponent/>
</FancyContainer>
```
The `ConnectedComponent` doesn't accept props. It gets everything from `context`!
```
const FancyComponent = ({isNull}) => isNull ? null : <h1>Hello</h1>
const ConnectedComponent = connect((store) => ({isNull: !store.data}))(FancyComponent)
```
Without checking if a `ConnectedComponentConditionallyReturningNull` renders any markup we get an empty visible wrapper between first and third children and thus break styling.

React.Children.isRenderable would allow us to easily filter children without UI.
```
const FancyContainer = ({children}) =>
  React.Children.map(children, (child => 
    React.Children.isRenderable(child)
      ? <FancyWrapper>{child}</FancyWrapper>
      : child
  ))
```

**Why not just do X?**
We could achieve such behavior by passing a handler for the condition switch of the connected component, but this approach would break its encapsulation and it is not suitable for those library components which toggle their ""renderability"" internally.

We theoretically could use `:has` CSS pseudo selector (though it is not supported yet by any browser) and setting `ConnectedComponent`'s `display` property to `none` which would result in `FancyContainer` rendering invisible nodes. But if `FancyContainer` is itself wrapped in a `FancyWrapper` we then wouldn't be able to hide its styling.

We could try to manually find `<ConnectedComponent/>`'s node in DOM and if it doesn't exist remove `FancyWrapper` but that sound too messy and violates React's declarative nature. Also if data in `context` is dynamic (it usually is) we would then hide components while their data is still on the way from the server and might never reveal them when it is loaded to our `context` (maybe we could but with more mess).
"
,,,https://github.com/facebook/react/issues/11994,11994,i need to learn this ,[],closed,False,,1,2018-01-08T20:11:17Z,2018-01-08T20:13:55Z,2018-01-08T20:13:55Z,NONE,completed,,what do i need to learn to get started with react js 
,,,https://github.com/facebook/react/issues/12101,12101,Access Component from child's instance?,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,9,2018-01-26T10:15:55Z,2018-01-28T23:26:42Z,2018-01-28T13:24:28Z,NONE,completed,,"I am creating a [small, generic state management](https://github.com/franciscop/state) based on the `Proxy()` object. Now I am writing a React helper, but I've found an issue: to create the HOC I need access to `Component` from React. Looking at the [source code for Component](https://github.com/facebook/react/blob/master/packages/react/src/ReactBaseClasses.js) it doesn't seem like it can/should be a standalone function. This library should be able to be used independently, so making everyone download React is not feasible.

I have navigated through the [official HOC documentation](https://reactjs.org/docs/higher-order-components.html), past issues and Google but couldn't find any way to retrieve `Component` from the passed component to my HOC. This is the code I am working with (not yet in the repo linked above):

```js
// This will load the whole React independently of the project type
import { Component } from 'react';

const connect = (opts) => (Passed) => {
  return class WithState extends Component {
    // ...
  }
};

export default connect;
```

```js
// Note: assume this for Passed.js
import React, { Component } from 'react';
class Passed extends Component { ... }
export default connect()(Passed);
```

Now, I *did* find a hack to make this work, but it seems like one of the most fragile pieces of code I've ever written, relying on the differences between ES7 modules and CommonJS:

```js
const connect = (opts) => (Passed) => {
  const React = require('react');
  return class WithState extends React.Component {
    // ...
  }
};

export default connect;
```

This way it will only import React once the `connect()` is used, and `connect()` is the *React-exclusive* helper from my library. So my question/feature request is this: is it possible to access its constructor's parent (not just the child)? Could we make it possible somehow? Something like this would be ideal:

```js
// Is something like this possible?
const Component = Passed.super;
// or
const Component = Passed.constructor.super;
// or even (since a class is syntax sugar)
const Component = Passed.prototype.super;
```

I think that is not the way Javascript/React works, but I figured I will ask here since chances are you will know way better than me whether something like this is possible or not.



**Do you want to request a *feature* or report a *bug*?**
Request a feature I think"
,,,https://github.com/facebook/react/issues/12012,12012,React.Children.toArray and React.cloneElement do not work with portal elements,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":139653724,""node_id"":""MDU6TGFiZWwxMzk2NTM3MjQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities"",""name"":""Component: Core Utilities"",""color"":""c5def5"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,3,2018-01-12T10:23:26Z,2020-01-19T01:48:55Z,2020-01-19T01:48:55Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

BUG or undefined behaviour

**What is the current behavior?**

Doing
```
React.Children.toArray(
  ReactDOM.createPortal(...)
)
```

fails with:
```
Objects are not valid as a React child (found: object with keys {$$typeof, key, children, containerInfo, implementation}). If you meant to render a collection of children, use an array instead.
```

Namely, the following complete snippet fails:

```jsx
import React from 'react';
import { render, createPortal } from 'react-dom';

const RenderChildren = ({ children }) => {
  children = React.Children.toArray(children)
  return <h1>Renders children with toArray: {children}</h1>
}


const App = () => ( 
  <RenderChildren name=""CodeSandbox"">
    {createPortal(<div>rendered in portal</div>, document.getElementById('portal'))}
  </RenderChildren>
);

render(<App />, document.getElementById('root'));
```

while the following one, which wraps the portal in another element works just fine

```jsx
import React from 'react';
import { render, createPortal } from 'react-dom';

const RenderChildren = ({ children }) => {
  children = React.Children.toArray(children)
  return <h1>Renders children with toArray: {children}</h1>
}


const App = () => ( 
  <RenderChildren name=""CodeSandbox"">
    <div>
        {createPortal(<div>rendered in portal</div>, document.getElementById('portal'))}
    </div>
  </RenderChildren>
);

render(<App />, document.getElementById('root'));

```
**What is the expected behavior?**
I am aware that `createPortal` is a new feature, but in the best case scenario it should be possible to use it everywhere other valid nodes are accepted.

The same thing is happening for `React.cloneElement(ReactDOM.createPortal(....))` - it's probably weird to try and clone a portal 😄  - but maybe we should specify in the `createPortal` documentation that it cannot be cloned, at least for now. Should I open a PR for that?

Let me know your thoughts

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

I'm using React 16.*"
,,,https://github.com/facebook/react/issues/12033,12033,Refs Must Have Owner Warning,[],closed,False,,13,2018-01-17T09:11:10Z,2018-02-06T15:19:06Z,2018-01-28T13:14:22Z,NONE,completed,,"** Reporting a bug

The problem I'm having is in the interplay of several packages but I feel that the only package actually doing something wrong here is react.

Versions:
- react 16.2.0 (also happened with 15.something)
- node.js 7.9 (electron 1.7.10)
- windows 10

** Current behavior

I get the error message from here https://reactjs.org/warnings/refs-must-have-owner.html although none of the three explanations is true.
Actually react _is_ loaded twice but it's the same version and there is little I can do to prevent it.

What happens, as far as I can understand is this:
my application imports react from in two ways
  * application -> react
  * application -> node_modules/myapi -> react
both get the same react module from the same path.
However, the myapi module is installed via yarn link.
Now on case-insensitive filesystems, yarn link can cause the file path to have different caseing, i.e. my application is in C:/application but the resolved link (which node uses via require) is c:/application/... so the case of the drive letter changes for the api and everything _require_d from the api.

So even though I call ""require('react')"" both times I end up importing
C:/application/node_modules/react/...
and
c:/application/node_modules/react/...

which is obviously the same thing, yet it means react is loaded twice.

Now the ref that's triggering the error is also not added by me but by react-bootstrap which adds a string-ref.

So my code has no bug (I'm not using different react versions or different case when importing react _in my code_)
react-bootstrap doesn't do anything wrong (because string refs are still allowed).
node isn't doing anything wrong (since it documents that require isn't guaranteed to always return the instance.)
yarn isn't doing anything wrong (because on a case-insensitive filesystem there is nothing wrong with using different cases for the drive letter between link source and link target.)

react however relies on require always returning the same instance, which it can't.

**What is the expected behavior?**

React doesn't rely on behavior that is documented to be unreliable."
,,,https://github.com/facebook/react/issues/12171,12171,Remove use of Proxy for events in development,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,9,2018-02-07T08:17:56Z,2018-07-17T23:15:08Z,2018-07-17T23:14:14Z,MEMBER,completed,,"I think maybe we should revert https://github.com/facebook/react/pull/5947.

People already think `proxyEvent` is some kind of an API: https://github.com/facebook/react/issues/12169.

It's also annoying to view in the debugger because none of the properties show up.

Instead, we could seal the event object or something like that."
,,,https://github.com/facebook/react/issues/12292,12292,[CI] Danger failing with auth errors,"[{""id"":71502270,""node_id"":""MDU6TGFiZWw3MTUwMjI3MA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure"",""name"":""Component: Build Infrastructure"",""color"":""f9d0c4"",""default"":false,""description"":null}]",closed,False,,1,2018-02-26T19:40:05Z,2018-02-27T00:35:09Z,2018-02-27T00:35:09Z,CONTRIBUTOR,completed,,See: https://github.com/facebook/react/pull/12291
,,,https://github.com/facebook/react/issues/12184,12184,"to access refs, we recommend the callback pattern instead... How?",[],closed,False,,4,2018-02-08T09:36:36Z,2018-02-08T13:14:18Z,2018-02-08T13:14:18Z,NONE,completed,,"What do you mean by that? Here https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs

> If you’re currently using this.refs.textInput to access refs, we recommend the callback pattern instead

What callback pattern do you mean? How do you mean to use it with refs?"
,,,https://github.com/facebook/react/issues/12308,12308,Reset state,[],closed,False,,2,2018-02-28T15:55:36Z,2018-03-27T22:56:45Z,2018-03-27T22:56:19Z,NONE,completed,,"I'd like to have a function that would reset all the state of react to start rendering from scratch again.

Currently, the code below causes a duplication of virtual dom. The React tab in devtools shows `<App />` node twice.

```
document.body.innerHTML = '<div id=""app""></div>';
ReactDOM.render(<App />, document.querySelector(""#app""));

// page change

document.body.innerHTML = '<div id=""app""></div>';
ReactDOM.render(<App />, document.querySelector(""#app""));
```

It is possible to unmount it before the container element is lost to prevent the duplication of vdom.

```
document.body.innerHTML = '<div id=""app""></div>';
ReactDOM.render(<App />, document.querySelector(""#app""));
ReactDOM.unmountComponentAtNode(document.querySelector(""#app"")); // <--- unmount and remove

// page change

document.body.innerHTML = '<div id=""app""></div>';
ReactDOM.render(<App />, document.querySelector(""#app""));
```

However, sometimes it is difficult to bind to an event or change a router code in a legacy app where React is used for rendering a page. The page is destroyed when the router decides to change the page to another and React don't get the same container element again.

Since you can't call `ReactDOM.unmountComponentAtNode` before the change, nor after the change (before rendering) with the lost container element, it would be useful to have a function to reset all the React state before rendering the new page.

```
document.body.innerHTML = '<div id=""app""></div>';
ReactDOM.render(<App />, document.querySelector(""#app""));

// page change

document.body.innerHTML = '<div id=""app""></div>';
ReactDOM.reset();  // <--- I don't care about the previous state, I want to render the component from scratch (as there would be no rendering before)
ReactDOM.render(<App />, document.querySelector(""#app""));
```

The name doesn't have to be called `reset` or be within `ReactDOM`. The point here is that the rendering should not duplicate virtual dom since the container element was changed.
"
,,,https://github.com/facebook/react/issues/12271,12271,React 16's new error handling results in data loss on forms that react while typing,[],closed,True,,1,2018-02-23T04:20:22Z,2018-02-24T00:04:48Z,2018-02-24T00:04:33Z,NONE,completed,,"As discussed here:
https://github.com/facebook/react/issues/11846

We have similar problems, if any error happens in ex. a textarea widget it'll unmount the entire app. Previously the user could copy and paste the text out of the form even if the page was behaving strangely or print it or whatever. Now any error anywhere in any part of the system (even a third party dependency or a browser feature) results in immediate data loss for the user. ex. a counter that shows the number of words as you type. If there was a bug in it then users would sometimes lose all the text they typed.

I totally understand the motivations for this feature and how it models native apps crashing, but it doesn't really work well (at least for us) with the web and tangle of third party dependencies that exist today. I can see how it works well for Facebook since they control every dependency and can fix bugs across all of them as needed. If you instead have a set of third party dependencies and one has a bug you can end up stuck where your app randomly breaks or shows blank to users. I guess you could put an error boundary around every widget in the entire page but that's hard to enforce and still results in data loss (just scoped).

My understanding is that we can't just render again per the discussion in the mentioned bug since it'd throw again, and because it destroys all the statefulness of the various browser widgets (ex. video or plugins).

Can this feature be made opt out?"
,,,https://github.com/facebook/react/issues/12140,12140,Safari 11 errors when using Fragment upon hydrating,[],closed,False,,4,2018-02-02T15:24:12Z,2018-02-02T16:00:14Z,2018-02-02T15:57:46Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
This is a bug.

**What is the current behavior?**
Safari 11 (both Mac OS X and iOS) throws error 130:

```
Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object.
```

I have not been able to make a reduced test case but I'm reporting this in hope that someone else also has this issue and is able to figure out what is the root cause.

Currently the best I have figured out is that when in **production** universal rendering scenario and using React.Fragment together with elements that use context (like a component connected to Redux) Safari 11 errors during client side hydration. For example, in one case I had code like this:

```jsx
    <Fragment>
        <div onClick={activateModal}>Open modal</div>
        {isModalActive && <Modal />}
    </Fragment>
```

Which errored in Safari 11 until I replaced the Fragment with a div. In this case the Modal component was also connected to Redux and returned node using `createPortal`.

In another scenario we have CMS content using a custom renderer where JSON is transformed for React rendering and with some components there is a complex context based logic where using Fragments anywhere causes error in Safari 11. Similarly the issue was fixed by replacing Fragment with a div or a span depending on case.

Currently the only things I have been able to track together is the use of Fragments and context. It is possible that the bug requires some other condition but we have a large complex project, and I'm not an Apple user, which complicates things for me. It is also very inconvenient that this bug only happens with production React and bundle which results in very unhelpful error messages.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
This is my current best **attempt** in isolating the issue, but it does **not** replicate it: https://codepen.io/Merri/pen/xYZKez

**What is the expected behavior?**
Safari 11 should not throw during hydrate when using a mixture of Fragment and context.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 16.2 (production only, no issue with development version)
Safari 11 (Safari 10 works fine)"
,,,https://github.com/facebook/react/issues/12130,12130,How to update State in a batch with react 16 from outside the render cycle?,[],closed,False,,3,2018-02-01T06:22:20Z,2018-05-18T15:22:36Z,2018-02-01T10:40:33Z,NONE,completed,,"App has many state changes coming in from external sources. calling setState() for each **from outside the render cycle** hurts performance a lot, as each setState starts a new render cycle:

```
for_each (state_change in queued_state_changes) {
   state_change.target.setState(state_change.new_state); // each one starts a render cycle
}
```

What i would like to do is something like:
```
React.batchedUpdates(function() {
    for_each (state_change in queued_state_changes) {
        state_change.target.setState(state_change.state); 
    }});  // starts only one render cycle after updating all the states
```

How can i achieve this with react 16?"
,,,https://github.com/facebook/react/issues/12301,12301,state change in td element,"[{""id"":40929154,""node_id"":""MDU6TGFiZWw0MDkyOTE1NA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Invalid"",""name"":""Resolution: Invalid"",""color"":""e6e6e6"",""default"":false,""description"":null},{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,10,2018-02-27T08:05:21Z,2018-03-29T21:43:02Z,2018-03-27T22:57:11Z,NONE,completed,,"Displaying tabular rows, when setting data in td element, on state change it displays only the currently updated td element data..all the other ones go missing from screen. When the same thing is placed within text box in each td element things work fine.

Following is sample the code :

Working code :
`<tr key={id}> `
`<td> <input  value={this.state.price[id]}/> </td>`

Failing code :
`<tr key={id}> `
`<td> {this.state.price[id]} </td>`"
,,,https://github.com/facebook/react/issues/12282,12282,Bensin,[],closed,False,,2,2018-02-25T02:46:58Z,2018-02-25T02:51:02Z,2018-02-25T02:47:52Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
"
,,,https://github.com/facebook/react/issues/12165,12165,Why can't we use both prevstate (function) + callback as parameters in setState()?,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,2,2018-02-06T17:06:28Z,2018-02-07T00:44:03Z,2018-02-07T00:44:03Z,NONE,completed,,
,,,https://github.com/facebook/react/issues/12320,12320,filter JSON not working,[],closed,False,,2,2018-03-02T14:28:36Z,2018-03-02T14:52:26Z,2018-03-02T14:48:32Z,NONE,completed,,"**How to filter data from one JSON call using http.get?**,

console says: _TypeError: Cannot read property 'toLowerCase' of undefined_

```
import React, { Component } from 'react';

import { BrowserRouter as Router, Route, Link } from ""react-router-dom"";
// import data from './datos.json';

// filter
function searchingData(product) {
  return function(x){
    // return x.first.toLowerCase().includes(product.toLowerCase()) || !product;
  }
}

class App extends Component {

  constructor(props){
    super(props);
    this.state = {
        items : [],
        product: ''
    };
    // You should bind this object to componentWillMount method, other setState was not working
    this.componentWillMount = this.componentWillMount.bind(this);
  }
  
  componentWillMount() {
    fetch('https://jsonplaceholder.typicode.com/posts')
      .then(res => res.json())
      .then( data => this.setState({ items : data }) );
  }

  SearchWord(event) {
    this.setState({
      product: event.target.value
    })
  }

  // VIEW
  render() {
    
    // const items = this.state.items; 
    const {items, product} = this.state;

    return (
      <Router> 
        <div className=""App"">  

          {/* SHOW JSON */}

          {/* filter */}
          <input type=""text"" placeholder=""SEARCH DATA"" onChange={this.componentWillMount} value=""{product}"" /> 

          <ul>
            {
              items.filter(searchingData(product)).map(item =>
                <li key={item.title}>
                    {item.title}
                </li>
            )}
          </ul>        

        </div>
      </Router>
    );
  }
}

export default App;

```"
,,,https://github.com/facebook/react/issues/12491,12491,Provide a better error on React.cloneElement(null/undefined),"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null}]",closed,False,,4,2018-03-30T06:21:12Z,2018-04-10T01:16:56Z,2018-04-10T01:16:56Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
![image](https://user-images.githubusercontent.com/5977311/38124026-a0984a98-3411-11e8-838f-2d6f3dc97046.png)
"
,,,https://github.com/facebook/react/issues/12361,12361,question about setTimeout effect of two  react demo,"[{""id"":40929154,""node_id"":""MDU6TGFiZWw0MDkyOTE1NA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Invalid"",""name"":""Resolution: Invalid"",""color"":""e6e6e6"",""default"":false,""description"":null}]",closed,False,,4,2018-03-13T11:42:46Z,2018-03-27T22:25:31Z,2018-03-27T22:25:21Z,NONE,completed,,"I am a react learner. I'm counfuse by two react demo
[demo1](https://8nv081l708.codesandbox.io/)
[demo2](https://xj4j54lk9z.codesandbox.io/)

>[demo1](https://8nv081l708.codesandbox.io/)

```js
import React from ""react"";

let num = 0;
export default class Hello extends React.Component {
  state = {
    loading: false,
    data: 0
  };
  componentDidMount() {
    // setTimeout(() => {
    // const button = document.getElementById('button');
    const button = this.button;
    console.log(""button first click"");
    button.click();
    console.log(""button second click"");
    button.click();
    // }, 3000);
  }
  delay = () => {
    const count = num++;
    console.log(""out"", count);
    this.setState({
      loading: true
    });

    setTimeout(() => {
      const data = Math.random() * 10;
      console.log(""in"", count);
      this.setState({
        data: data,
        loading: false
      });
    }, 1000);
  };
  render() {
    const { loading, data } = this.state;
    if (loading) {
      return <p>this is loading</p>;
    }
    return (
      <div>
        <p>{`data: ${data}`}</p>
        <p>
          <button
            id=""button""
            ref={ref => (this.button = ref)}
            onClick={this.delay}
          >
            update
          </button>
        </p>
      </div>
    );
  }
}
```

> [demo2](https://xj4j54lk9z.codesandbox.io/)
```js
import React from ""react"";

let num = 0;
export default class Hello extends React.Component {
  state = {
    loading: false,
    data: 0
  };
  componentDidMount() {
    setTimeout(() => {
      // const button = document.getElementById('button');
      const button = this.button;
      console.log(""button first click"");
      button.click();
      console.log(""button second click"");
      button.click();
    }, 3000);
  }
  delay = () => {
    const count = num++;
    console.log(""out"", count);
    this.setState({
      loading: true
    });

    setTimeout(() => {
      const data = Math.random() * 10;
      console.log(""in"", count);
      this.setState({
        data: data,
        loading: false
      });
    }, 1000);
  };
  render() {
    const { loading, data } = this.state;
    if (loading) {
      return <p>this is loading</p>;
    }
    return (
      <div>
        <p>{`data: ${data}`}</p>
        <p>
          <button
            id=""button""
            ref={ref => (this.button = ref)}
            onClick={this.delay}
          >
            update
          </button>
        </p>
      </div>
    );
  }
}

```

the only different code is in **componentDidMount()**
the console message is aslo different about two demo
> [demo1](https://8nv081l708.codesandbox.io/) result
![image](https://user-images.githubusercontent.com/17786362/37339919-3e4bf352-26f7-11e8-8c38-06064ba3b466.png)

> [demo2](https://xj4j54lk9z.codesandbox.io/) result
![image](https://user-images.githubusercontent.com/17786362/37339948-55f0bd6c-26f7-11e8-93b6-6a6e79df986d.png)
"
,,,https://github.com/facebook/react/issues/12500,12500,Warning in IE 11 when using React.Fragment,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,14,2018-03-31T11:00:44Z,2018-06-06T08:51:31Z,2018-04-01T00:14:37Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**

bug

**What is the current behavior?**

With React 16.3.0, when using `<React.Fragment>` IE 11 gives the following warning:

```
Warning: Invalid prop `children` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.
```

Steps to reproduce:
1. Use `create-react-app` to create a new React app.
2. Add `<React.Fragment>` to `App.js`. For example:

```
import React, { Component } from ""react"";
import logo from ""./logo.svg"";
import ""./App.css"";

class App extends Component {
  render() {
    return (
      <div className=""App"">
        <React.Fragment>
          <header className=""App-header"">
            <img src={logo} className=""App-logo"" alt=""logo"" />
            <h1 className=""App-title"">Welcome to React</h1>
          </header>
          <p className=""App-intro"">
            To get started, edit <code>src/App.js</code> and save to reload.
          </p>
        </React.Fragment>
      </div>
    );
  }
}

export default App;
```

3. Open the app in IE 11.
4. Open IE dev tools and refresh the browser.
5. You should see the above mentioned warning message in the console window.

No warnings with Chrome, Firefox, and Edge.

**What is the expected behavior?**

There should be no warnings shown.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React: 16.3.0
Browser: IE 11
OS: Windows 10"
,,,https://github.com/facebook/react/issues/12462,12462,itemProp and itemType incorrectly rendered using react-dom/server,[],closed,False,,1,2018-03-27T10:55:42Z,2018-04-08T00:16:46Z,2018-03-27T16:21:35Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
A bug.


**What is the current behavior?**
When ""server side"" rendering elements with the [microdata](https://www.w3.org/TR/microdata/) props `itemProp` or `itemType`, the outputed HTML attributes remain in camel case.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
https://codesandbox.io/s/jjn2wnq6jy

**What is the expected behavior?**
The HTML attributes should be lowecase.

The react-dom renderer does not suffer from this issue.

The `itemScope` microdata attribute does not suffer from this issue.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
At least React 16.1 and 16.2 are affected, React 15.x does not appear to be.

This is not a browser related issue."
,,,https://github.com/facebook/react/issues/12321,12321,React crashing with no error when using a component inside itself recursively,[],closed,False,,2,2018-03-02T14:57:58Z,2018-03-27T22:46:02Z,2018-03-27T22:46:01Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug
**What is the current behavior?**
React should throw an error/warning when using a component inside itself (recursively)
I know this is an edge case, but nevertheless. I was mistakenly caught in it
```JavaScript
import React from ""react"";
import Hello, { Bug } from ""./Hello"";

export default ({ me }) => (me ? <Bug me /> : <Hello />);
```
Using a component inside itself breaks
**Waring**: this will crash ⚠️ your browser tab https://codesandbox.io/s/vy5ky3zwm5
Here is one that **will not**: https://codesandbox.io/s/l2q2415879
In order to reproduce: just un-comment `Bug` component
**What is the expected behavior?**
Not sure, but an error would be good if possible
"
,,,https://github.com/facebook/react/issues/12312,12312,Why setState executes in setTimeout will become sync？,[],closed,False,,5,2018-03-01T03:11:54Z,2018-12-03T14:56:22Z,2018-03-01T17:29:24Z,NONE,completed,,"```
componentDidMount(){
    setTimeout(() => {
            
            this.setState({ count: 1 }, () => {
                console.log(`banana`)
            })
            console.log(`lemen`)

            setTimeout(() => {
                console.log(`grape`)
            }, 0)

            this.setState({ count: 2 }, () => {
                console.log(`strawberry`)
            })

            console.log(`pear`)
        }, 0)
}
```
Why did lemen print behind banana?"
,,,https://github.com/facebook/react/issues/12494,12494,Invalid DOM property `frameborder`. Did you mean `frameBorder`?,[],closed,False,,1,2018-03-30T17:35:57Z,2018-04-01T01:08:33Z,2018-04-01T01:08:23Z,NONE,completed,,I'm using [react-safe-html](https://github.com/brigand/react-safe-html) to render HTML from editor on website. The thing is that when it renders `iframe` it causes **Invalid DOM property `frameborder`. Did you mean `frameBorder`?** error. But when I use `frameBorder` in component it **DOESN'T** affect rendered iframe's border. However `frameborder` does (but it throws this warning).
,,,https://github.com/facebook/react/issues/12481,12481,[SVG] Enable focusable to accept boolean values,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,2,2018-03-29T08:35:33Z,2018-08-07T18:39:57Z,2018-08-07T18:39:57Z,NONE,completed,,"Moved discussion from https://github.com/facebook/react/issues/6212.

## Situation

The [`focusable` attribute](https://www.w3.org/TR/SVGTiny12/interact.html#focusable-attr) from the SVG specifications is an [enumerated attribute](https://html.spec.whatwg.org/#keywords-and-enumerated-attributes) accepting values `""true""`, `""false""` and `""auto""`. Because it is technically not a boolean attribute (although it certainly somehow looks like it), React expects the value to be passed as a string. See the following example:

```diff
-<svg focusable>I should be focusable</svg>
-<svg focusable={true}>I should be focusable</svg>
+<svg focusable='true'>I should be focusable</svg>
```

The thing is, the `focusable` attribute is often used in conjunction with elements from the ARIA specification, in which attributes are booleans and not enumerated attributes with `""true""` and `""false""` values. The [`aria-hidden` attribute](https://www.w3.org/TR/wai-aria-1.1/#aria-hidden) is a good example of that.

For instance, [following a good practice for icon-buttons](https://fvsch.com/code/svg-icons/#section-html):

```html
<button type=""button"">
  <svg aria-hidden=""true"" focusable=""false"">
    <use xlink:href=""#icon-play""></use>
  </svg>
  <span class=""access-label"">Start playback</span>
</button>
```

From an authoring perspective, the above snippet would likely be written like this in JSX:

```jsx
<button type='button'>
  <Icon icon='play' aria-hidden={true} focusable={false} />
  <span class='access-label'>Start playback</span>
</button>
```

The problem is that `focusable` **cannot** be authored as a boolean, otherwise it will **not** be printed out in the DOM. On the other hand, `aria-hidden` is perfectly fine being written as a boolean at it gets coerced by React.

## Proposal

Given the default value for the `focusable` attribute is `""auto""`, this is very likely this attribute gets authored to change its value to `true` or `false`. In that regard, it is confusing that it has to be specified as a string, when other attributes accepting booleans can be authored as such.

The suggestion would be to make it possible for `focusable` to be specified as either a boolean or a string, like other similar attributes. In other words, all the following should work:

```jsx
<svg focusable>I should be focusable</svg>
<svg focusable={true}>I should be focusable</svg>
<svg focusable='true'>I should be focusable</svg>
<svg focusable={false}>I should not be focusable</svg>
<svg focusable='false'>I should not be focusable</svg>
<svg focusable='auto'>I should be focusable</svg>
```

From an authoring perspective, I believe this would be the most straightforward and less confusing."
,,,https://github.com/facebook/react/issues/12340,12340,jsx's close tag name may optional?,[],closed,False,,4,2018-03-07T11:40:07Z,2018-03-07T12:33:47Z,2018-03-07T12:33:47Z,NONE,completed,,"
**Do you want to request a *feature* or report a *bug*?**
*feature*

**What is the current behavior?**
```html
<div>
  <p>some text</p>
  <hr/>
</div>
```

**What is the expected behavior?**
because the html tag always pairs, so if simple write better?
```html
<div>
  <p>some text</>
  <hr/>
</>
```"
,,,https://github.com/facebook/react/issues/12667,12667,Get State Of Parent From Child (without passing state as props),[],closed,False,,2,2018-04-22T09:24:37Z,2018-04-22T18:45:09Z,2018-04-22T18:22:21Z,NONE,completed,,"Is it true to get state (and all of its methods) of parent component from child using **this** keyword?

```
class App extends Component {
	constructor (props) {
	super(props)
		this.state = {
			value: 0
		}
	}	
	render() {

		return (     
			<Child that = {this} />     
		   );
	}
}
```

And from the Child component

```
class Child extends Component {
	constructor (props) {
	        super(props)
        }		
	render() {
		alert(this.props.that.state.value)
		return (null);
	}
}

```




"
,,,https://github.com/facebook/react/issues/12691,12691,It's possible to do unlimited recursive rendering with an HOC,[],closed,False,,3,2018-04-25T21:13:28Z,2018-04-26T18:54:58Z,2018-04-26T18:54:58Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

I would consider it a feature 😈 

**What is the current behavior?**

React does not put any limits on recursive rendering, using higher-order components. However it does so for calling `this.setState(...)`

It reproduces pretty easy with a pair of a Container and an HOC:
https://github.com/sergeysolovev/react-bomb/blob/master/src/index.js

I wouldn't try this on CodeSandbox or JSFiddle (I did). Here is the code:

```javascript
import React from ""react"";
import ReactDOM from ""react-dom"";

// Accepts a component as a prop and renders it
// passing the props through. In a real life scenario
// usually does something more than that
const Container = props => {
  const { component: Component } = props;
  return <Component {...props} />;
};

// An HOC-version of Container
const withContainer = WrappedComponent => props => (
  <Container component={WrappedComponent} {...props} />
);

// Though it looks a bit artificially here,
// it's pretty common to use something like `compose`
// which does the same thing but looks more innocent
const Bomb = withContainer(withContainer(() => null));

class Detonator extends React.Component {
  state = {
    wentOff: false
  };
  goOff = () => this.setState({ wentOff: true });
  render = () =>
    this.state.wentOff ? (
      <React.Fragment>
        <Bomb /> Oooppps... This text probably wont be rendered
      </React.Fragment>
    ) : (
      <button onClick={this.goOff}>Lets see</button>
    );
}

ReactDOM.render(<Detonator />, document.getElementById(""root""));
```

**What is the expected behavior?**

I would expect to have some limit on such kind of recursion, because it's blazing fast (like React's supposed to be), eating lots of RAM in short time and a bit difficult and annoying to stop.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Reproduces on Chrome 65. I've done it for React 16.3.1 and 16.3.2
"
,,,https://github.com/facebook/react/issues/12551,12551,New Context Provider may block Old context propagation if children are constant,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,6,2018-04-05T09:18:08Z,2018-05-24T01:22:31Z,2018-04-26T19:59:18Z,CONTRIBUTOR,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Bug

**What is the current behavior?**

It seems that, if the children of a new-style `React.createContext()` context `Provider` are constant, the `Provider` can block updates from old-style `this.context` context providers from propagating to `this.context` consumers.

This sandbox demonstrates the issue. Clicking the button with a number will correctly increment the `Root`'s `state` and `context`, but the update is only propagated to the `Child3`'s `context` (and its button) when the ""Colors!"" button is clicked, as it causes an update to the `value` of the new-style `Provider`:

https://codesandbox.io/s/ol4lpokpjy

<details>
<summary>Copy of the source code in the sandbox</summary>

```jsx
import PropTypes from ""prop-types"";
import React from ""react"";
import ReactDOM from ""react-dom"";

class Root extends React.Component {
  constructor(props: {}) {
    super(props);
    this.state = {
      count: 0
    };
    this.countUp = this.countUp.bind(this);
  }

  getChildContext() {
    return {
      ...this.context,
      count: this.state.count,
      countUp: this.countUp
    };
  }

  render() {
    return this.props.children;
  }

  countUp() {
    this.setState(({ count }) => ({ count: count + 1 }));
  }
}

Root.childContextTypes = {
  count: PropTypes.number.isRequired,
  countUp: PropTypes.func.isRequired
};

const ctx = React.createContext();

class Child1 extends React.Component {
  constructor(props: { onClick(): void }) {
    super(props);
    this.state = {
      color: randomHexColor(),
      newColor: this.newColor.bind(this)
    };
  }

  render() {
    return (
      <ctx.Provider value={this.state}>{this.props.children}</ctx.Provider>
    );
  }

  newColor() {
    const color = randomHexColor();
    this.setState(() => ({ color }));
  }
}

function randomHexColor() {
  const colorStr = Math.floor(Math.random() * (Math.pow(2, 24) - 1)).toString(
    16
  );
  return ""#000000"".slice(0, -colorStr.length) + colorStr;
}

class Child2 extends React.Component {
  render() {
    return (
      <ctx.Consumer>
        {ctx => (
          <React.Fragment>
            <Child3 color={ctx.color} />
            <button onClick={ctx.newColor}>Colors!</button>
          </React.Fragment>
        )}
      </ctx.Consumer>
    );
  }
}

class Child3 extends React.Component {
  render() {
    return (
      <button
        style={{ color: this.props.color }}
        onClick={this.context.countUp}
      >
        {this.context.count}
      </button>
    );
  }
}

Child3.contextTypes = {
  count: PropTypes.number.isRequired,
  countUp: PropTypes.func.isRequired
};

ReactDOM.render(
  <Root>
    <Child1>
      <Child2 />
    </Child1>
  </Root>,
  document.getElementById(""root"")
);

```

</details>

**What is the expected behavior?**

Both old-style and new-style context updates should coexist.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.3.1; also broken in 16.3.0.

---

This seems to only happen if the `children` of the `Provider` are constant, which is what happens when the children are provided on the first and only `ReactDOM.render` call. If `Child1` is updated to directly use `<Child2/>` instead of `{this.props.children}`, the problem does not happen.

This can also be a problem when using a production optimization that hoists constant elements outside the Component if the specified children are constant, which would even defeat the fix/workaround for the example above."
,,,https://github.com/facebook/react/issues/12652,12652,Mute componentDidCatch and allow developers to log it themselves.,[],closed,False,,3,2018-04-19T18:34:15Z,2019-10-30T20:27:44Z,2018-04-19T19:21:34Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
feature

**What is the current behavior?**
When a child throws an error inside an error boundary and hits it's `componentDidCatch` the error is still logged to the console regardless of any handling that you then do inside of your `componentDidCatch`.

**What is the expected behavior?**
Wouldn't it make more sense to give some more fine grated control over how errors get logged once they do bubble up all the way to an error boundary? My motivation for this is:

- When using an error logging service (rollbar, sentry, etc.) you normally don't really need/want your error to bubble through to the console in production.

- Testing an error boundary component feels a bit funky right now because for test runners like jest you have to mock jsDom's virtual console to suppress error showing up in your test results.

- The severity of an error caught by a specific error boundary might be just a warning, thus you would have to throw a console.warn along the already thrown error.

- When you try/catch outside of react you would also handle the logging in your catch by rethrowing a specific exception.

I wonder what your opinion is on this :)
"
,,,https://github.com/facebook/react/issues/12711,12711,setState callback fired with wrong state context when using ReactDOM.unstable_deferredUpdate,"[{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,False,,2,2018-04-28T14:42:02Z,2018-05-08T17:29:10Z,2018-05-08T17:29:10Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
`setState` callback is not functioning as expected when using `setState` directly and wrapped it in `ReactDOM.unstable_deferredUpdate` at same time. 

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://jsfiddle.net/Luktwrdm/436/

If you open console, and click the `refresh` button, sometimes you may see the state in callback is smaller than it was before the `setState` was called. We definitely expect it would be bigger than it was.


**What is the expected behavior?**

As said above.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.3.2"
,,,https://github.com/facebook/react/issues/12516,12516,Warning `Unsafe legacy lifecycles will not be called for components ...` keeps appearing,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,9,2018-04-02T03:23:47Z,2020-05-19T13:25:08Z,2018-04-04T17:25:51Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Might be a bug?

**What is the current behavior?**
Replaced componentWillReceiveProps() with a newly added getDerivedStateFromProps() but the warning keeps appearing in the console.

I doubted the higher order component at first sight, so removed all the coupling with this component's higher order wrapper. I also removed `children` in render() in an effort to remove all the side effects.

Apparently there's no componentWillReceiveProps() in this component but I cannot get rid of this warning. The only thing I could do was to explicitly assign null to `this.componentWillReceiveProps`, then the warning was gone.

Am I missing something or is it a bug? I also wish this warning could be optionally turned off in development environment. (Considering the legacy React libraries still use them and can be injected by e.g. HOC)

![image](https://user-images.githubusercontent.com/13134658/38181829-29968f48-3670-11e8-8cd5-be24fe2d6d1e.png)


```javascript
class RootContainer extends React.Component {
  constructor() {
    super();
    this.state = {
    };
    this.componentWillReceiveProps = null; // Only way I can turn that warning off
  }

  static getDerivedStateFromProps(nextProps, prevState) {
    // ...
    return prevState;
  }

  render() {
    return (
      <div>1</div>
      // <Root>
      //   {this.props.history 
      //     ? this.props.children 
      //     : null}
      // </Root>
    );
  }
}

// ...

export default RootContainer;
// export default withRouter(connect(makeMapStateToProps)(RootContainer));

```

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**
No warning (or at least to turn that off by option even in `development` environment)

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
- React 16.3.0
- React-DOM 16.3.0
- React-Redux 5.0.7
- React-Router-DOM 4.2.2

**UPDATE Apr 4** 
- React-hot-loader 4.0.0 **(CAUSE OF WARNING)**"
,,,https://github.com/facebook/react/issues/12663,12663,Skip second argument in React.createElement(),[],closed,False,,1,2018-04-20T16:51:35Z,2018-04-21T22:39:24Z,2018-04-21T22:39:24Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
A feature

**What is the current behavior?**
`React.createElement(component, props, children)`, when `props` aren't needed, you still have to pass `null` or `{}` as a second argument.

**What is the proposal?**
Being allowed to omit the second argument, allowing this:
```es6
import React from 'react'
import Foo from './Foo'
import Bar from './Bar'

const o = React.createElement

const App = () =>
  o('div',
    o('h1', 'Hello'),
    o(Foo),
    'Ok!',
    o('p', 'How are you?'),
    o(Foo,
      o(Bar, { key: 'hi' },
        o('span', 'Heya!')
      )
    )
  )
```

**Demo code?**
I currently, very naively, use this:
```es6
function o () {
  var argumentsArray = Array.from(arguments)
  var x = argumentsArray[1]
  if (typeof x === 'string' || typeof x === 'number' || Array.isArray(x) || (typeof x === 'object' && Object.keys(x)[0] === '$$typeof')) {
    argumentsArray.splice(1, 0, {})
  }
  return React.createElement.apply(this, argumentsArray)
}
```"
,,,https://github.com/facebook/react/issues/12554,12554,"""setState()"" always triggers ""componentWillReceiveProps()""","[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,2,2018-04-05T19:57:09Z,2018-04-05T22:37:34Z,2018-04-05T22:37:34Z,NONE,completed,,"Hi there.
Since React v16.3.0 every `this.setState()` triggers `componentWillReceiveProps()`. Before v16.3.0 there is no such behavior. 
It is a very breaking change for my project, it causes a lot of problems.
Is it a normal behavior or a bug?

Also,  `this.setState()` triggers new method `getDerivedStateFromProps()` too."
,,,https://github.com/facebook/react/issues/12616,12616,"Uncaught TypeError: Super expression must either be null or a function, not undefined while importing react and react-dom","[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,20,2018-04-15T16:47:03Z,2022-07-06T05:12:10Z,2018-04-15T17:11:53Z,NONE,completed,,"This are my dependencies and there version ( if it helps ) 
```
 ""dependencies"": {
    ""react"": ""^16.3.1"",
    ""react-dom"": ""^16.3.1"",
    ""webpack"": ""^2.1.0-beta.25""
  },
```
I have the most simplest code for the hello world using react component
````
import React from 'react';
import ReactDOM from 'react-dom';

class Hello  extends React.Component{
  render(){
    return (
      <h1>hello  world</h1>
    )
  }
}
ReactDOM.render(
  <Hello />,
  document.getElementById('root')

)
```
`


using bundle.js in the html script to bundle up everything 
**getting error**

`Uncaught TypeError: Super expression must either be null or a function, not undefined
    at _inherits (script.js:2)
    at bundle.js:7830
    at Object.<anonymous> (script.js:11)
    at __webpack_require__ (bootstrap d328d05e6065876b9d70:19)
    at bootstrap d328d05e6065876b9d70:63
    at bootstrap d328d05e6065876b9d70:63`

thanks in advance"
,,,https://github.com/facebook/react/issues/12712,12712,encoded character in table td tags showing as string incorrectly,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,3,2018-04-28T14:45:37Z,2018-06-24T01:31:07Z,2018-06-24T01:31:07Z,NONE,completed,,"Encoded characters for example `&pound;`, `&#36;` can not show as £, $ if adding it into `<td>`. These characters are fine if put it into h1 tag for example as long as outside of table.

```js
<tr>
   <th scope=""row"">1</th>
   <td>USD</td>
   <td>&#36;</td>
   <td>United States Dollar</td>
   <td>9,120.6025</td>
   <td>9120.6025</td>
</tr>
```"
,,,https://github.com/facebook/react/issues/12640,12640,How to traverse the React tree?,[],closed,False,,13,2018-04-18T12:44:04Z,2019-11-07T08:16:42Z,2018-04-18T15:59:44Z,NONE,completed,,"I would like to propose to add a `walkTree` method in React. Today a lot of libraries relies on walking the React tree for SSR. It is used to preload data, styles or whatever.

I am asking because I found a [bug in Loadable Components](https://github.com/smooth-code/loadable-components/pull/65) and I fixed it, but [the bug is also in React Apollo](https://github.com/apollographql/react-apollo/issues/1937) and probably in other libraries that use this strategy.

I have several questions:

- Is `walkTree` the good strategy? If not can you tell me how to do it?
- If `walkTree` is the good strategy, could you maintain it and expose it in React or another package?"
,,,https://github.com/facebook/react/issues/12709,12709,The `ref.current` point to the wrong dom node,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,1,2018-04-28T10:00:43Z,2018-05-01T17:42:09Z,2018-05-01T17:42:09Z,NONE,completed,,"eg:
`
{this.state.a ? <div ref={this.myRef} className=""a""/> : <div className=""b""/>}
`
after state.a was set to false,when access this.myRef.current,it's point to the div with the className b."
,,,https://github.com/facebook/react/issues/12761,12761,How to add twitter card meta tag using react-helmet to render data dynamically in react app,[],closed,False,,1,2018-05-07T19:43:29Z,2018-05-07T22:42:02Z,2018-05-07T22:42:02Z,NONE,completed,,
,,,https://github.com/facebook/react/issues/12938,12938,Client and server rendering desynchronized in documentation,[],closed,False,,1,2018-05-30T15:58:03Z,2018-05-30T16:01:48Z,2018-05-30T16:01:48Z,NONE,completed,,"https://reactjs.org/docs/events

Server renders the page properly, and then the client overwrites it with 404 message."
,,,https://github.com/facebook/react/issues/12775,12775,Getting error while using component into another component in separate files,[],closed,False,,5,2018-05-10T08:29:34Z,2018-05-10T10:02:32Z,2018-05-10T08:50:13Z,NONE,completed,,"
![screenshot from 2018-05-10 13-17-12](https://user-images.githubusercontent.com/29413411/39859788-7f80d52e-5454-11e8-8b58-a7de26c674bb.png)


**Uncaught TypeError: Cannot read property 'schema' of undefined**

**What is the current behavior?**

** JSFiddle  https://jsfiddle.net/Luktwrdm/439/

"
,,,https://github.com/facebook/react/issues/12952,12952,.flowconfig for editing in vscode,[],closed,False,,1,2018-05-31T16:00:18Z,2018-05-31T16:07:28Z,2018-05-31T16:07:28Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**

Neither I think...? Just ask a question relating to the codebase and flow/editor config.

**What is the current behavior?**

1) git pull react
2) yarn install
3) navigate to project root directory
4) `code .`

Upon doing this, flow type checking does not work at all in vscode, even though
1) 'flow-for-vscode' extension is installed and enabled
2) Typescript has been *disabled* per docs
3) ""flow.useNPMPackagedFlow"" setting is set to *true*

The reason seems to be the lack of a `.flowconfig` file in the project root. Adding an empty `.flowconfig` and reloading vscode makes it work, albeit with loads of linting errors (mainly `__DEV__ not found` errors).

I saw that in `scripts/flow` there are several different `.flowconfig`s along with scripts that appear to get run when you do `yarn flow`. I understand that this is all as it should be and that `yarn flow` functions fine. I just want flow to work in-editor when I open up the project from the root directory.

What is the correct way for generating the necessary `.flowconfig` file? I tried just copy-pasting the one from `scripts/flow/dom/` but that still resulted in a bunch of `__DEV__ not found` errors.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

In-editor Flow type checking, code referencing, etc., should all work on opening a fresh pull of the code, and there should be zero linting errors.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

N/A
"
,,,https://github.com/facebook/react/issues/12915,12915,Suspense: timeout expiration and siblings rendering issues,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,7,2018-05-26T23:38:59Z,2018-08-02T20:09:46Z,2018-08-02T19:12:09Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**

Bug

**What is the current behavior?**

Code for reproducing is [here](https://github.com/alexeyraspopov/react-suspense-sandbox/tree/cb3b60be69523de8f720a474c965face2b521b9b). I've also deployed an example to Zeit Now: https://suspense-fpwoufdzfv.now.sh/.

This is a basic example of using React Suspense and Simple Cache Provider. Postponing text rendering and showing loading spinners when it's necessary.

I can see my use of `<Timeout />` doesn't really care about `ms` I'm passing — it always become expired right after the render. You can open a page and the loading bar appears immediately despite `1000ms` delay that it has.

There is content that is placed next to an async component (the one that's going to be suspended).

https://github.com/alexeyraspopov/react-suspense-sandbox/blob/cb3b60be69523de8f720a474c965face2b521b9b/src/index.js#L51-L56

Looking at React Suspense tests, it is assumed that sibling elements can be rendered in any way.

**What is the expected behavior?**

`<Timeout />` component only shows placehold when expired, sibling content is shown even if an async component was suspended.

I built sources for `react`, `react-dom`, and `simple-cache-provider` from the current master, updating `enableSuspense` flag. I also used `<unstable_AsyncMode />` but it didn't seem to make any difference.

I overall was really satisfied with this feature. I hope I did the code correctly so it shows the real bug. "
,,,https://github.com/facebook/react/issues/12736,12736,forwardRef causes componentWillReceiveProps after setState,[],closed,False,,2,2018-05-03T04:49:32Z,2018-05-24T01:23:13Z,2018-05-03T11:40:35Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

bug

**What is the current behavior?**

When inside of a `forwardRef`, calling `setState` causes `componentWillReceiveProps` to be called after the `setState` has completed.

See https://codesandbox.io/s/n59k2v25r0 for demo

**What is the expected behavior?**

The docs don't seem to forbid this behavior (""Calling this.setState() *generally* doesn’t trigger UNSAFE_componentWillReceiveProps().""), so I'm not sure this is technically a bug.

However, it does cause older code that doesn't yet use the reducer syntax for `setState` to stop working when wrapped in `forwardRef`. It caused a few headscratchers for me while refactoring old code, so I'm reporting it just in case.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

This appears in 16.3.2. Given that it is specific to forwardRef, it shouldn't apply to older versions."
,,,https://github.com/facebook/react/issues/12723,12723,The findByType method from react-test-renderer doesn't find ref-forwarding components,[],closed,False,,2,2018-05-01T03:41:45Z,2018-05-01T11:49:19Z,2018-05-01T11:49:18Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
In tests, if the component passed to `root.findByType` was created using `forwardRef` it can't be found.

If I use `root.find` to loop over all the nodes and log `.type` I see that the ref-forwarding-component is skipped entirely.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://codesandbox.io/s/k0o70vjv07?module=%2Fsrc%2Findex.test.js

I expect the second test to work like the first, however the second test is failing.

**What is the expected behavior?**
This may just be the way that `forwardRef` works, but the reason I expected it to work is I'm using it to make wrapped controls, like the `<FancyButton>` example from the documentation. When writing tests I want to be able to find a `FancyButton` and test it's besing passed the correct props, and not have to check that the DOM rendered by `FancyButton` is correct; that's already being tested in `fancy-button.test.js`

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Using React 16.3.2, failing in Chrome and Node 8.11.0

I've tried all the `16.3.x` versions in codesandbox and they all failed."
,,,https://github.com/facebook/react/issues/12945,12945,react class strict mode reserved word,[],closed,False,,2,2018-05-31T03:32:30Z,2018-06-07T18:02:36Z,2018-06-07T18:02:36Z,NONE,completed,,"webpack uglify 
![image](https://user-images.githubusercontent.com/16848523/40759741-f6430c78-64c5-11e8-996b-d77557aa49f3.png)

```javascript
				charset: ""charSet"",
				checked: ""checked"",
				children: ""children"",
				cite: ""cite"",
				class: ""className"",
				classid: ""classID"",
				classname: ""className"",
				cols: ""cols"",
				colspan: ""colSpan"",
```

With tools after compression, appeared class reserved word ? 

code in android 4.0 “strict mode reserved word”
"
,,,https://github.com/facebook/react/issues/12927,12927,Preserve property getters in state updates,[],closed,False,,1,2018-05-29T18:01:32Z,2018-05-29T20:33:36Z,2018-05-29T20:33:35Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
On state updates, property getters on `this.state` are transformed into literals.
E.g. `this.state = { en: 'hello', get english() { return this.en; } }` will be `{ en: 'bye', english: 'hello' }` after `this.setState({ en: 'bye' })`.

[Code example here](https://codepen.io/spbks/pen/OEJzzV?editors=0010)

**What is the expected behavior?**
Getters should still be available after state updates.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.3"
,,,https://github.com/facebook/react/issues/12758,12758,Open the react application with your phone browser， show error,[],closed,False,,5,2018-05-07T11:35:20Z,2018-05-08T00:43:47Z,2018-05-07T12:55:23Z,NONE,completed,,"**Current Behavior：
Open the react application with your phone browser， show error：**

Warning: Failed prop type: Invalid prop `children` supplied to `Switch`, expected a ReactNode.
    in Switch
Warning: Failed prop type: Invalid prop `children` supplied to `HashRouter`, expected a ReactNode.
    in HashRouter
Warning: Failed prop type: Invalid prop `children` of type `object` supplied to `Provider`, expected a single ReactElement.
    in Provider

my Environment：
    ""react"": ""^16.3.2"",
    ""react-dom"": ""^16.2.0"",
    ""react-redux"": ""^5.0.7"",
    ""react-router-dom"": ""^4.2.2"",
    ""redux"": ""^4.0.0"",
"
,,,https://github.com/facebook/react/issues/13073,13073,error: possiblePlugin.extractEvents is not a function,[],closed,False,,10,2018-06-19T11:38:02Z,2018-06-19T16:49:26Z,2018-06-19T12:15:12Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

i want to report a bug.

**What is the current behavior?**

Array.prototype.push([]);

I get an error when i trigger element event :

``` javascript
Uncaught TypeError: possiblePlugin.extractEvents is not a function
    at extractEvents (react-dom.development.js:704)
    at runExtractedEventsInBatch (react-dom.development.js:738)
    at handleTopLevel (react-dom.development.js:4203)
    at batchedUpdates (react-dom.development.js:12539)
    at batchedUpdates (react-dom.development.js:1941)
    at dispatchEvent (react-dom.development.js:4284)
    at interactiveUpdates (react-dom.development.js:12594)
    at interactiveUpdates (react-dom.development.js:1960)
    at dispatchInteractiveEvent (react-dom.development.js:4261)
```


**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

Element Event trigger normally.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
i don't known.

** reason**

in this file : https://github.com/facebook/react/blob/master/packages/events/EventPluginRegistry.js

``` javascript?linenums
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;
    if (plugins[pluginIndex]) { // pluginIndex = 0  plugins[pluginIndex] = [] so containue
      continue;
    }
    !pluginModule.extractEvents ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
    plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
    }
  }
}
```
when use in : https://github.com/facebook/react/blob/master/packages/events/EventPluginHub.js

``` javascript
    var possiblePlugin = plugins[i]; // when i =0 , possiblePlugin =[]
    if (possiblePlugin) {
      debugger
       //  possiblePlugin.extractEvents is undefined
      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
      if (extractedEvents) {
        events = accumulateInto(events, extractedEvents);
      }
    }
```

![image](https://user-images.githubusercontent.com/19383755/41594879-81d83f34-73f7-11e8-8852-6ef3cc0a0457.png)

**suggest**
add Parameter check 

``` javascript
    if (plugins[pluginIndex] && typeof plugins[pluginIndex].extractEvents === 'function') { // pluginIndex = 0  plugins[pluginIndex] = [] so containue
      continue;
    }
```
"
,,,https://github.com/facebook/react/issues/12977,12977,why modify state directly works?,[],closed,False,,3,2018-06-04T14:03:31Z,2018-06-05T19:43:29Z,2018-06-05T19:43:29Z,NONE,completed,,"I want report a bug, maybe.

#### Current behavior:

```javascript
componentDidMount() {
    this.state.star = 1000;
    this.setState({ star: this.state.star + 1 }); // 1001
}
```

```javascript
componentDidMount() {
    this.state.star = 1000;
    // this is especially strange
    this.setState(prevState => ({ star: prevState.star + 1 })); // 1001
}
```

```javascript
componentDidMount() {
    const { star } = this.state;
    this.state.star = 1000;
    this.setState({ star: star + 1 }); // 1
}
```

#### Expected behavior:

> Do Not Modify State Directly

But why modify state directly works?

setState is strange."
,,,https://github.com/facebook/react/issues/13122,13122,static variable declaration  in node module.,[],closed,False,,1,2018-06-28T08:13:11Z,2018-06-28T22:03:44Z,2018-06-28T22:03:44Z,NONE,completed,,"
###  I just made custom component and here a declare static variable. its working fine before publish but after publish my package its given me below error.
**ERROR in ./node_modules/react-js-validator/src/inputs/LetterInput.js 19:18
Module parse failed: Unexpected token (19:18)
You may need an appropriate loader to handle this file type.
```
|         }
|     }
>     static return = false
|    
|     Valid(data) {**
 
```

```
import {
    Valid,
    Letter,
    AlphaNumeric,
    Email,
    CustomRx, Numeric,
    Required, Dummy
} from '../Function'

import React, { Component } from 'react';
export class NumberInput extends Component {
    constructor(props) {
        super(props)
        this.state = {
            input: '',
            errorStatus: '',
            errorMsg: false
        }
    }
    static return = false
    numeric(e) {
        if (isNaN(e.target.value)) {
            NumberInput.return = false
            this.setState({ errorStatus: true, errorMsg: 'Please Enter number only ' })

        }
        else {
            NumberInput.return = true

        }

        if (this.props.onChange) {
            this.props.onChange()
        }
    }

    Valid(data) {
        let result = Numeric(data, 4, 8);
        console.warn(""result"", result)
        if (result.status) {
            this.setState({ errorStatus: false, errorMsg: '' })
        }
        else {
            this.setState({ errorStatus: true, errorMsg: result.msg })

        }
        if (this.props.onChange) {
            this.props.onChange()
        }
        NumberInput.return = result
    }
    render() {
        return (
            <div >
                <span className=""error-span"" style={this.props.styleError} >
                    {this.state.errorStatus ? this.state.errorMsg : null}
                </span>
                <input  {...this.props} onChange={(e) => this.Valid(e.target.value)} type=""text"" />
            </div>
        );
    }
}
```



** React version is here :""react"": ""^16.4.1"",
**

"
,,,https://github.com/facebook/react/issues/13032,13032,What is Fabric?,[],closed,False,,2,2018-06-13T00:12:16Z,2018-06-13T11:44:01Z,2018-06-13T11:44:01Z,NONE,completed,,"I found same issue mentioned `Fabric`.

So:
What is Fabric?
What is The difference between Fabric and Fiber?"
,,,https://github.com/facebook/react/issues/12992,12992,Access SSR rendered markup for component,[],closed,False,,1,2018-06-07T11:01:01Z,2018-08-02T18:52:53Z,2018-08-02T18:52:53Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
I'd like to request a feature: Access SSR rendered markup for component.

I'm working on a custom pagination `HOC`. 
This `HOC` can be rendered on the server side, and should then be dynamically connected on the client.

For example, the SSR sends me this markup:
```html
<div data-pagination-hash=""provider:categories:${hash}"" data-provider-name=""CategoryProvider"">
```

And I want to grab those `data-attributes` in order to hydrate my pagination component with websocket.
Once I've got the hash I can perform a quick query to the server to connect my component to websocket pushes.

However when calling `ReactDOM.findDOMNode(this)` in `componentDidMount` I see this:

```html
<div data-provider-name=""CategoryProvider"">
```

This is because the component renders first without pagination information and lazy loads it in.

I solved this issue by creating a list of hashes on the server, and sending them to the client in a `<script/>` blob, but this seems a little unwieldy and could be far simplified if one was able to access the `data-attributes` from the SSR rendered markup.

I'd like to propose that calling `ReactDOM.findDOMNode(this)` in `componentWillMount` should return the SSR rendered markup (if any)."
,,,https://github.com/facebook/react/issues/12964,12964,Returning an empty fragment throws a confusing error,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,5,2018-06-01T21:11:00Z,2018-08-03T23:34:56Z,2018-06-11T13:43:31Z,CONTRIBUTOR,completed,,"https://codesandbox.io/s/40j50607y0

Rendering a component like:

```js
const Foo = () => <React.Fragment />
```

Throws the error:

> Foo(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.

The error is confusing because clearly `Foo` _is_ returning a value. I don't know if we want to support rendering empty fragments, but in any case this error is confusing.

If this isn't allowed it should explicitly call out that a component cannot return a fragment with no children.

cc @gaearon "
,,,https://github.com/facebook/react/issues/13095,13095,cannot uninstall lodash from project,[],closed,False,,3,2018-06-22T08:44:46Z,2018-06-22T09:56:47Z,2018-06-22T09:32:57Z,NONE,completed,,"Hi Guys,

I use create-react-app to create a project and run eject after. I noticed that if I install lodash, and I uninstall it then, npm start will failed with following message (note that I don`t use any lodash or import lodash in my codes):

Error: Cannot find module 'lodash'
         at Function.Module._resolveFilename (module.js:476:15)
         at Function.Module._load (module.js:424:25)
         at Module.require (module.js:504:17)
         at require (internal/module.js:20:19)
         at Object.<anonymous> (C:/ (my home path)/testweb/node_modules/http-proxy-middleware/lib/index.js:1:84)
         at Module._compile (module.js:577:32)
         at Object.Module._extensions..js (module.js:586:10)
         at Module.load (module.js:494:32)
         at tryModuleLoad (module.js:454:12)
         at Function.Module._load (module.js:445:3)


React version: 15.6.2
lodash: 4.17.10

"
,,,https://github.com/facebook/react/issues/12995,12995,can't yield children from a generator in render(),"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,12,2018-06-07T21:44:55Z,2018-08-02T18:49:44Z,2018-08-02T18:49:44Z,CONTRIBUTOR,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

bug.

**What is the current behavior?**

via this thread https://twitter.com/aweary/status/1004837394439290880
passing the result of a generator as a child doesn't 'work'. it renders no children, without an error or warning. 

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

repro - https://codesandbox.io/s/5zp0j8389x


**What is the expected behavior?**

for the above example, a hundred `<span>`s, numbered 100 -> 1

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.x, all browsers 


(It appears the validation logic drains the iterator, so when we finally try to 'get' the children again, it returns nothing.) "
,,,https://github.com/facebook/react/issues/13034,13034,Some means of determining component order in hierarchy,[],closed,False,,5,2018-06-13T06:27:27Z,2018-06-19T07:16:36Z,2018-06-18T16:57:45Z,NONE,completed,,"I'm trying to build a container component and child component, whereby the children can sit anywhere in the hierarchy beneath the container, but know their relative order/index within that hierarchy.

My use-case is to build a helper wrapper for CSS grids, allowing subcomponents to themselves render a ""row"" component which knows it must be the next index, and may or may not progress the row counter for the next ""row"" component found in order.

I've looked into two possible avenues - recursing using `React.Children` on the component, which stops when it hits a component without `props.children` (e.g. a redux-`connect()`-ed one), and passing some means of counting via context, which fails because it seems the `render()` methods of the child components isn't always called in ""DOM order"".

More background here - https://stackoverflow.com/questions/50776933/react-get-component-order-within-hierarchy

It would be great to have some feature in React which might allow for this."
,,,https://github.com/facebook/react/issues/13251,13251,Getting SSR to work with the React Context API,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,15,2018-07-23T18:56:35Z,2018-08-16T21:36:06Z,2018-08-16T21:36:06Z,NONE,completed,,"Basically we have a module that reads the client data on server side render and is supposed to provide the data to the renderToString with the data it found (and the client renders with a `window.__SOME_DATA__`, but I would not want to use a global on a express route)

Here is where we are:


    const contentService = new ServerService();
    const app = (
      <StaticRouter context={context} location={req.url}>
        <App/>
      </StaticRouter>
    );

    try {
      await contentService.getSomeData(app);
    } catch (error) {
      console.log('THERE WAS A MARKUP ERROR', error);
    }

    const markup = renderToString(
      contentService.withProvider(
        app
      )
    );

The server service looks like so:

    export class ServerService {
      items = {};
    
      getSomeData = async (app) => {
        // gets some server side data and saves it to the `items` object
      };
    
      withProvider = (app) => {
        const providedApp = (
          <ServerProvider data={this.items}>
            { app }
          </ServerProvider>
        );
    
        console.log('ITEMS provided', { data: this.items });
    
        return providedApp;
      };
    
      getScriptData() {
        return `
          <script>
              window. __SOME_DATA__ = ${JSON.stringify(this.items)};
          </script>
        `;
      }
    }

And then last but not least my provider:

    import * as React from 'react';
    
    const ServerContext = React.createContext(null);
    
    export class ServerProvider extends React.Component {
      render () {
        console.log('Providing data', { props: this.props });
    
        return (
          <ServerContext.Provider value={{ ...this.props.data }}>
            {this.props.children}
          </ServerContext.Provider>
        );
      }
    }
    export const ServerConsumer = ServerContext.Consumer;

The problem is that it seems to set the data in the `withProvider` function fine, but when I use the `ServerConsumer` component, it seems to contain **nothing** -- but it _should_ contain the data that was passed to the provider!

The context api has worked beautifully for when I need it on the client side, but it seems to be failing for me on the server side.

This is with react/react-dom `16.4.1`

(originally posted here: https://stackoverflow.com/q/51485320/561731)"
,,,https://github.com/facebook/react/issues/13246,13246,build for production without using service-worker,[],closed,False,,3,2018-07-20T21:31:57Z,2018-07-22T12:28:47Z,2018-07-22T12:28:47Z,NONE,completed,,"Due to on-going problems with React applications built using create-react-app not working in packaged versions of electron (see electron/electron#9705), I'm trying to find how to build production versions of the React application without using the service worker, is this possible?"
,,,https://github.com/facebook/react/issues/13188,13188,"If console.error throws while reporting an error, React can enter an invalid internal state","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,8,2018-07-10T21:08:48Z,2018-08-02T17:16:56Z,2018-08-02T17:16:56Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Bug

**What is the current behavior?**

When `ReactFiberScheduler` exceeds the update count and throws the `Maximum update depth exceeded.` invariant, it did not update `nestedUpdateCount` (leaving it in a ""dirty"" state). This has been fixed in this PR yet to be released: https://github.com/facebook/react/pull/13160/files#diff-24152ba0b2ac251decb6a12f41bdf116R1478

But out of interest + further concern, I [began to explore](https://github.com/facebook/react/pull/13160#issuecomment-403919095) some concerns around whether ReactDOM (Fiber really) maintaining some ""state"" and in fact, being left dirty in at least some error cases was indeed a concern or had been considered in the community. While `nestedUpdateCount` might be fixed here, I can't imagine it was the only state value which could have issues.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

I created a repo with `create-react-app` which demonstrates my concern: https://github.com/brokentone/react-dom-enzyme

Observe that you will have 2 test failures. ComponentOne is indeed poorly written, but ComponentTwo is quite simple and should be ""ok."" Skipping ComponentOne should should ComponentTwo passing.

**What is the expected behavior?**

Only `ComponentOne` should fail in my example.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Unclear"
,,,https://github.com/facebook/react/issues/13257,13257,Render single react component instead of complete application from server,[],closed,False,,2,2018-07-24T05:13:20Z,2018-07-24T05:24:07Z,2018-07-24T05:19:02Z,NONE,completed,,"I went through many articles on server side rendering of react and the all of them has the following in common :-

- The server route renders a complete html page with a div which wraps the root react component, just like traditional react code
- it also includes reference to a bundle.js which is called by browser once the skeleton is loaded and the view re-renders with all javascript functionality.
This approach always leads me to download my whole frontend app in one go. Is there any way where I can selectively render react components in divs? . What I mean to say is, for example ""/graph"" only gives me graph component, ""/table"" only gives me table component etc so that :-

-I can embed react components into a pre-existing webapp.

The response from the routes are just smaller components instead of the whole outer root component. I know react can be embedded in other web apps in case of client side rendering, but I am wondering if same thing can be achieved in server side rendering. Thanks."
,,,https://github.com/facebook/react/issues/13239,13239,"React : why state change when try to change it in immuable way , before calling the setState",[],closed,False,,1,2018-07-19T10:09:59Z,2018-07-19T11:05:10Z,2018-07-19T11:05:10Z,NONE,completed,,"hi ,
i got some issu in my code , the state mutate when changing the copy (immuable way) of the object state , how could this happen when we are changing state immuable way , and the setState do not take effect either . thak's for helping

`share = (indexFolder) => { `
        `console.log(this.state.folderInfo);`
       `const updateFolderInfo = [...this.state.folderInfo];`
        `updateFolderInfo[indexFolder].isProcessing = false;`
        `console.log(this.state.folderInfo); // the state is already changed at this line `
        `this.setState({`
               ` folderInfo : updateFolderInfo, // this do not even take effect`
       `})`
    `}`"
,,,https://github.com/facebook/react/issues/13183,13183,Hydrate injects content into wrong node,[],closed,False,,1,2018-07-09T20:31:01Z,2018-07-10T16:32:42Z,2018-07-10T16:32:42Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
calling hydrate on a component injects content into wrong dom node

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
https://codepen.io/shmargum/pen/ZjzVaN

**What is the expected behavior?**
I expect hydrate to correctly hydrate the component and not inject incorrect html.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
react: 16.4.0
react-dom: 16.4.0
chrome browser
"
,,,https://github.com/facebook/react/issues/13286,13286,Discussion: Synchronous State Management and Async React,[],closed,False,,3,2018-07-29T17:30:12Z,2018-08-03T01:13:26Z,2018-08-02T13:32:41Z,NONE,completed,,"The React team has put out a fair amount of info on the upcoming async React concepts, including time sliced rendering and Suspense.  They've also been in contact with the various state management library teams (Redux, MobX, and Apollo) to give us an early heads-up on how these libraries might need to change to work correctly with async React.

At this point I personally feel like I still have only a partial understanding of what types of changes are needed.  Quoting a discussion between Dan and myself in https://github.com/reduxjs/react-redux/pull/898#issuecomment-375790227 :

> To the best of my understanding, these are the problems that React-Redux faces when trying to work with async React:

> 1. React's time-slicing means that it's possible for other browser events to occur in between slices of update work. React might have half of a component tree diff calculation done, pause to let the browser handle some events, and something else might happen during that time (like a Redux action being dispatched). That could cause different parts of the component tree to read different values from the store, which is known as ""tearing"", rather than all components rendering based on the same store contents in the same diff calculation.

> 2. Because of time-slicing, React also has the ability to set aside partially-completed tree diffs if a higher priority update occurs in the middle. It would fully calculate and apply the changes from the higher-priority change (like a textbox keystroke), then go back to the partially-calculated low-pri diff, modify it based on the completed high-pri update, and finish calculating and applying the low-pri diff.
> In other words, React has the ability to re-order queued updates based on priority, but also will start calculating low-pri updates as soon as they're queued. That is not how Redux works out of the box. If I dispatch a ""DATA_LOADED"" action and then a ""TEXT_UPDATED"" action, the data load causes a new store state right away. The UI will eventually look ""right"", but the sequence of calculating and applying the updates was not optimal, because Redux pushed state updates into React in the order they came in.


There was also some relevant discussion on Twitter at https://twitter.com/dan_abramov/status/1010978574105567234 : 

> **swyx**: so if anything async react “absorbs into the platform” some tricky parts of state mgmt (more accurately, creates a priority queue for UI interactions, and pushes async deps to whatever cache lib people end up using). haha, i guess im too eagerly taking those for granted.

> **dan_abramov**: yeah. For the best desired experience, it needs control over when to apply updates, and what version of state to render with. So if a lib wants to own that, it’s missing out (although could work by getting “deoptimized” to sync mode).  

> **mweststrate**: For inspiration: Is there an abstract write down / complete overview of which conceptual operations need to be supported to fully support async? Fork + replay changes made in forks suffices? (hints about conflicts resolution?)  

> **dan_abramov**: Paging acdlite who’s currently working out how to make Relay work with it
> **dan_abramov**: I think the main idea is that either your thing is meant for UI state that changes with interactions (and then we need a way to “route” it through setState—so it needs to provide a reducer), or it's more like a data cache (in which case your own storage is fine if it’s immutable)
> **dan_abramov**: There is a third option too (a mutable data cache) which is what Relay will end up being for now. But this means it “deopts” to sync mode in some cases.

> **sebmarkbage**: Those are more downstream recommendations, not first principles. A first principles is that you need to be able to read consistent old versions so if a parent passes data, the child needs to be able to read the version that the parent passed even after it has changed later.
> **sebmarkbage**: Another first principle is that you need to be able to make edits to old versions and also make the same edit on the latest version (rebase).

> **dan_abramov**: How would you do it without letting React manage state for you? We don't explicitly tell libs “now is time to rebase”.

> **mweststrate**: Would need some kind of hooks were React tells: I want to fork / rebase this prop?

The phrase ""deopts to sync mode"" was explained by Brian in https://github.com/facebook/react/issues/13186#issuecomment-403959161 : 

> State updates scheduled from componentDidMount or componentDidUpdate are processed synchronously and flushed before the user sees the UI update. This is important for certain use cases (e.g. positioning a tooltip after measuring a rendered DOM element). In the case we're describing, this means that users of your application will never even see the temporary stale value because React will process the new value (synchronously) before yielding.

> That might sound like a good thing, but what if the re-render includes a lot of components or is slow for some other reason? Then it might impact the frame rate and cause your application to feel unresponsive. This is what we are referring to when we say that create-subscription de-opts to synchronous rendering mode in some cases.

Also, Andrew commented in https://twitter.com/acdlite/status/1015286450537951233 : 

> We've learned from our work making Relay interop with async React, will share more soon.

Finally, there's some related discussion in https://github.com/reduxjs/react-redux/issues/890 .

So, at this point what I would particularly appreciate is further info on exactly what constraints a normally-synchronous state management lib like Redux or MobX needs to comply with in order to work correctly with async React behavior, and any suggestions on possible implementations.  It would also be extremely beneficial if we could come up with some demo apps that specifically demonstrate problematic interactions between async React and synchronous state management logic, so that we can use those as points of reference for ensuring that new versions of our libraries work correctly going forward.

Paging @gaearon , @acdlite , @bvaughn , @timdorr , @jimbolla , @cellog , @mweststrate, @peggyrayzis , and @jbaxleyiii for their thoughts and participation.

"
,,,https://github.com/facebook/react/issues/13471,13471,no us,[],closed,False,,0,2018-08-23T10:11:36Z,2018-08-23T11:22:20Z,2018-08-23T11:22:20Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
"
,,,https://github.com/facebook/react/issues/13328,13328,props.children slot feature,[],closed,False,,3,2018-08-06T12:21:37Z,2019-08-30T10:05:44Z,2018-08-06T12:55:47Z,NONE,completed,,"_Feature request_

I'm thinking about the need of a sort of [slot](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_templates_and_slots) feature introduced inside the props.children existing feature.

My proposal would be to allow the use of a specific directive inside children markup, let's say `children-slot-slotname` then on JSX side we would be able to write `{this.props.children.slots[slotname]}` instead of the uniq `{this.props.children}` 

More than the syntaxe, my intent here is to open the discussion and have a feedback about this eventual feature.

Thx
"
,,,https://github.com/facebook/react/issues/13523,13523,Provide a way to throw error (maybe asynchronous) that can be handled by componentDidCatch,[],closed,False,,5,2018-08-31T07:21:41Z,2021-08-06T05:45:04Z,2018-09-11T17:20:06Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Feature request.

**What is the current behavior?**
`componentDidCatch` can only handle synchronous error.

**What is the expected behavior?**
The capability of error boundaries to handle asynchronous error.

The error boundaries example in the docs is very similar with how an asynchronous error is handled in React.

```javascript
class WithAsyncData extends React.Component {
  constructor(props) {
    super(props);
    this.state = { error: null, value: null };
  }

  // using componentDidMount instead of componentDidCatch
  componentDidMount() {
    doAsynchronousThing()
      .then(value => this.setState({ value }))
      .catch(error => this.setState({ error }))
  }

  render() {
    if (this.state.error) {
      return <h1>An error occured.</h1>;
    }
    return this.props.children;
  }
}
```

Unfortunately, the new `componentDidCatch` lifecycle only aware of synchronous error. I think, it will be
good to provide a way to throw an error asynchronously, like:

```javascript
class WithAsyncData extends React.Component {
  constructor(props) {
    super(props);
    this.state = { error: null, value: null };
  }

  componentDidMount() {
    doAsynchronousThing()
      .then(value => this.setState({ value }))
      .catch(error => this.throwError(error)) // throwing error asynchronously
  }

  render() {
    if (this.state.error) {
      return <h1>An error occured.</h1>;
    }
    return this.props.children;
  }
}
```

With that, a network error can be handled in single place with a NetworkErrorBoundary component for example."
,,,https://github.com/facebook/react/issues/13405,13405,create-subscription: call getValue in the constructor is too early,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,16,2018-08-15T10:54:06Z,2018-08-21T15:36:41Z,2018-08-16T14:42:11Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

BUG

**What is the current behavior?**

https://codepen.io/intptr/pen/djEzbr?editors=1010

I made an example to show the execution order of some lifecycle functions while remounting a component:

```
newComponent.constructor() -> oldComponent.componentWillUnmount() -> newComponent.componentDidMount()
```

`create-subscription` calls `getValue` in `constructor` and save the result to its state. Before `componentDidMount` called, any changes will be ignored.

If I remount a component wrapped by `create-subscription` component, and do something in its `componentWillMount` which will modify the source value, I will get the wrong value in `componentDidMount` in the new component.

```
newComp.constructor -> oldComp.cWU -> newComp.cDM
state = A              A -> B         A !! (correct: B)
```

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.4.2 (latest)
"
,,,https://github.com/facebook/react/issues/13365,13365,"I want to use crypto module of node.js, but it does not work",[],closed,False,,1,2018-08-10T14:58:13Z,2018-08-10T15:48:03Z,2018-08-10T15:47:42Z,NONE,completed,,"I want to use crypto.createDiffieHellman do some DH encryption in react code.

**I only the followed error in React.js, It can work fine in nodejs.**

the followed is my code in React.js : 
```
import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';
import crypto from 'crypto';

class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      text : 112
    }
  }
  componentDidMount() {

    let start_time = new Date().getTime();
    let client = crypto.createDiffieHellman(128, 2);
    
  }
  render() {
    return (
      <div className=""App"">
        <header className=""App-header"">
          <img src={logo} className=""App-logo"" alt=""logo"" />
          <h1 className=""App-title"">Welcome to React</h1>
        </header>
        <p className=""App-intro"">
          To get started, edit <code>src/App.js</code> and save to reload.
        </p>
      </div>
    );
  }
}

export default App;
```

**but I have a exception like :**

```
index.js:107 Uncaught Error: If encoding is specified then the first argument must be a string
    at new Buffer (index.js:107)
    at createDiffieHellman (browser.js:27)
    at Object.createDiffieHellman (browser.js:19)
    at App.componentDidMount (App.js:38)
    at commitLifeCycles (react-dom.development.js:14362)
    at commitAllLifeCycles (react-dom.development.js:15463)
    at HTMLUnknownElement.callCallback (react-dom.development.js:100)
    at Object.invokeGuardedCallbackDev (react-dom.development.js:138)
    at invokeGuardedCallback (react-dom.development.js:187)
    at commitRoot (react-dom.development.js:15604)
    at completeRoot (react-dom.development.js:16619)
    at performWorkOnRoot (react-dom.development.js:16564)
    at performWork (react-dom.development.js:16483)
    at performSyncWork (react-dom.development.js:16455)
    at requestWork (react-dom.development.js:16355)
    at scheduleWork$1 (react-dom.development.js:16219)
    at scheduleRootUpdate (react-dom.development.js:16786)
    at updateContainerAtExpirationTime (react-dom.development.js:16813)
    at updateContainer (react-dom.development.js:16840)
    at ReactRoot../node_modules/react-dom/cjs/react-dom.development.js.ReactRoot.render (react-dom.development.js:17123)
    at react-dom.development.js:17263
    at unbatchedUpdates (react-dom.development.js:16680)
    at legacyRenderSubtreeIntoContainer (react-dom.development.js:17259)
    at Object.render (react-dom.development.js:17318)
    at Object../src/index.js (index.js:7)
    at __webpack_require__ (bootstrap e8414889095468667716:678)
    at fn (bootstrap e8414889095468667716:88)
    at Object.0 (registerServiceWorker.js:117)
    at __webpack_require__ (bootstrap e8414889095468667716:678)
    at ./node_modules/ansi-regex/index.js.module.exports (bootstrap e8414889095468667716:724)
    at bootstrap e8414889095468667716:724
```

"
,,,https://github.com/facebook/react/issues/13331,13331,"[Question] RE: Rendering arrays of components, should these implementations behave the same?",[],closed,False,,1,2018-08-06T18:18:43Z,2018-08-06T18:33:09Z,2018-08-06T18:33:09Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Possible bug, though it is likely this is an expected behavior that I'm misinterpreting.

**What is the current behavior?**
Say I have an array of components I'd like to render, but I also want to weave `<hr>` tags between each item. For example:

```jsx
const Delimited = props => (
  props.items.reduce((a, b) => (
    <React.Fragment>
      {a} <hr /> {b}
    </React.Fragment>
  ))
)

<Delimited items={[<One key=""one"" />, <Two key=""two"" />, <Three key=""three"" />]} />
/*
  <One />
  <hr />
  <Two />
  <hr />
  <Three />
*/
```

This works, however if the components in the array have state, **they forget their state when the parent refreshes**. Seems bad.

If I rewrite the **Delimited** component so that it produces the same result by inserting the `<hr>`'s into the array, the items keep their internal state.

```jsx
// Same render as above, and if the items have 
// state it is retained if the parent refreshes.
const Delimited = props => {
  const results = [...props.items]
  for (let i = results.length - 1; i > 0; i--) {
    results.splice(i, 0, <hr />)
  }

  return results
}
```

Adding a `key` prop to `<React.Fragment>` doesn't change the outcome.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem:**
https://codesandbox.io/s/n9158p8j9p

1. First, click on one or more of the Toggle buttons.
2. Click ""Add"", the toggled buttons should retain their state.
3. Click ""Use Reduce"", which renders the buttons using `.reduce()`
4. Repeat steps 1 and 2.
5. This time, all of the Toggle buttons forget their state.

<img width=""123"" alt=""screen shot 2018-08-06 at 12 25 45 pm"" src=""https://user-images.githubusercontent.com/2754163/43731387-f5afe014-9973-11e8-885f-8fc57f83a56b.png"">

**Click Add**

<img width=""140"" alt=""screen shot 2018-08-06 at 12 25 54 pm"" src=""https://user-images.githubusercontent.com/2754163/43731439-22d11a36-9974-11e8-9167-11e66420b30d.png"">

**What is the expected behavior?**
It seems like the component are getting re-mounted using `.reduce()`, but updates the existing component when you use the `for` loop. Shouldn't both implementations update the existing component?

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
- React 16.4.2
- Chrome 67
- OSX High Sierra"
,,,https://github.com/facebook/react/issues/13496,13496,React code base coverage results appear incorrect,"[{""id"":71502270,""node_id"":""MDU6TGFiZWw3MTUwMjI3MA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure"",""name"":""Component: Build Infrastructure"",""color"":""f9d0c4"",""default"":false,""description"":null}]",closed,False,,4,2018-08-28T05:33:06Z,2019-05-29T22:26:18Z,2019-05-29T22:26:18Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
In order to contribute to React, I was going through the coverage results to find code which needs additional testing. While doing that, I noticed that the coverage results appear incorrect

For example file `packages/create-subscription/src/createSubscription.js`, notice that coveralls says branches are not covered on [L16](https://coveralls.io/builds/18690124/source?filename=packages/create-subscription/src/createSubscription.js#L16) which is actually a function call.
![coveralls](https://user-images.githubusercontent.com/16024985/44702510-a1940600-aa48-11e8-89b7-3585693bb658.png)

When I ran jest in my workspace with `--coverage`, it gave if/else path are missing on the same line 16 as shown in the screenshot:
![coverage](https://user-images.githubusercontent.com/16024985/44702557-e3bd4780-aa48-11e8-8923-18b619b5dd93.png)

This appears to be a bug."
,,,https://github.com/facebook/react/issues/13338,13338,[Feature request] Unmount a component at will,[],closed,False,,1,2018-08-07T08:38:08Z,2018-08-07T09:11:58Z,2018-08-07T09:11:58Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?** - Request feature

I want to be able to unmount a component at will. I think a life cycle could be good:

```jsx
class MyComponent extends React.Component {
  // the rest
  componentShouldUnmount () {
     return this.state.shouldUnmount;
  }
}
```

or maybe returning a special value provided by React on render can also be good:

```jsx
class MyComponent extends React.Component {
  // the rest

  render () {
    if (this.state.shouldUnmount) return React.shouldUnmount;

    // the rest
  }
}
```"
,,,https://github.com/facebook/react/issues/13410,13410,Investigate why select._wrapperState.initialValue is necessary,"[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":725156255,""node_id"":""MDU6TGFiZWw3MjUxNTYyNTU="",""url"":""https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)"",""name"":""good first issue (taken)"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,7,2018-08-16T00:25:52Z,2018-08-16T14:56:24Z,2018-08-16T14:56:23Z,CONTRIBUTOR,completed,,"Uncovered during @raunofreiberg's select work (#13389).

`select._wrapperState.initialValue` is only ever assigned, never referenced. Can it be removed?

Example:
https://github.com/facebook/react/blob/master/packages/react-dom/src/client/ReactDOMFiberSelect.js#L191

It would be great if someone could investigate this, and figure out if it can be removed."
,,,https://github.com/facebook/react/issues/13752,13752,"input[type='number'] event.target.value changes to empty string when . or , pressed and onChange not emitted when . and , used",[],closed,False,,9,2018-09-29T18:55:53Z,2019-08-23T10:33:58Z,2018-10-09T20:32:23Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
onChange event changes value of an input to an empty string when . or , is pressed. Additionally it seems like it doesn't fire onChange after the dot and comma (example 1.234,000) at all 
**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
https://codesandbox.io/s/7ox8qx2mn1
**What is the expected behavior?**
value stays as an Integer or as seen by the user 1. should be 1. and not """". Should fire onChange.
**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 16 +, Chrome, No
"
,,,https://github.com/facebook/react/issues/13719,13719,Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined,[],closed,False,,7,2018-09-24T21:17:42Z,2018-09-26T12:54:57Z,2018-09-24T23:10:00Z,NONE,completed,,"I'm dealing with a JSON response in React Native that's coming from the WordPress REST API, containing pages with each an (profile page) ID, title and featured image.

Using a FlatList, I have created a screen with featured images and titles for each (Artist) page. I want to add the functionality to navigate to each individual page by clicking on an item in the FlatList, and passing the title, featured image and (later) the content of the regarding page to the next screen to display this information (probably based on the ID). 

LinksScreen.js

```
import React, {Component} from 'react';
import PropTypes from 'prop-types';
import Artist from './Artist';
import { createStackNavigator } from 'react-navigation';
import {
  ScrollView,
  StyleSheet,
  View,
  Text,
  Image,
  FlatList,
  ActivityIndicator,
  TouchableHighlight,
} from 'react-native';

export default class LinksScreen extends React.Component {

constructor(props) {
        super(props);
        this._onAlertTypePressed = this._onAlertTypePressed.bind(this);
        this.state = {
            data: [],
        }
    }

  _onAlertTypePressed(typeId: any, typeName: any, imageUrl: any){

        this.props.navigator.push({
            screen: 'Artist',
            title: 'Artist',
            passProps: {
                alertId: typeId,
                alertName: typeName,
                alertImage: imageUrl,
            }
        });
    }

    _renderListItem = ({ item }) => (
        <Artist
            itemName={ item.title.rendered }
            itemId={ item.id }
            itemImageUrl={ item.better_featured_image.source_url}
            onPressItem={ this._onAlertTypePressed }
        />
    );

  static navigationOptions = {
    title: 'Links',
  };

  state = {
    data: [],
    isLoading: true,
    isError: false,
  };

  static propTypes = {
    navigation: PropTypes.shape({
      navigate: PropTypes.func.isRequired,
    }).isRequired,
  }

  componentWillMount() {
    fetch('http://54.168.73.151/wp-json/wp/v2/pages?parent=38&per_page=100')
      .then(response => response.json())
      .then((responseJson) => {
        responseJson.sort((a, b) => a.title.rendered < b.title.rendered ? -1 : 1);
        this.setState({
          data: responseJson,
          isLoading: false,
          isError: false,
        });
      })
      .catch(error => {
        this.setState({
          isLoading: false,
          isError: true,
        });
        console.error(error);
      });
  }

  renderRow = item => (
    <View style={styles.grid}>
      <Image
        style={styles.thumb}
        source={{
          uri: item.better_featured_image
            ? item.better_featured_image.source_url
            : 'http://54.168.73.151/wp-content/uploads/2018/04/brand-logo.jpg',
        }}
      />
      <Text style={styles.title}>{item.title.rendered}</Text>
    </View>
  );

  getKey = item => String(item.id);

  renderComponent() {
    if (this.state.isLoading) {
      return <ActivityIndicator />;
    } else if (this.state.isError) {
      return <Text>Error loading data</Text>;
    } else {
      return (
        <FlatList
          numColumns={3}
          contentContainerStyle={styles.elementsContainer}
          data={this.state.data}
          renderItem={({ item }) => this._renderListItem}
          keyExtractor={this.getKey}
        />
      );
    }
  }

  render() {
    return (
      <View style={styles.container}>
        <Text
          style={{
            fontSize: 20,
            color: '#FFFFFF',
            marginLeft: 4,
            marginTop: 10,
          }}>
          RESIDENTS
        </Text>
        {this.renderComponent()}
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000000',
  },
  elementsContainer: {
    backgroundColor: '#000000',
  },
  grid: {
    marginTop: 15,
    marginBottom: 15,
    marginLeft: 5,
    height: 125,
    width: 115,
    borderBottomWidth: 1,
    borderBottomColor: '#191970',
  },
  title: {
    color: '#FFFFFF',
    textAlign: 'left',
    fontSize: 12,
  },
  thumb: {
    height: 110,
    width: 110,
    resizeMode: 'cover',
  },
});
```
Artist.js

```
import React, { Component } from 'react';
import { createStackNavigator } from 'react-navigation';
import {
  ScrollView,
  StyleSheet,
  View,
  Text,
  TouchableOpacity,
  Image,
} from 'react-native';

export class Artist extends React.PureComponent {
  constructor(props) {
    super(props);
  }

  _onPress = () => {
    this.props.onPressItem(
      String(this.props.itemId),
      String(this.props.itemName),
      String(this.props.itemImageUrl)
    );
  };

  static navigationOptions = {
    title: 'Artist',
  };

  render() {
    // const artist = this.props.navigation.state.params.artist;
    return (
      <TouchableOpacity
        {...this.props}
        style={styles.container}
        onPress={this._onPress}>
        <Image
          style={styles.image}
          source={{
            uri: this.props.itemImageUrl
              ? this.props.itemImageUrl
              : 'http://54.168.73.151/wp-content/uploads/2018/04/brand-logo.jpg',
          }}
        />
        <Text style={styles.title}>{this.props.itemName}</Text>
      </TouchableOpacity>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: '#000000',
  },
  title: {
    color: '#FFFFFF',
    textAlign: 'left',
    fontSize: 12,
  },
  image: {
    height: 350,
    width: 350,
    resizeMode: 'cover',
  },
});

```
I'm getting an error at the moment - saying that the a string is expected, but an undefined type was found. I used to do it in a different way, but I'm unable to pass the ID (which should be the identifier to pass the data to the next screen) to open a specific generated screen for each artist.

Error:

![image](https://user-images.githubusercontent.com/25793350/45979413-5244f380-c04f-11e8-9f9c-737e48e45d3e.png)

Here is the edible code:

[https://snack.expo.io/@jvdl2711/artist-navigation](url)

It used to be like this:

[https://snack.expo.io/@jvdl2711/artists](url) (working grid version, but no navigation functionality. I'm sure it gives a good indication of how it's supposed to work.)

Notes

Please, don't mind the titles at the moment. I still have a small unsolved issue regarding unicodes, but I think this won't matter when passing the titles to another screen."
,,,https://github.com/facebook/react/issues/13635,13635,Event delegation in React,[],closed,False,,2,2018-09-13T04:32:59Z,2021-05-04T20:37:20Z,2018-09-13T17:22:42Z,NONE,completed,,"Given that [React does attach event handlers to the nodes themselves](https://github.com/facebook/react/issues/13625), does the React team recommend app developers to do event delegation when working with large lists for saving memory? Something like:

```jsx
import React from 'react';
import ReactDOM from 'react-dom';

class App extends React.Component {
  render() {
    return (
      <ul onClick={(e) => console.log(`ID: ${e.target.dataset.id} was clicked`)}>
        <li data-id=""1"">Item 1</li>
        <li data-id=""2"">Item 2</li>
        <li data-id=""3"">Item 3</li>
        ...
      </ul>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('root'));
```"
,,,https://github.com/facebook/react/issues/13664,13664,Is it possible to react skip some dom nodes on hydrate which are different from server render.,[],closed,False,,3,2018-09-15T19:27:11Z,2022-04-02T13:23:17Z,2018-11-01T18:58:39Z,NONE,completed,,"if my server component is for example:

    class Test extends React.Component { 
    ...
    render() {
    return <React.Fragment>
            <div> {this.props.server_data} </div>
            <div onClick={make_this_div_update_on_client}> {this.state.client_staff} </div>
        </React.Fragment >
       }
    }

and on server i will render with props which are not available on client

    ReactDOMServer.renderToString(<Test server_data=""Hello from server!"" />)

but on frontend when i rehydrate app with:

    ReactDOM.hydrate(<Test />, document.querySelector("".app""));

It updates this DOM node because this.props.server_data is empty.

How can i make react to not touch some DOM nodes that are created on server and only hydrate other parts of the tree? Is this kind of behaviour possible?

For example something like this:
      
    class Test extends React.Component { 
     ...
    render() {
    return <React.Fragment>
            <div donTouchThisOnClient> {this.props.server_data} </div>
            <div onClick={make_this_div_update_on_client}> {this.state.client_staff} </div>
        </React.Fragment >
       }
    }
    "
,,,https://github.com/facebook/react/issues/13601,13601,react-dom/profiling TypeError: Cannot read property 'current' of null,"[{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,False,,2,2018-09-08T19:17:46Z,2018-09-10T15:32:56Z,2018-09-10T15:32:56Z,MEMBER,completed,bvaughn,"I can't quite figure out how to use the profiling build. I aliased `react-dom` to `react-dom/profiling` but I get this error:

<img width=""448"" alt=""screen shot 2018-09-08 at 20 17 02"" src=""https://user-images.githubusercontent.com/810438/45257816-2d405780-b3a4-11e8-9615-0b27abd0442b.png"">
<img width=""272"" alt=""screen shot 2018-09-08 at 20 17 06"" src=""https://user-images.githubusercontent.com/810438/45257817-2d405780-b3a4-11e8-8a08-f5a0650debfe.png"">

I didn't want interactions, I just want profiling. What am I doing wrong?

To repro, use CRA, then eject, then add `react-dom` -> `react-dom/profiling` to alias in webpack prod config and build."
,,,https://github.com/facebook/react/issues/13690,13690,unmountComponentAtNode works async ?,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,12,2018-09-19T16:46:54Z,2020-01-17T07:00:02Z,2020-01-17T07:00:02Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

bug

**What is the current behavior?**

i tried to use `ReactDOM.unmountComponentAtNode` and `ReactDOM.render` to manage my multi roots. i found that if i use them in sync code, i get an error just like this when i change route pages:
```
Warning: unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. Instead, have the parent component update its state and rerender in order to remove this component.
```

```
Warning: render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.
```

i use browserHistory to change route.
my code is written in componentDidMount method of a root React component:

Page1.js
```
  componentDidMount() {
    const a = document.getElementById('root2');
    ReactDOM.unmountComponentAtNode(a);
    ReactDOM.render(
      <A />,
      a
    );
    ReactDOM.render(
      <B />,
      document.getElementById('root3')
    );
  }
```

Page2.js
```
  componentDidMount() {
    const a = document.getElementById('root2');
    ReactDOM.unmountComponentAtNode(a);
    ReactDOM.render(
      <C />,
      a
    );
    ReactDOM.render(
      <B />,
      document.getElementById('root3')
    );
  }
```

And then, if i use `setTimeout` to wrap `ReactDOM.render` after `ReactDOM.unmountComponentAtNode(a);`, the result can be success.

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

react 16.5.2
react-dom 16.5.2"
,,,https://github.com/facebook/react/issues/13653,13653,React 16.5.0 causes all Jest unit tests to fail,[],closed,False,,2,2018-09-14T16:34:59Z,2018-09-14T16:50:12Z,2018-09-14T16:50:12Z,NONE,completed,,"I'm using Jest/ Enzyme to do unit tests in a project I'm working on, but recently upgrading to 16.5.0 has caused errors to appear in almost all of my unit tests.  The error occurs when use enzyme in a unit test to mount a component.  I've given an example of this code below:

```
const wrapper = mount(<ComponentName value='test' />);
```

However, since upgrading to 16.5.0, this always fails with the following error:

```
Invariant Violation: Unable to find node on an unmounted component.    
      at invariant (node_modules/fbjs/lib/invariant.js:42:15)
      at findCurrentFiberUsingSlowPath (node_modules/react-reconciler/cjs/react-reconciler-reflection.development.js:155:30)
      at toTree (node_modules/enzyme-adapter-react-16/build/ReactSixteenAdapter.js:96:60)
      at Object.getNode (node_modules/enzyme-adapter-react-16/build/ReactSixteenAdapter.js:239:33)
      at new ReactWrapper (node_modules/enzyme/build/ReactWrapper.js:100:33)
      at mount (node_modules/enzyme/build/mount.js:19:10)
```
I've since downgraded to React 16.4.0 since it was not causing issues, but I think this should be looked at further.

Thanks!
"
,,,https://github.com/facebook/react/issues/13655,13655,"""Cannot update during an existing state transition"" exception is not caught by componentDidCatch","[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,3,2018-09-14T22:24:28Z,2018-09-15T11:19:47Z,2018-09-15T11:19:47Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

bug

**What is the current behavior?**

I'm working with `react-apollo` right now and there was a mistake in my code which could re-render the inner query at the same time with the outer query (this was an integration test). I can see this React error in the console (which perfectly makes sense), but the problem is that I expect it to be caught by top-level boundary component with componentDidCatch() but it didn't get executed in this case. As a result, `jest` hangs up and bitbucket pipelines stop the build for the PR after 2 hours of inactivity.

**What is the expected behavior?**

I guess componentDidCatch() could've caught this exception.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

We're using React@16.4.1"
,,,https://github.com/facebook/react/issues/14038,14038,eslint-plugin-react-hooks,[],closed,False,,2,2018-10-30T22:39:26Z,2018-10-31T00:13:25Z,2018-10-31T00:13:25Z,NONE,completed,,"```js
function Editor({ data: { page } }: EditorProps) {
  if (page == null) throw Error('missing page data in editor')
  const [editorValue, setEditorValue] = useState(() => {
}
```

I believe this should be a valid case, because throw. "
,,,https://github.com/facebook/react/issues/13951,13951,"npm start failed The react-scripts package provided by Create React App requires a dependency: ""babel-loader"": ""8.0.4"" following steps doesnt work ",[],closed,False,,9,2018-10-24T12:31:17Z,2019-12-22T11:12:18Z,2018-11-01T19:55:07Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
"
,,,https://github.com/facebook/react/issues/14009,14009,React + GSAP -> Animation doesn't work with Build production,[],closed,False,,1,2018-10-28T16:26:13Z,2018-10-28T18:32:16Z,2018-10-28T18:32:15Z,NONE,completed,,"### Is this a bug report?
- Maybe Yes? || A doubt :)

### Did you try recovering your dependencies?
- Yes

### Which terms did you search for in User Guide?
- Yarn Build: Animation Failing

### Environment

`npx create-react-app gsapApp`

**package.json**

```javascript

""homepage"": ""."",
""dependencies"": {
  ""gsap"": ""^2.0.2"",
  ""react"": ""^16.6.0"",
  ""react-dom"": ""^16.6.0"",
  ""react-scripts"": ""^2.0.5""
},
""scripts"": {
  ""start"": ""react-scripts start"",
  ""build"": ""react-scripts build"",
  ""test"": ""react-scripts test --env=jsdom"",
  ""eject"": ""react-scripts eject""
},
""devDependencies"": {},
""browserslist"": [
  "">0.2%"",
  ""not dead"",
  ""not ie <= 11"",
  ""not op_mini all""
]

```

**manifest.json**
```javascript

""start_url"": "".""

```

### Steps to Reproduce

1. When running the project with the server with `react-scripts start`, the animation runs perfectly. : D
2. However ... when creating the bundle for production, using the react-scripts build command the animation simply does not work: :'(
3. I'll provide the code below to show it happening

### Expected Behavior

- That the animation works normally

### Actual Behavior

- Animation does not happen.
In the video below:
1) On the Left: project running with `yarn start`, adding 2 seconds of delay to view a console along with animation start.
2) On the Right: project running on a static server withe the build folder after run `yarn build`. The console after 2 seconds runs, the animation does not.

![react gsap](https://user-images.githubusercontent.com/15070031/47618498-8d08d400-dab2-11e8-8e28-2a147bf01eee.gif)

### Reproducible Demo

**App.js**

```javascript

import React, { Component } from 'react';
import { TweenLite } from 'gsap/all';

class App extends Component {

  componentDidMount() {
    setTimeout(() => {
      console.log('animate init', true)
      TweenLite.to(this.myPRef, 2, {
        x: 200
      })
    }, 2000)
  }

  render() {
    return (
      <p ref={ref => this.myPRef = ref}>React + GSAP</p>
    );
  }
}

export default App;

```
Any idea? :)

**p.s**: I'll post this behavior also on GSAP's and facebook/create-react-app's Github, to see if this could be a GSAP or Build with CRA bundle-related issue.

Thanks for the help, 
Alex."
,,,https://github.com/facebook/react/issues/13819,13819,How to send a notification to specific user and handle it,[],closed,False,,3,2018-10-10T17:52:22Z,2018-10-12T23:12:09Z,2018-10-12T08:51:10Z,NONE,completed,,"I'm an android and iOS developer. 
on android and ios programming I can open a ***specific page*** when user click on the notification.

for example, this is a sample JSON string from the server side to clients:

    ""data"":{
      ""pages"":""home""
    }

when I receive this notification I can open the `home` page.

I want to handle my react pages when a notification will receive.

Is it possible to handle this action? or on the web application, user just can see the message from notification?
"
,,,https://github.com/facebook/react/issues/14012,14012,Suspense ping shouldn't suspend if all suspended content is already in fallback mode,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":1109407645,""node_id"":""MDU6TGFiZWwxMTA5NDA3NjQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Suspense"",""name"":""Component: Suspense"",""color"":""8ffcd6"",""default"":false,""description"":""""}]",closed,False,,10,2018-10-28T21:22:06Z,2020-06-29T18:50:09Z,2020-06-29T18:50:08Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

When using suspense and hooks - specifically `useState` and `useEffect` - nested async renders (using `react-cache`) cause state hooks not to be updated. Specifically this happens between the first promise settling and the last promise settling in a `Suspense` component. However the state updates concerned can be outside of the `Suspense` root: https://codesandbox.io/s/wznnxz9pvw

In the linked example, moving the mouse will update the displayed coordinates for the first 2000ms (the time at which the first thrown promise resolves) however, after this the UI will not show any updated coordinates until after the final nested promise in the adjacent `Suspense` root settles.

I may both be using Suspense wrong (given the understandable lack of documentation) as I've been having other bugs with this setup, specifically the above example will sometimes never render beyond the ""loading ..."" placeholder. This is especially noticeable with setting higher timeouts in the `Timeout` component.

react 16.7.0-alpha
react-dom 16.7.0-alpha
react-cache 2.0.0-alpha
"
,,,https://github.com/facebook/react/issues/13985,13985,Warn if ReactDOM.createPortal is inside a noscript or other text content tag,"[{""id"":40929153,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement"",""name"":""Type: Enhancement"",""color"":""84b6eb"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,4,2018-10-26T13:10:22Z,2020-01-19T02:48:33Z,2020-01-19T02:48:33Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**

When calling `ReactDOM.createPortal` from within a `<noscript />`, nothing happens, no error is logged.

```javascript
ReactDOM.render(
  <noscript>
    {ReactDOM.createPortal(""yo"", modalNode)}
  </noscript>,
  appNode
);
```

**What is the expected behavior?**

Whether:
- warn that it doesn't work (it worked in the previous version)
- render the portal

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

- React 16.5.0 & more recent
- Reproducible in every browser

**Repro**
https://jsfiddle.net/bloodyowl/n5u2wwjg/223296/"
,,,https://github.com/facebook/react/issues/13940,13940,"Objects are not valid as a React child (found: object with keys {}). If you meant to render a collection of children, use an array instead.",[],closed,False,,1,2018-10-24T07:23:32Z,2018-11-01T19:52:34Z,2018-11-01T19:52:34Z,NONE,completed,,"I am not able to pass the state 'book' to other components of react 

```
import React from 'react';
import ReactDOM from 'react-dom';
import Data from './Data';
import DataDisplay from './DataDisplay';
import Booking from './Booking';
import './cards.css';

class Show extends React.Component{
constructor(props)
{
  super(props);
  this.state = {
    shows: {},
    book: {}
  };
  this.loadShows = this.loadShows.bind(this);
  this.bookShow = this.bookShow.bind(this);
}
loadShows=()=>
{
  this.setState({
    shows:Data
  })
}

bookShow = (key)=>
{
  const copyBooking = {...this.state.book};
  this.state.book[key] = this.state.book[key] + 1 || 1;
  this.setState({
    book:this.state.book
  });
}

  render(){
    return(
      <div>
        <Cards loadShows={this.loadShows} displayShow={this.state.shows} />
        <div className=""container"">
          <div className=""shows"">
            <ul>
              {Object.keys(this.state.shows).map(key=> <DataDisplay key={key} index={key} bookShow={this.bookShow} details={this.state.shows[key]}/>)}
            </ul>
          </div>
          <Booking booked={this.state.book} />
        </div>
      </div>
   )
  };
}


export default Show;

```"
,,,https://github.com/facebook/react/issues/13944,13944,Cannot be used new contextType API in constructor?,[],closed,False,,9,2018-10-24T07:58:17Z,2022-07-13T21:25:10Z,2018-11-01T19:53:33Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?** *feature* 

**What is the current behavior?** Using `Component.contextType`, `this.context` keeps `null` in class component's constructor.

**What is the expected behavior?** 

-  `this.context` can be obtained in constructor
- if implementing of the feature is inappropriate, write in documentations that `this.context` cannot be used in constructor.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16.6 (older React doesn't have `Component.contextType`) in Chrome 70 (Windows 7)
"
,,,https://github.com/facebook/react/issues/13792,13792,the setTimeout and onClick don't work on SSR. what should I do for this?,[],closed,False,,1,2018-10-08T01:27:43Z,2018-10-08T02:05:36Z,2018-10-08T02:05:36Z,NONE,completed,,
,,,https://github.com/facebook/react/issues/14002,14002,Safari Devtools flooded with security errors on react-dom selection work with iframes with diff origins,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":69105358,""node_id"":""MDU6TGFiZWw2OTEwNTM1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Browser:%20Safari"",""name"":""Browser: Safari"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,7,2018-10-27T19:09:31Z,2019-03-28T07:18:26Z,2019-03-20T13:11:54Z,NONE,completed,,"hey folks, looks like [this code](https://github.com/facebook/react/commit/b565f495319750d98628425d120312997bee410b) added small issue with safari and it could flood devtools console output with messages like this:
<img width=""875"" alt=""screenshot 2018-10-26 at 15 25 33"" src=""https://user-images.githubusercontent.com/778908/47569863-0e3a5c80-d935-11e8-8e59-8d95d35ba131.png""> 
As I understand it happens [here](https://github.com/facebook/react/commit/b565f495319750d98628425d120312997bee410b#diff-a654f37b01573fc8006b426d56ad53ceR50) and I see you catch the error, but safari still adds the error message if you have iframes with different origin"
,,,https://github.com/facebook/react/issues/13763,13763,Conditional Components,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null}]",closed,False,,6,2018-10-03T12:13:22Z,2018-11-02T10:53:58Z,2018-11-01T19:23:35Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

Feature

**What is the current behavior?**

Often we will use expressions like this:

`{ !x ? null : <Component title={x.title} /> }`

**What is the desired behavior?**

We would like to have expressive components such as

```
<When c={x}>
   <Component title={x.title} />
</When>
```

In many cases this generic syntax is preferred over an explicit child component or pure function which knows about what it is supposed to render.

The issue is that this will evaluate the children, even if they ultimately are not returned (since they are passed as children to the When component).

What is desired is for the syntax above to be able to behave exactly like a conditional expression, in that the contained children are not actually processed at all unless a condition is met.  In reality the component could be something else entirely such as `<SuperUser />` which will only process and render the children if the current user is a super user, or `<Morning />` to only process and render items between 8 AM and 11 AM (or similar).  The key thing is that we do not want the props passed into the children, or the children themselves produced, unless a condition has been satisfied.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Presumably any version of React."
,,,https://github.com/facebook/react/issues/14010,14010,State from useState hook inside a setTimeout is not updated,[],closed,False,,7,2018-10-28T20:04:45Z,2021-12-06T09:46:31Z,2018-10-29T04:54:32Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug/Question

**What is the current behavior?**
When I retrieve a value from a useState hook inside a setTimeout function, the value is the one when the function was called and not when the code inside gets executed.

You can try here, just increase the counter then start the timeout and increase the counter again before the timeout expires.
https://codesandbox.io/s/2190jjw6op

**What is the expected behavior?**
Retrieving the updated state. 
If instead it's working as intended how I can retrieve the updated status?

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.7.0-alpha.0
"
,,,https://github.com/facebook/react/issues/13853,13853,Can't access SyntheticEvent in setState function body,[],closed,False,,5,2018-10-15T10:30:41Z,2018-10-15T16:22:07Z,2018-10-15T16:22:07Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
When trying to access the event object inside setState's function body this working is shown:
```
Warning: This synthetic event is reused for performance reasons. If you're seeing this, you're accessing the method `*` on a released/nullified synthetic event. This is a no-op function. If you must keep the original synthetic event around, use event.persist(). See https://fb.me/react-event-pooling for more information.
```
It works fine when passing a plain object to setState.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
https://codesandbox.io/s/5mrjwmlr8n

**What is the expected behavior?**
It should be possible to access event object in setState function.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
latest one, not sure"
,,,https://github.com/facebook/react/issues/14266,14266,props with same key and value,[],closed,False,,2,2018-11-18T15:01:46Z,2018-11-18T15:57:26Z,2018-11-18T15:57:26Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Short form for props key and value**
for example:
*Instead of this*:
```Javascript
......
const { name, age, photoURI } = this.state
return (
  <Person name={name} age={age} photoURI={photoURI} />
)
........
```
this:
```Javascript
.......
const { name, age, photoURI } = this.state
return (
  <Person *name *age *photoURI />
) 
........
```

or even other way so that we don't have to write same key and value.
maybe a doller ($) sign ``` <Person $name /> ``` and any other way

like in es2015 there is a fix for:
```Javascript
const person = {
  name: name,
  age: age,
  photoURI: photoURI
}
// to
const person = { name, age, photoURI }
```

Pardon my English"
,,,https://github.com/facebook/react/issues/14092,14092,getState() hook proposal,[],closed,False,,16,2018-11-04T22:43:27Z,2022-05-04T16:59:13Z,2018-11-05T15:04:46Z,NONE,completed,,"`useState()` provided state value currently cannot be used in `useEffect(fn, [])` - (componentDidMount-like scenario) with asynchronous functions after state has been updated following the initial [] run.

Upon trying to give Hooks a try for a real world application I was initially confused with accessing state. Here is a little example what I tried to do:


```javascript
const UserList = () => {
    const [users, setUsers] = useState([])
    useEffect(() => {
        const socket = io('/dashboard')
        socket.on('user:connect', (user) => {
            setUsers([...users, user])
        })
        socket.on('user:update', (user) => {
            let newUsers = users.map((u) => u.id == user.id ? user : u)
            setUsers(newUsers)
        }) 
    }, [])

    return (
        users.map(({id, email}) => (
            <tr key={id}>
                <td>{id}</td>
                <td>{email}</td>
            </tr>
        ))
    )
}
```
Upon running this I instantly realised that inside the `socket.on()` handler the `users` initially obtained from useState() did not reflect the changes inflicted by `setUsers()` ran on `socket.on('user:connect')`. Passing `[users]` as the second argument of `useEffect()` wasn't an option as that would cause additional `socket.on()` binds. I became skeptical about Hooks for this use case and sadly thought this would be where my journey with using hooks instead of the class components would end.

Fortunately I then found a solution to this problem (with someone indirectly having helped me by accident in the reactflux channel) by using an updater function with `setState()` which made it all work: 
```javascript
  socket.on('user:update', (user) => {
            setUsers(users => users.map((u) => u.id == user.id ? user : u))
   })
```

The `setState()` problem was solved, but I am now wondering that if I will ever need to access `state` outside of an updater function, i.e. to just reply to a WebSocket message with some value from the state I will be unable to do so and this will force me and other users to revert to class components for such cases.

I therefore would like to suggest that a `getState()` hook would be an ideal solution to this problem.
                                                                                                                      
 
 
 
_Here is another mini example demonstrating the problem in a more concise manner:_ 
```javascript
const HooksComponent = () => {
    const [value, setValue] = useState({ val: 0 });

    useEffect(() => {
        setTimeout(() => setValue({ val: 10 }), 100)
        setTimeout(() => console.log('value: ', value.val), 200)
    }, []);
}
//console.log output: 0 instead of 10
```
And here is one with a proposed solution:

```javascript
const HooksComponent = () => {
    const [state, setState, getState] = useState({ val: 0 });

    useEffect(() => {
        setTimeout(() => setState({ val: 10 }), 100)
        setTimeout(() => {
            getState(state => {
                console.log('value: ', state.val)
            })
        }, 200)
    }, [])

```
"
,,,https://github.com/facebook/react/issues/14254,14254,React.lazy does not allow retrying a rejected promise,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":739761016,""node_id"":""MDU6TGFiZWw3Mzk3NjEwMTY="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler"",""name"":""Component: Reconciler"",""color"":""f9a798"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,17,2018-11-16T18:02:00Z,2022-07-15T12:04:04Z,2020-01-16T20:59:52Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**

It can be seen as a feature or a bug, depending on angle. Let's say it's an enhancement to how `lazy` works.

**What is the current behavior?**

When using `React.lazy`, if the given promise rejects while trying to asynchronously load a component, it's no longer possible to retry loading the component chunk because `lazy` internally caches the promise rejection.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

This does not seem to work great in CodeSandbox because it's using service workers, which get in the way when simulating offline mode, yet this small app illustrates the issue: https://codesandbox.io/s/v8921j642l

**What is the expected behavior?**

A promise rejection should not be cached by `lazy` and another attempt to render the component should call the function again, giving it the chance to return a new promise.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

AFAIK all version of React that include `lazy`.
"
,,,https://github.com/facebook/react/issues/14264,14264,Npm run eject? Its missing node-sass,[],closed,False,,1,2018-11-18T04:17:35Z,2018-11-18T04:19:04Z,2018-11-18T04:19:04Z,NONE,completed,,"I think the script should add **node-sass** to **devDependencies**, after npm run eject I have to always type npm install node-sass --save-dev."
,,,https://github.com/facebook/react/issues/14154,14154,Portals created dynamically exist outside of main tree,[],closed,False,,11,2018-11-08T17:50:05Z,2018-11-23T17:13:38Z,2018-11-22T16:05:52Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Bug

**What is the current behavior?**

When using a library that creates provided React Components dynamically and renders them using Portals then the components are rendered as expected, but exist outside of the main react tree.

See screenshot here:

![image](https://user-images.githubusercontent.com/1329081/48217006-1d31fd80-e37e-11e8-886b-2babec1d1db9.png)

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
I've create a repro of the problem here: https://github.com/seanlandsman/dynamic-react-components.git

yarn install
npm start

Then using react devtools inspect the created React components

This is a trimmed down/simplified example, but it illustrates the problem I'm seeing.

**What is the expected behavior?**

The dynamically rendered components should exist within the main/parent React application

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

react: 16.6.1
react-dom: 16.6.1
react-scripts: 2.1.1
"
,,,https://github.com/facebook/react/issues/14160,14160,XSS Protection: href Object not being html escaped as a props,[],closed,False,,3,2018-11-08T23:48:22Z,2018-11-19T18:43:42Z,2018-11-19T18:43:42Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
I would like to request a bug.

**What is the current behavior?**
From what I know, it is possible to inject object in props. However, this object seems to be html escaped when inserted into the DOM from my observation. 

Thus, if I try to add an onerror=alert('XSS') in a <img {this.props.dangerousAtt /> tag through a props, this is gonna be escaped when rendered. Then, I realized that inserting an id='test' is totally possible with a props. So I thought only dangerous javascript injectable attributes are escaped such as onerror,  onload, ...

However, I realized that the href=javascript:alert('1') is not escaped when inserted through a props. The javascript gets executed. Here, I thought it might a bug. 


**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
```
class App extends Component {
  render() {
  const href = {href: ""javascript:alert('1')""};
    return (
      <div>
      <a {...href}>Click here</a>     
      </div>
    ); 
}

ReactDOM.render(<App />, document.getElementById('root'));

```


**What is the expected behavior?**

I would expect the href object to be escaped as a props, so being treated exactly like onerror or other javascript attributes. 

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React version: 16.6.0
Browser: Chrome 70.0.3538.77"
,,,https://github.com/facebook/react/issues/14353,14353,npm error `npm ERR! extraneous: react@16.6.3` while attempting to insall react@16.6.3,[],closed,False,,1,2018-11-29T03:13:18Z,2018-11-29T03:15:30Z,2018-11-29T03:15:30Z,NONE,completed,,"`npm i -S react@16.6.3`

`npm ERR! extraneous: react@16.6.3` What do I do wrong?"
,,,https://github.com/facebook/react/issues/14077,14077,React onKeyDown not called in fullscreen in Chrome,"[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,False,,1,2018-11-02T17:54:06Z,2018-11-05T21:37:26Z,2018-11-05T21:37:26Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
If an element requests fullscreen but a parent element has a onKeyDown binding, when in fullscreen, the keydown events do not bubble up to the onKeyDown binding.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

Reproduce: https://jsfiddle.net/a4dopckg/

Steps:

1. Click on the text and start typing
2. You will see the keyboard strokes appear below the text
3. You will also see the strokes being logged to the console
4. Click the toggle fullscreen button
5. You won't see anything (probably a limitation of jsfiddle) but type a few more strokes
6. You will see the strokes logged in the console.
7. Click 'Esc' to exit fullscreen and you will see that the latest keyboard strokes did not appear below the text

**What is the expected behavior?**
I would expect the React onKeyDown binding to receive the keydown events, just as the document.addEventListener does, even in fullscreen.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Chrome 70, Mac OSX 10.12.6 Sierra
React 16.5.1"
,,,https://github.com/facebook/react/issues/14187,14187,Reusing refs,[],closed,False,,4,2018-11-10T13:42:44Z,2018-11-12T19:35:33Z,2018-11-12T16:24:07Z,NONE,completed,,"There are some jquery-like, DOM-based libraries that depend on a specific DOM structure. Lets say an image slider, which has the items-list and controls.

```
componendDidMount() {
   $('#my-slider').slider.init()
}

<div id=""my-slider"" className=""slider"">
  <ul className=""slider-list"">{items.map(item =>
     <li className=""slider-item"">{item}</li>
  )}
  <div className=""slider-controls"" />
</div>
```

Note the `slider-controls` div is completely empty, this will be generated by the `slider` lib during initialisation in `componentDidMount`

The structure is closed, and you cannot just take the `slider-controls` and put them at another place, the `$.slider()` lib would not work. But I found another technique how to accomplish this, by using `refs`

The structure became:

```
controls = React.createRef()
componentDidMount = () => {
  $('#my-slider').slider.init()
  this.forceUpdate();
}
<div className=""page"">
  <div id=""my-slider"">
    <ul ... />
    <div className=""hide""> // hide this controls
      <div ref={this.controls} className=""slider-controls"" />
    </div>
  </div>
  { this.controls.current ? <div
        className=""reuse-controls-somewhere-else""
        dangerouslySetInnerHTML={{
          __html: this.controls.current.innerHTML
        }}
    /> : null
  }
</div>
```

This stuff works, its great, but I thought maybe there is a better technique to reuse `refs`? If so, I could't find anything in the docs, so maybe it would be a good idea to fill the gap.

Thanks!"
,,,https://github.com/facebook/react/issues/14214,14214,When using React.lazy to code-split an error occurs if not accessing root route,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,10,2018-11-13T08:37:43Z,2019-09-04T10:11:09Z,2019-09-04T10:11:09Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
🐛 Bug Report
**What is the current behavior?**
I'm using `React.Lazy` to code-split my page routes, when navigating between routes works fine as long as I start at `/`, if I start the app in another route I get the following:
```
Uncaught Error: Could not find ""store"" in either the context or props of ""Connect(Info)"". Either wrap the root component in a <Provider>, or explicitly pass ""store"" as a prop to ""Connect(Info)"".

Warning: Unexpected Fiber popped.

Warning: Unexpected pop.

Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.
```
**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

I can't make a reproduction at the moment, will try to add it as a comment later. I also don't want to forget submitting this, so at least I'm adding it without repro for now.

**What is the expected behavior?**
When entering into a route different than root `React.lazy` should load the correct component.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 16.6.0
Chrome 70
Firefox 63"
,,,https://github.com/facebook/react/issues/14071,14071,<option> and <textarea> elements should be able to contain Components that return strings and render their output correctly,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,6,2018-11-02T08:27:15Z,2020-01-17T10:59:13Z,2020-01-17T10:59:13Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Feature request

**What is the current behavior?**

If you use a Component that returns a string inside an option or textarea element, the Component will be rendered as '[object Object]'

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://jsfiddle.net/38tz0ym2/

**What is the expected behavior?**

The string returned by the component should be rendered as the elements innerHTML.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

This was working accidentally in react v16.0.0 - v16.4.2 but was apparently buggy and crash prone. It no longer works at all in react v16.6.0"
,,,https://github.com/facebook/react/issues/14098,14098,Alternatives to functional components,[],closed,False,,1,2018-11-05T14:48:22Z,2018-11-05T15:17:47Z,2018-11-05T15:17:47Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

n/a

**What is the current behavior?**

It's quite convenient to wrap the parts of complex UIs in functional components, then simply compose them together, especially when different configurations repeat some of the elements.

Consider the following example:

```js
// class UserAccountPage {

render() {
  const UserAccount = () => {
    return <TheRealUserAccount userLogin={this.props.userLogin} />
  }
  const LoginButton = () => {
     return <TheRealLoginButton remember={this.props.remember}  />
   }

  const Quit = () => {
     return <TheRealQuit askToStay={this.state.askToStay} />
  }

  switch this.props.loggedIn {
    case .yep:
       return (
         <ComplexComponent>
            <UserAccount />
            <Quit />
         </ComplexComponent> 
       )

     case .nope:
       return (
         <ComplexComponent>
            <LoginButton />
            <Quit />
         </ComplexComponent> 
       )
  }
}

// }
```

So now what I see is that any change to state or props of `UserAccountPage` causes functional components to re-mount the underlying tree. Which is perhaps by design. 

What I wonder is, if there are any alternatives. The syntax using functional components is quite descriptive since it looks like regular HTML or JSX.

"
,,,https://github.com/facebook/react/issues/14355,14355,[Mouse Events] onMouseDownCapture is not stopping capture phase propagation,[],closed,False,,4,2018-11-29T05:54:26Z,2019-06-09T23:30:04Z,2019-06-09T23:30:04Z,NONE,completed,,"**Bug report**

**The current documentation has and I quote https://reactjs.org/docs/events.html**
** -To register an event handler for the capture phase, append Capture to the event name; for example, instead of using onClick, you would use onClickCapture-**

**I tried with this https://jsbin.com/hilome/edit?js,output and**

`<div id=""grandparent"" onClickCapture={this._handleClickCapture}>
          <div id=""parent"" onClick={this._handleClickBubble}>
            <button id=""elem"" onClick={this._handleClick}>Click me!</button>
          </div>
        </div>`

**if I change onClickCapture with onMouseDownCapture the stopPropagation() method does not prevent capture phase any more**


**What is the expected behavior?**

**I would expect that stopPropagation() stops the propagation to its children as it works with onClickCapture event**
"
,,,https://github.com/facebook/react/issues/14200,14200,"React is removing critical vendor prefixes, breaking styles.",[],closed,False,,1,2018-11-12T18:40:20Z,2018-11-12T18:44:33Z,2018-11-12T18:44:33Z,NONE,completed,,"Related: https://github.com/facebook/react/issues/7372

React is removing the vendor prefix from `-webkit-background-clip`, `background-clip` without the prefix is not supported in Chrome.

See https://jsfiddle.net/2mx8gqh4/ in Chrome, inspect the element and see that the invalid `    background-clip: text;` is applied.  (`style={{ WebkitBackgroundClip: 'text' }}` was requested.)

**What is the expected behavior?**

`-webkit-background-clip: text;` is applied

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Tested in Chrome 70, React 16.5.1, and 16.6.1 - occurs in all.
Only Chrome/Opera are impacted."
,,,https://github.com/facebook/react/issues/14066,14066,State variable not updating in useEffect callback?,[],closed,False,,27,2018-11-01T22:20:39Z,2022-11-08T13:40:20Z,2018-11-02T17:48:19Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug, maybe? Although thinking about it more makes me think I've misunderstood something.

**What is the current behavior?**
`scroll` state variable updates in rendered output but not inside `handleScroll` event callback. 

I reckon this might be due to the fact that when `handleScroll` is defined `scroll` is `0`, but `scroll` is defined in the scope above and should be updated when the component is re-rendered.

```jsx
import React, { useState, useEffect } from ""react"";

const Scroller = () => {
  const [scroll, setScroll] = useState(window.scrollY);

  const handleScroll = () => {
    console.log(scroll); // scroll is always 0
    setScroll(window.scrollY);
  };

  useEffect(() => {
    window.addEventListener(""scroll"", handleScroll);
    return () => window.removeEventListener(""scroll"", handleScroll);
  }, []); // runs once

  return <div id=""scroll"">{scroll}</div>; // scroll is correct
};

export default Scroller;
```
Please have a play:
[![Edit yv8vwo44px](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/yv8vwo44px)

**What is the expected behavior?**
`scroll` to be updated inside `handleScroll` event callback and in render output.

**Which versions of React, and which browser / OS are affected by this issue?**
```
chrome        70.0.3538.77
react         16.7.0-alpha.0 - next
react-dom     16.7.0-alpha.0 - next
```
"
,,,https://github.com/facebook/react/issues/14229,14229,Error in JSdoc react versions 16.6.1 - 16.6.3,[],closed,False,,5,2018-11-14T10:34:59Z,2018-11-16T15:40:45Z,2018-11-16T15:40:45Z,NONE,completed,,"Hello, looks like in file react.development.js exists some inconsistency between versions
![screenshot from 2018-11-14 12-30-42](https://user-images.githubusercontent.com/11429982/48477217-b0998180-e809-11e8-9abb-5330b6bb7a87.png)

"
,,,https://github.com/facebook/react/issues/14404,14404,eslint-plugin-react-hooks should report errors inside unnamed functions,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":1109410193,""node_id"":""MDU6TGFiZWwxMTA5NDEwMTkz"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Hooks"",""name"":""Component: Hooks"",""color"":""c2f27b"",""default"":false,""description"":""""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,16,2018-12-08T04:31:01Z,2020-01-17T08:00:13Z,2020-01-17T08:00:13Z,NONE,completed,,"I want to report a bug for the hooks plugin.

**What is the current behavior?**
There was no error report after running eslint, but the component failed when running in the browser.
From the chrome dev console it reported ""Uncaught Error: Rendered fewer hooks than expected. This may be caused by an accidental early return statement."" 

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React.
Here is a link to the github repo:
https://github.com/paboulos/react-hooks-eslint

**What is the expected behavior?**
Followed The Hooks API guide which says React hooks provides a linter plugin to enforce these rules automatically.Therefore it should have reported a usage violation when the eslint hooks plugin is specified. 
**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Using window 10 OS and Chrome browser.
1. First ran npx create-react-app Hooks
2. Installed react 16.7.0-alpha.2 and react-dom 16.7.0-alpha.2
3. Installed eslint dev dependencies:
 ""babel-eslint"": ""9.0.0"",
    ""babel-loader"": ""8.0.4"",
    ""eslint"": ""5.9.0"",
    ""eslint-config-airbnb"": ""17.1.0"",
    ""eslint-loader"": ""2.1.1"",
    ""eslint-plugin-import"": ""2.14.0"",
    ""eslint-plugin-jsx-a11y"": ""6.1.2"",
    ""eslint-plugin-react"": ""7.11.1"",
    ""eslint-plugin-react-hooks"": ""0.0.0""
4. Created the .eslintrc.json following the instructions from the Hooks API Doc
Then ran package script lint as follows: ""npm run lint""
no errors reported.
Then ran package script start as follows: ""npm start""
The React component CountHooks calls useState incorrectly and reports error in the browser dev console."
,,,https://github.com/facebook/react/issues/14500,14500,diff algorithm,[],closed,False,,2,2018-12-28T08:09:43Z,2018-12-28T11:26:41Z,2018-12-28T11:26:41Z,NONE,completed,,"In React, if the internal state of a subcomponent changes, does the diff algorithm occur within the component or from the topmost component?"
,,,https://github.com/facebook/react/issues/14414,14414,How to fix react run issue,[],closed,False,,1,2018-12-10T15:27:52Z,2018-12-10T17:04:05Z,2018-12-10T17:04:05Z,NONE,completed,,"After installing react-router-dom i am not able to run react application, Below are the errors, I am getting, didn't find any solution to fix that, I have this issue after installing react-router-dom

E:\PC\AboutMe\client>npm start

> client@0.1.0 start E:\PC\AboutMe\client
> react-scripts start

'react-scripts' is not recognized as an internal or external command,
operable program or batch file.
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! client@0.1.0 start: `react-scripts start`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the client@0.1.0 start script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:

**When i try to run **npm install** getting below issue**

npm WARN deprecated circular-json@0.3.3: CircularJSON is in maintenance only, flatted is its successor.
npm ERR! Unexpected end of JSON input while parsing near '...h"":""^1.2.12"",""yargs"":'

Please help me out to fix it i am new to react"
,,,https://github.com/facebook/react/issues/14509,14509,What does dangerouslySetInnerHTML prop do? How is it achieved?,[],closed,False,,3,2018-12-30T07:48:59Z,2019-01-02T07:36:21Z,2019-01-02T07:27:03Z,NONE,completed,,"   
 I understand the most basic xss. I used this property in my project  and found this feature is no different from innnerHtml.
   I read the source code, but because of the level and Time is limited.I have not been able to find the relevant code.  I want to know if it can avoid the risk of xss? Are there other risks?  At the same time, if someone knows the location of the relevant code, can you help me to point it out? I have no plans to read the entire code for the moment."
,,,https://github.com/facebook/react/issues/14482,14482,Hooks performance problem when passing only event handler into component,[],closed,False,,4,2018-12-21T19:51:33Z,2018-12-21T23:33:18Z,2018-12-21T22:42:46Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
No.

**What is the current behavior?**
When I pass a eventHandler memoized with useCallback it forces component render every time when a memoization parameter is changed. 

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

Here is link to [sandbox ](https://codesandbox.io/s/l5wrq94y37)
Every time we click on the button the Content is rendered when it should not.

**What is the expected behavior?**
Event handler should not force a component to render every time when a memoize parameter is changed.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

OS: any
""react"": ""^16.7.0-alpha.2"",
""react-dom"": ""^16.7.0-alpha.2"",
"
,,,https://github.com/facebook/react/issues/14377,14377,[Scheduler] Add support for delayed scheduling of callbacks.,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":1155972012,""node_id"":""MDU6TGFiZWwxMTU1OTcyMDEy"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Scheduler"",""name"":""Component: Scheduler"",""color"":""9de8f9"",""default"":false,""description"":""""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,2,2018-12-03T01:04:57Z,2020-01-17T10:59:20Z,2020-01-17T10:59:20Z,NONE,completed,,"Has the React team considered adding the ability to specify a time delay when scheduling callbacks on Scheduler. This would be useful to enable using Scheduler as a general scheduling solution in a JS environment, removing the need to use and manage setTimeouts/setInterval calls. "
,,,https://github.com/facebook/react/issues/14366,14366,업데이트 좀 그만 하세요 !!!,[],closed,False,,3,2018-12-01T03:00:37Z,2018-12-03T00:12:19Z,2018-12-01T03:38:46Z,NONE,completed,,"React 개발팀:

업데이트 좀 그만 하세요!!! 써글넘들...
이전 버전과 현재 버전 사이에는 항상 연관성이 있고, 공통성이 있어야지!!!
업데이트 할 때마다, 대량으로 수정을 해놓으면..
사용자들이 React 각 버전마다 새로 공부를 해야 되잖아요!!!
너무 변득스럽네요. 맨날 이랬다. 저랬다! 
React가 그렇게 불안전한 플랫폼인가요? 
매뉴얼도 좀 간단하게 만드세요. 
링크가 너무 많아서, 사용자들이 이리 갔다, 저리 갔다 하면서 헷갈리게 하지말고..

Angular 나 vue 로 갈아타던가 해야지! 
React 업데이트가 정말 짜증나네요."
,,,https://github.com/facebook/react/issues/14504,14504,"css-loader@1.0.0: The engine ""node"" is incompatible with this module. Expected version "">= 6.9.0 <7.0.0 || >= 8.9.0"".",[],closed,False,,2,2018-12-29T03:24:45Z,2019-01-24T18:22:03Z,2018-12-29T14:20:39Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
"
,,,https://github.com/facebook/react/issues/14492,14492,Setting less in create-react-app 2.0 does not work,[],closed,False,,1,2018-12-25T07:06:44Z,2019-01-09T14:24:54Z,2019-01-09T14:24:54Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug
**What is the current behavior?**
Setting less in create-react-app 2.0 does not work
```
const lessRegex = /\.less$/;
const lessModuleRegex = /\.module\.less$/;

```


```
{
            test: lessRegex,
            exclude: lessModuleRegex,
            use: getStyleLoaders({ importLoaders: 2 }, 'less-loader'),
          },
          // Adds support for CSS Modules, but using SASS
          // using the extension .module.scss or .module.sass
          {
            test: lessModuleRegex,
            use: getStyleLoaders(
              {
                importLoaders: 2,
                modules: true,
                getLocalIdent: getCSSModuleLocalIdent,
              },
              'less-loader',
            ),
 }
```
I have installed less-loader by ` npm install --save-dev less-loader less `"
,,,https://github.com/facebook/react/issues/14402,14402,Disable react-devtools to track component tree,[],closed,False,,0,2018-12-07T15:13:17Z,2018-12-07T16:49:50Z,2018-12-07T16:49:50Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

*feature*

**What is the current behavior?**

I saw question on StackOverflow which is about user is able to edit component state and props which stores credentials  via `react-devtools` extension [secure-payment-with-paypal](https://stackoverflow.com/questions/53545118/secure-payment-with-paypal).

Currently any user who has `react-devtools` extension can edit Component props or state easily. I love this feature which is very handy for developing.

I know that developer should not depend on only client side validation and should validate any credentials both client and server. 

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

 I thought how about disabling `react-devtools` to tack component tree and editing components if user does not wants any changes in production. Maybe to pass some flag?

Sorry if it is silly issue 🙈"
,,,https://github.com/facebook/react/issues/14731,14731,useState inside a context provider not properly read when called from timeout,[],closed,False,,1,2019-01-30T18:43:08Z,2019-01-30T19:26:36Z,2019-01-30T19:26:36Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Looks like a **bug**.

**What is the current behavior?**

I have a simple context set up to manage a global store. When implementing this context as a functional component with the useState hook, calls to my setStore function from inside a timeout are seeing old versions of the store and updating it incorrectly.

Possibly a duplicate of #14010 but I don't see why the value of my store should be getting saved by the closure. The closure created by the setTimeout can't see the value of store, so it shouldn't be captured.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

[https://codesandbox.io/s/mnxr754oy](https://codesandbox.io/s/mnxr754oy)

Refresh the page in the sandbox and click the ""Increment otherVal"" button a few times. After 3 seconds, a timeout fires in ChildThree that sets myVal to 42 but doesn't touch otherVal; however, the changes made by incrementing otherVal get blown away. This doesn't happen with changes prompted by onClick events (as you can test by clicking ""Set myVal to 42"" on the bottom), only timeouts.

The context implementation is in `store.js`. If you swap out the functional StoreProvider with the commented out class version, everything works as expected.

It's possible that I'm doing something wrong with how my closures are being created in the functional StoreProvider but I can't see why.

**What is the expected behavior?**

The context provided function setStore should be seeing the correct copy of the state returned by the hook.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Tested in Chrome/Firefox/Edge on React 16.9.0-alpha.1"
,,,https://github.com/facebook/react/issues/14641,14641,"""Invariant Violation: Unable to find node on an unmounted component"" on `react-test-renderer`'s `renderer.create` when react package versions don't match","[{""id"":710400704,""node_id"":""MDU6TGFiZWw3MTA0MDA3MDQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Renderer"",""name"":""Component: Test Renderer"",""color"":""006b75"",""default"":false,""description"":null},{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,6,2019-01-20T20:37:19Z,2020-01-17T10:59:33Z,2020-01-17T10:59:33Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

bug

**What is the current behavior?**

```
import renderer from 'react-test-renderer';

const tree = renderer.create(<MyComponent />);
// => Invariant Violation: Unable to find node on an unmounted component
```

There're many people complaining about this issue in many different contexts. It seems to be coming from `findDOMNode`. The discussions are very vague and varied, e.g.
- https://stackoverflow.com/questions/52734483/reactdom-render-unable-to-find-node-on-an-unmounted-component-after-react-upgra
- https://github.com/Pomax/react-onclickoutside/issues/231
- https://github.com/airbnb/enzyme/issues/1411
- and the many more refernced issues

I'm not sure if all has the same root cause but many advise to upgrade/downgrade seemingly randomly. Also seemingly randomly it works for some and doesn't for others. Would be great to get a general recommendation / fix.

My use case:

`MyComponent` above is a simple `styled-component` (`styled.ul`).

The issue seem to be related to versions or version mismatches between `react`, `react-dom` and `react-test-renderer`. In my case, the error disappears locally by having `v16.5.0` install of all. However, the issue still occurs in GitLab CI. The only obvious difference is that the CI uses `yarn` and I use `npm`. **I was finally able to solve it in both environments by upgrading all three to the latest, `v16.7.0`.** Having any minor version mismatches seemed to reproduce the error locally.

Complete trace of error:
```
      at invariant (node_modules/react-dom/cjs/react-dom.development.js:55:15)
      at findCurrentFiberUsingSlowPath (node_modules/react-dom/cjs/react-dom.development.js:4125:30)
      at findCurrentHostFiber (node_modules/react-dom/cjs/react-dom.development.js:4233:23)
      at findHostInstanceWithWarning (node_modules/react-dom/cjs/react-dom.development.js:19454:21)
      at Object.findDOMNode (node_modules/react-dom/cjs/react-dom.development.js:19962:14)
      at StyledComponent.componentDidMount (node_modules/styled-components/dist/styled-components.cjs.js:1927:25)
      at commitLifeCycles (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:7019:22)
      at commitAllLifeCycles (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:8234:7)
      at HTMLUnknownElement.callCallback (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:2312:14)
      at invokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:193:27)
      at HTMLUnknownElementImpl._dispatch (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:119:9)
      at HTMLUnknownElementImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:82:17)
      at HTMLUnknownElementImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/nodes/HTMLElement-impl.js:30:27)
      at HTMLUnknownElement.dispatchEvent (node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:157:21)
      at Object.invokeGuardedCallbackDev (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:2362:16)
      at invokeGuardedCallback (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:2411:31)
      at commitRoot (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:8404:7)
      at completeRoot (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:9769:3)
      at performWorkOnRoot (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:9697:9)
      at performWork (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:9601:7)
      at performSyncWork (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:9573:3)
      at requestWork (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:9461:5)
      at scheduleWork (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:9256:5)
      at scheduleRootUpdate (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:9865:3)
      at updateContainerAtExpirationTime (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:9892:10)
      at updateContainer (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:9903:10)
      at Object.create (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:10428:5)
      at Object.<anonymous> (src/components/Selectors/DownShiftSelector/DownShiftSelector.test.js:45:44)
```

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

no error

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

as described above"
,,,https://github.com/facebook/react/issues/14514,14514,Proposal: Add top level useMount/useUnmount to improve scannability/prevent fragmentation,[],closed,False,,8,2019-01-01T19:03:38Z,2019-01-02T22:33:56Z,2019-01-02T21:02:19Z,NONE,completed,,"This is a feature request.

The current hooks API provides everything that is necessary to create sophisticated and elegant applications. However, the current api is something of a step backwards in terms of scannability - e.g. Understanding when various code will execute in the component's lifecycle. 

As a trivial example, suppose I simply want to log some information everytime a component unmounts for some analytics purpose. That's it. Right now, the simple implementation is:

```javascript
useEffect(() => {
  return () => {
    fetch('some-analytics-api.com');
  }
}, [])
```

There's no issue with whether this code works. Clearly it does. However, when developers are scanning the code base littered with multiple `useEffect` invocations, all of which have different memoization arrays, it takes a second to realize what this code is supposed to be doing - _""Hmm, I see we're sending some analytics request. Okay, it's a callback returning a callback, so it's a disposer function. Oh, and there's an empty array as the final parameter, so the disposer only fires when the component unmounts""_. That fraction of a second to make that determination is just a bit too long in my opinion. With a new topLevel API `useUnmount` it is grokkable almost instantly:

```javascript
useUnmount(() => {
  fetch('some-analytics-api.com');
})
```

This proposal is to add a set of top level primitives that map more directly to the API's that developers are already familiar with and that correspond more closely to the lifecycle events developers think about when reasoning about application flow. The proposed top level hooks include `useMount`, `useUnmount` with either an optional flag to run inside a layout effect, or else two additional top level hooks `useLayoutMount`, `useLayoutUnmount`. 

A likely concern with this proposal is that it will  unnecessarily bloat the top level API. The reasoning goes: _Why add to the top level API convenience wrappers that can be coded in userland?_ It's a legitimate concern. In this case however, I argue that the use case is _so_ common that the benefits outweigh the cost. To borrow an analogy, developers have been able to perform `Array.map` since the invention of Javascript, but once it's usefulness and ubiquity was established, it was added to the language proper. I'm making this same argument for `useMount` and `useUnmount`. 

As evidence that these convenience wrappers are going to become extremely popular, simple Github searches for uses of `useUnmount` and `useMount` (https://github.com/search?q=useUnmount+react&type=Code and https://github.com/search?q=useMount+react&type=Code) return some 100+ repos already declaring their own convenience wrappers for these effects. Unless added to core, this number will expand drastically once hooks leave alpha. Clearly developers want these convenience wrappers, and will either write them themselves or import an external library (lodash for React? Please no...) that does it for them. 

Another likely concern with this proposal is that developers will use these syntactic sugar functions to write less optimized and self contained code. To borrow an example from the documentation, the fear is that instead of:

```javascript
useEffect(() => {
  ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);
  // Specify how to clean up after this effect:
  return function cleanup() {
    ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);
  };
}, []);
```

Devs will inefficiently do: 
```javascript
useMount(() => {
  ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);
})

useUnmount(() => {
  ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);      
})
```
From a practical performance perspective though, these two implementations are basically identical and not worth worrying about. Function definitions and invocations are cheap in modern javascript. As to the issue of the code being less self contained, in most instances I believe that won't be a problem since developers will simply extract the logic into a self contained custom hook like `useFriendStatus` that encapsulates all the logic into an atomic piece. 

One small additional benefit: With `useMount`/`useUnmount` being in React Core, instead of dozens of different snowflake implementations, there may feasibly be future optimizations on the hooks that React core will then be able implement on an ecosystem wide basis. 

So in summary, it seems to me that React can either fight the inevitable or embrace it. 

As a purely stylistic (for now at least) question, there's no real right or wrong answer to this proposal and barring extremely strong technical reasons against the proposal, I'm not sure how it can be discussed cooly and objectively. Maybe a developer survey? "
,,,https://github.com/facebook/react/issues/14708,14708,hooks: useContext with useState not updating,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,6,2019-01-26T20:39:04Z,2021-04-15T09:30:39Z,2019-01-27T20:36:53Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

seems it's a **bug**. 😕 

**What is the current behavior?**

Nested context provider and `useContext` hooks seems to be conflicting, updates get discarded.

**What is the expected behavior?**

When connecting to a context, it should update whenever it's `value` changes.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

- **react**: `18.8.0-alpha.1` (also reproduced on `16.7.0-alpha.0`)
- **browser**: `chrome 71`
- **os**: macOS Sierra

---

### more details

While working on a cleanup of a localStorage ""connection"",
I tried to mix 2 articles ([`[1]`](https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down) & [`[2]`](https://reactjs.org/docs/context.html#updating-context-from-a-nested-component)) from the official react documentation, I've implemented it with hooks, but the value seems not to be passing through.

I've put up a streamlined demo on [codesandbox `[3]`](https://codesandbox.io/s/0yzjr8vnrv).

The actual implementation is only a couple of lines more (parsing it from and stringifying it to JSON).

Workarounds that I found:
- If I create a new function on each render around the `setValue` function, it actually works. 
  - but this goes against the advice on [`[1]`](https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down) about avoiding creating  new values.
- Migrate it to a class and use `componentDidUpdate` instead of `useEffect`.
  - I'm actually using this right now, as it works. Including saving a reference to the function in the state.

---

Is there anything that shouldn't work on the code below? the effect gets triggered with the changes,
but the value doesn't get updated on the components that consume via hook. see repro code [`[3]`](https://codesandbox.io/s/0yzjr8vnrv)

```javascript
const createLocalStorage = key => {
    const initialValue = localStorage.getItem(key)
    const ValueContext = createContext(initialValue)
    const SetterContext = createContext(() => {})

    const useStorage = () => [ValueContext, SetterContext].map(useContext)

    const Provider = ({children}) => {
        const [value, setValue] = useState(initialValue)

        useEffect(
            () => {
                console.log('effect', value)
                localStorage.setItem(key, value)
            },
            [value],
        )

        return (
            <ValueContext.Provider value={value}>
                <SetterContext.Provider value={setValue}>
                    {children}
                </SetterContext.Provider>
            </ValueContext.Provider>
        )
    }

    return [Provider, useStorage]
}
```

`[1]`: https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down
`[2]`: https://reactjs.org/docs/context.html#updating-context-from-a-nested-component
`[3]`: https://codesandbox.io/s/0yzjr8vnrv

---

![hlcecpq](https://user-images.githubusercontent.com/8649362/51789871-bea63f80-2174-11e9-9288-151510494a7e.gif)
"
,,,https://github.com/facebook/react/issues/14668,14668,Will  dangerouslySetInnerHTML generate  more html element ?,"[{""id"":40929154,""node_id"":""MDU6TGFiZWw0MDkyOTE1NA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Invalid"",""name"":""Resolution: Invalid"",""color"":""e6e6e6"",""default"":false,""description"":null}]",closed,False,,2,2019-01-23T13:16:55Z,2019-01-24T01:55:18Z,2019-01-24T01:45:10Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->
**Do you want to request a *feature* or report a *bug*?**
Hi, React Team. Thanks for your awesome work. I have a problem when using 
`dangerouslySetInnerHTML` 

**What is the current behavior?**

My example code like this:
```
//...  the node.topic is a string
render() {
    const { node, className, style } = this.props;
    return (
      <div
        tabIndex={0}
        contentEditable={true}
        id=""editor""
        onKeyDown={this.handleKeyDown}
        spellCheck={false}
        onBlur={this.handleBlur}
        onPaste={this.handlePaste}
        ref={this.containerRef}
        dangerouslySetInnerHTML={{ __html: node.topic }}
        style={style}
      />
    );
  }
```

But I got unexpected html that looks like
![image](https://user-images.githubusercontent.com/13745971/51608727-3a28a680-1f53-11e9-9c6a-1b9161b63d67.png)
![image](https://user-images.githubusercontent.com/13745971/51608733-3eed5a80-1f53-11e9-8232-456034ce6e13.png)


**What is the expected behavior?**
It's hard for me to debug what's wrong with it. It's sometimes work, but sometimes will generate a `<br/>` tag. 
Maybe the `<br />` tag is generated by my browser ?

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

```
react 16.7.0
react-dom 16.7.0
OS: macos 10.14.1 Beta (18B73a)
Chrome: 71.0.3578.98
```
"
,,,https://github.com/facebook/react/issues/14544,14544,`yarn flow` stuck at merging on Window10,[],closed,False,,1,2019-01-08T10:08:27Z,2019-01-09T14:24:41Z,2019-01-09T14:24:41Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**
a bug

**What is the current behavior?**
See #14519 first.

And i tested on a Linux machine,same node version,same yarn version,same npm version,and same operation.
On Linux,`yarn flow` works well.
I tested on another Window10 machine,also fail.

So i think this is a **bug** related to flow,win10 and react source code,not my own problem.

"
,,,https://github.com/facebook/react/issues/14589,14589,More on: react-scripts: not found,[],closed,False,,2,2019-01-14T16:17:21Z,2019-01-14T16:23:28Z,2019-01-14T16:21:34Z,NONE,completed,,"I've got more to report on this problem with react-scripts not found error.
Here is the error running 'npm start'

```
/myapp/front# npm start

> front@0.1.0 start /myapp/front
> react-scripts start

sh: 1: react-scripts: not found
npm ERR! file sh
npm ERR! code ELIFECYCLE
npm ERR! errno ENOENT
npm ERR! syscall spawn
npm ERR! front@0.1.0 start: `react-scripts start`
npm ERR! spawn ENOENT
npm ERR!
npm ERR! Failed at the front@0.1.0 start script.
```

If one runs 'npx react-scripts start' it forces a rebuild of the entire 1980 packages?!!
But it does eventually run.

The setup issue is that the Ubuntu VM is running on an NFS Mount from Win8

First problem is all the bin files can't build, but if you build initially on VM's disk image VDI, and then copy back to real files over an NFS mount the second problem is it can't copy symbolic links (maybe an option to copy the source if symlink fails exists or should).

Okay so once you have the symbolic links repaired in windows via mklink after copying the initial build from a none NFS mount folder, well that's when this problem described above happens.

I am unclear on which one of the 1980 packages other then this react-scripts is in need or a total rethink but it doesn't cut it when setup in this way. (Using symbolic links seems literally unacceptable.)

It seems not unreasonable to think you should be able to use your platform/IDEs of choice and have the UNIX VM mount and work of those NFS Mounted files. The way all this stuff is build falls short of this I call expected behaviors. 

The only problems are why isn't 'npm start' able to run 'npx react-scripts start', and in turn why does that not understand the package is already built and take forever to rebuild all packages every time? I think it also relates to file watching. Maybe there is a way to deploy this without waiting 10 minutes to launch a simple example.
"
,,,https://github.com/facebook/react/issues/14656,14656,Props shortcut in HTML/JSX writting,[],closed,False,,3,2019-01-22T11:00:19Z,2019-01-24T00:19:52Z,2019-01-24T00:19:52Z,NONE,completed,,"## Do you want to request a *feature* or report a *bug*?
Hello, I would like to requets a feature that has to do with the way the HTML part of the JSX is written.
 
## What is the current behavior?
Today, to pass a prop that has the same name as the variable that carries the information, here is the behavior:

`<Forum subjects={subjects} />`

## What is the expected behavior?
I (but not solely I, I'm sure) would love to be able to write this:

`<Forum subjects />`

I know that HTML allows this for booleans, but as JSX is neither HTML nor JS, I'm sure we can work something out to allow this for objects, the same way it's done in ES6:

`console.log({ nameOfTheVariable })`

for instance."
,,,https://github.com/facebook/react/issues/14732,14732,Memory leak on React > 16.2.5,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,22,2019-01-30T22:03:07Z,2020-04-19T22:58:41Z,2020-04-19T22:58:41Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Possible bug, or unexpected change in internal behavior

**What is the current behavior?**
We are seeing a substantial memory leak in our codebase in versions of React > 16.5.2. Bisecting the issue, it seemed to appear at commit 7bee9fbdd49aa5b9365a94b0ddf6db04bc1bf51c.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

Our apologies, we are unable to fully isolate the issue to a minimal demo, and suspect it is not a bug but a behavior change which our code relied on. The leak seems to be in the messages area, where many components are created and released quickly.

**What is the expected behavior?**
Old fibers should be garbage collected, but cannot be. Components are retained in memory.
We have run the affected code area in StrictMode, which allowed us to identify some event leakage but even when this was addressed (by moving listeners to componentDidMount from the constructor) the memory leak continues. There are some findDomNode usages remaining, but even if we move those it does not fill the leak.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.5.3+

We are seeking suggestions on what internal could be causing retention of components and nodes by our code, and better ways to isolate the issue.

Thank you!
-Mike"
,,,https://github.com/facebook/react/issues/14598,14598,What’s the difference between fiber reconciler sync mode and the old react 15 stack reconciler? Why does performance boosts so much?,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,3,2019-01-15T18:04:28Z,2019-01-22T07:13:55Z,2019-01-22T07:13:55Z,NONE,completed,,"Since performance of react 16 boosts so much and thanks to those aweosome talks on YouTube explained fiber so detailed, I hardly figured out even the latest version of react 16 is still in sync mode, no features like time slicing are turned on by default.

Then I wondered why the perfmance is pretty good compared with react 15 even though? 

Trying to get some info on google, but it seems like no one really looked into this question. Even react 16 is shipped with this “fake” fiber mode for such a long time, it is not well documented or explained on the official website.

Can someone give me some ideas about this please? "
,,,https://github.com/facebook/react/issues/14728,14728,react packages listed as dependencies can't be debugged properly,[],closed,False,,1,2019-01-30T14:38:32Z,2019-02-08T16:54:02Z,2019-02-08T16:54:02Z,NONE,completed,,"**Do you want to request a feature or report a bug?** Bug

**What is the current behavior?**
React packages listed as dependencies can be debugged only in transpiled code and not JSX.

**What is the expected behavior?**
You can see and debug JSX files from other react packages listed as dependencies.
I would expect webpack.config.js to configured properly in the default react app even before is ejected.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
It happens in all versions of everything.
"
,,,https://github.com/facebook/react/issues/14547,14547,are 2 files in phpstorm,[],closed,False,,0,2019-01-08T15:37:06Z,2019-01-08T21:58:52Z,2019-01-08T21:58:52Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
"
,,,https://github.com/facebook/react/issues/14796,14796,"Under what circumstances, unstable_shouldYield will return true？","[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,4,2019-02-08T13:56:21Z,2019-02-10T01:12:32Z,2019-02-10T00:44:18Z,NONE,completed,,"In Scheduler.js, 
```
function unstable_shouldYield() {
  return (
    !currentDidTimeout &&
    ((firstCallbackNode !== null &&
      firstCallbackNode.expirationTime < currentExpirationTime) ||
      shouldYieldToHost())
  );
}
```
unstable_shouldYield() return true when currentDidTimeout is false and shouldYieldToHost() return true, but why?
```
shouldYieldToHost = function() {
  return frameDeadline <= getCurrentTime();
};
```
shouldYieldToHost() return true means there's no time left in this idle period
currentDidTimeout is false means the schedule is not timeout
what relationship between them, why does unstable_shouldYield() depend on them?
"
,,,https://github.com/facebook/react/issues/14878,14878,Simple memo components being updated with new set of props during context change,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,False,,3,2019-02-18T13:08:58Z,2022-04-28T15:01:56Z,2022-04-28T15:01:56Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**

Bug

**What is the current behavior?**

Simple memo components receive new props during context change if their parent got rerendered.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://codesandbox.io/s/jp21pwzrv9

**What is the expected behavior?**

Conceptually from the user's perspective `React.memo(Component)` & `React.memo(Component, shallowEqual)` should behave exactly the same (but they dont)

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Current React's master ( 0e67969cb1ad8c27a72294662e68fa5d7c2c9783 ) & current latest release 16.8.2

I've already written a failing test for this - https://github.com/facebook/react/pull/14876 . Would love to work on fixing this but as mentioned in this PR, I would require some guidance on how this should get fixed properly.
"
,,,https://github.com/facebook/react/issues/14927,14927,useLayoutEffect in ssr,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,61,2019-02-22T10:52:29Z,2022-07-27T14:52:36Z,2020-01-09T19:29:26Z,NONE,completed,,"Hi, I do not understand the situation with this hook a bit. I use this hook to perform the animation synchronously with the state update, if I use useEffect, then I have jumps in the animation, because the animation library does not have time to start. Also, the documentation states that useLayoutEffect runs on the same phase as componentDidMount (that is, on the client side), and here my server issues complaints to me about my code. Why is that?

https://codesandbox.io/s/oo47nj9mk9

_Originally posted by @dimensi in https://github.com/facebook/react/pull/14596#issuecomment-466023638_"
,,,https://github.com/facebook/react/issues/14811,14811,unmount an empty component is breaking with ReactDOM portals,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,False,,21,2019-02-10T11:11:20Z,2020-10-22T03:27:16Z,2019-02-11T18:37:54Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?** Bug

**What is the current behavior?** When unmounting a component that has a child being rendered under a different parent (with portals), react is throwing an error

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem:**

https://codesandbox.io/s/73n31lwpjx

**What is the expected behavior?**

Component should unmount normally

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.8.1
Issue also happens with 16.7.0 (https://codesandbox.io/s/oxmpxmllvy)

The issue is only happening under very strict conditions:
- The component being rendered with ReactDOM Portals (Modal) should not render any HTML
- The parent component (Panel) should render Modal as the first component under <React.Fragment>

Avoiding this is as simple as moving Modal under some other HTML. I'm not entirely sure this is an issue or I'm just doing something wrong with Fragment and portals.

The actual error being thrown is:
`react-dom.development.js:9254 Uncaught DOMException: Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.`"
,,,https://github.com/facebook/react/issues/14975,14975,componentDidUpdate (and componentDidMount) before the updates ref,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,8,2019-02-28T11:44:03Z,2020-04-17T01:46:21Z,2020-04-17T01:46:21Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
componentDidUpdate (and componentDidMount) before the updates ref

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
https://codepen.io/anon/pen/eXpENK?editors=0011

**What is the expected behavior?**
componentDidUpdate  (and componentDidMount) after ref update

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
browser. last version"
,,,https://github.com/facebook/react/issues/14822,14822,XSS is doubly escaping when using SSR and `ReactDOM.hydrate`,[],closed,False,,5,2019-02-11T17:29:05Z,2019-02-12T17:26:12Z,2019-02-12T17:10:06Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
I'd like to preface this by saying I have read all of the existing documentation on XSS and methods to avoid strings being escaped. The behavior here cannot be adequately addressed with the current suggestions.

HTML that is escaped in SSR using `ReactDOMServer.renderToString` are escaped a second time on the client using `ReactDOM.hydrate`. This results in entities like `&` being displayed as `&amp;` after being escaped once on the server and a second time on the client.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
1. Have a component that renders a string containing `&`, such as inside a span or p.
2. Render the page using ReactDOMServer in node.js, and then use `ReactDOM.hydrate` on the client. Do NOT do anything that will trigger a re-render of the page.
3. See that the ampersand has been doubly escaped and appears to the user like `&amp;`.

Difficult to set up a live example with SSR. I am happy to send a private link to a live site that is experiencing the issue.

**What is the expected behavior?**
Ideally I would expect the `ReactDOM.hydrate` method to detect when entities like `&` are already escape and not do it again.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 16.7.0
OS: OSX Chrome
"
,,,https://github.com/facebook/react/issues/14915,14915,Images dont render,[],closed,False,,2,2019-02-21T17:12:33Z,2019-02-21T17:31:11Z,2019-02-21T17:26:11Z,NONE,completed,,"Hi, i have a bug,
Basically this is my code ( excluding import react etc)
 `<img  src=""./img/aa.png"" alt="""" />`

And the image doesnt get rendered. In browser, react dev tools it show the image is 1366x0px.
There are no errors in the console.
I tried making new crate-react-app, udsing different images, using <image> instead of <img> and none of these worked...

I apologise for my english"
,,,https://github.com/facebook/react/issues/14843,14843,Warning: Did not expect server HTML to contain a <ul> in <div>,"[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":710332294,""node_id"":""MDU6TGFiZWw3MTAzMzIyOTQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering"",""name"":""Component: Server Rendering"",""color"":""d4c5f9"",""default"":false,""description"":null},{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,False,,12,2019-02-14T01:34:31Z,2020-01-16T17:05:34Z,2020-01-16T17:05:34Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug
**What is the current behavior?**
I'm using Server Side rendering with `react-loadable` and my home page see this in the browser.  The warning test to be a bit different on other pages, but still seems to happen generally.  My app is using Grommet in case that matters...

When the page renders I see the following in the console:
```
Warning: Did not expect server HTML to contain a <ul> in <div>.

warningWithoutStack | @ | react-dom.development.js:506
-- | -- | --
  | warnForDeletedHydratableElement | @ | react-dom.development.js:8254
  | didNotHydrateInstance | @ | react-dom.development.js:8960
  | deleteHydratableInstance | @ | react-dom.development.js:13964
  | popHydrationState | @ | react-dom.development.js:14183
  | completeWork | @ | react-dom.development.js:15801
  | completeUnitOfWork | @ | react-dom.development.js:17981
  | performUnitOfWork | @ | react-dom.development.js:18179
  | workLoop | @ | react-dom.development.js:18191
  | renderRoot | @ | react-dom.development.js:18277
  | performWorkOnRoot | @ | react-dom.development.js:19166
  | performWork | @ | react-dom.development.js:19078
  | performSyncWork | @ | react-dom.development.js:19052
  | requestWork | @ | react-dom.development.js:18921
  | scheduleWork | @ | react-dom.development.js:18730
  | scheduleRootUpdate | @ | react-dom.development.js:19398
  | updateContainerAtExpirationTime | @ | react-dom.development.js:19426
  | updateContainer | @ | react-dom.development.js:19483
  | ReactRoot.render | @ | react-dom.development.js:19775
  | (anonymous) | @ | react-dom.development.js:19915
  | unbatchedUpdates | @ | react-dom.development.js:19281
  | legacyRenderSubtreeIntoContainer | @ | react-dom.development.js:19911
  | hydrate | @ | react-dom.development.js:19969
  | (anonymous) | @ | client.js:52
  | Promise.then (async) |   |  
  | renderApp | @ | client.js:51
  | (anonymous) | @ | client.js:60
  | (anonymous) | @ | client.js:90
  | ./src/client.js | @ | main.js:10934
  | __webpack_require__ | @ | main.js:767
  | fn | @ | main.js:130
  | (anonymous) | @ | client.js:4
  | 0 | @ | main.js:11473
  | __webpack_require__ | @ | main.js:767
  | (anonymous) | @ | main.js:902
  | (anonymous) | @ | main.js:905
```
The html captured on the server was as follows:
```
<div lang=""en-US"" class=""grommet grommetux-app grommetux-app--centered""><div class=""grommetux-header__container grommetux-header__container--fixed grommetux-header__container--fill""><div class=""grommetux-header__mirror""></div><div class=""grommetux-header__wrapper grommetux-header__wrapper--small""><div class=""grommetux-box grommetux-box--direction-column grommetux-box--responsive grommetux-box--pad-none grommetux-box--flex-off""><header class=""grommetux-box grommetux-box--direction-row grommetux-box--align-center grommetux-box--pad-horizontal-none grommetux-box--pad-vertical-none grommetux-box--pad-between-small grommetux-header grommetux-header--small header""><div class=""grommetux-box grommetux-box--direction-column grommetux-box--responsive grommetux-box--pad-none grommetux-menu grommetux-menu--column grommetux-menu--small grommetux-menu--controlled grommetux-menu__control""><button type=""button"" class=""grommetux-button grommetux-button--plain"" aria-label=""Open  Menu""><span class=""grommetux-button__icon""><svg version=""1.1"" viewBox=""0 0 24 24"" width=""24px"" height=""24px"" role=""img"" class=""grommetux-control-icon grommetux-control-icon-menu grommetux-control-icon--responsive"" aria-label=""menu""><path fill=""none"" stroke=""#000"" stroke-width=""2"" d=""M2,19 L22,19 M2,5 L22,5 M2,12 L22,12""></path></svg></span></button></div><div class=""grommetux-box grommetux-box--direction-row grommetux-box--justify-start grommetux-box--align-center grommetux-box--flex-grow grommetux-box--pad-none grommetux-box--size-small grommetux-box--size grommetux-title grommetux-title--responsive grommetux-title--truncate""><a href=""/"" class=""grommetux-anchor link link-white"">Zipongo Admin Tool</a></div></header></div></div></div><div class=""grommetux-box grommetux-box--direction-column grommetux-box--responsive grommetux-box--pad-small""><ul class=""home-container small-block-grid-1 medium-block-grid-3 large-block-grid-5 text-center""><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/cafes"">Cafe home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/cms"">CMS home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/daily-emails"">Daily email home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/easy-meals"">Easy meals</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/foodscripts/plan"">Foodscripts plan</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/household-invites/custom-text"">Household custom text</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/mobile-push"">Mobile push</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/partner-events"">Partner events</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/orderwell-data"">Orderwell data</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/tools"">Tools home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/user"">User home</a></li></ul></div><span style=""display:none""></span><div class=""grommetux-app__announcer"" aria-live=""polite""></div></div>
```
 I went in and added some debug logging in `warnForDeletedHydratableElement()` to output the `parentNode` and `child`, as follows:

```
parentNode:
<div class=""grommetux-box grommetux-box--direction-column grommetux-box--responsive grommetux-box--pad-small""><ul class=""home-container small-block-grid-1 medium-block-grid-3 large-block-grid-5 text-center""><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/cafes"">Cafe home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/cms"">CMS home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/daily-emails"">Daily email home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/easy-meals"">Easy meals</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/foodscripts/plan"">Foodscripts plan</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/household-invites/custom-text"">Household custom text</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/mobile-push"">Mobile push</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/partner-events"">Partner events</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/orderwell-data"">Orderwell data</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/tools"">Tools home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/user"">User home</a></li></ul></div>
```
```
child:
<ul class=""home-container small-block-grid-1 medium-block-grid-3 large-block-grid-5 text-center""><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/cafes"">Cafe home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/cms"">CMS home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/daily-emails"">Daily email home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/easy-meals"">Easy meals</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/foodscripts/plan"">Foodscripts plan</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/household-invites/custom-text"">Household custom text</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/mobile-push"">Mobile push</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/partner-events"">Partner events</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/orderwell-data"">Orderwell data</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/tools"">Tools home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/user"">User home</a></li></ul>
```
It was then I noticed something suspicious... in the browser inspector `parentNode` had a little bit different HTML than the server because the browser added `::before` and `::after` pseudo elements into the DOM of the `ul` as is noticeable in a screenshot I attached below.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
I'm not in a place to be able to boil this down to a simple test case at this time, but at least it would be interesting to know if these pseudo elements in the DOM would break the hydration code?

**What is the expected behavior?**
That my hydrate doesn't fail because of these pseudo elements (it thats what it is)

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Not sure, but it definitely happened with 16.7.0 and continues with 16.8.1
"
,,,https://github.com/facebook/react/issues/14858,14858,`react-dom/server.renderStaticMarkup()` returns empty string server-side,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,7,2019-02-15T01:07:34Z,2019-02-16T14:30:53Z,2019-02-16T14:30:53Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

**bug**

**What is the current behavior?**

I'm trying to extract the initial HTML from react code on the server side. To do this, I'm using the official react-dom/server library function `renderToStaticMarkup()` referenced here: https://reactjs.org/docs/react-dom-server.html#rendertostaticmarkup

I'm reading a react source file, transpiling the JSX and ES6 syntax to CommonJS using Babel and then parsing the evaluated CommonJS to `renderToStaticMarkup()`.

## React code:
```jsx
import React from 'react';

class Test extends React.Component {
    render() {
        return <p>Hello World!</p>;
    }
}

export default Test;
```

## Server-side code:
```javascript
const { renderToStaticMarkup } = require( 'react-dom/server');
const Babel = require( '@babel/core' );
const Fsp = require( 'fs' ).promises;

(async () => {
    let fileContent = await Fsp.readFile( 'test.js', 'utf-8' );

    let code = Babel.transform( 
        fileContent, 
        { 
            presets: [ '@babel/preset-env', '@babel/preset-react' ],
            comments: false,
            minified: true
        }).code;

    let result = renderToStaticMarkup( code );

    console.log( result );
})();
```

## package.json:
```json
{
  ""dependencies"": {
    ""@babel/core"": ""^7.3.3"",
    ""@babel/preset-env"": ""^7.3.1"",
    ""@babel/preset-react"": ""^7.0.0"",
    ""react"": ""^16.8.2"",
    ""react-dom"": ""^16.8.2""
  }
}
```

**What is the output?**
`&quot;use strict&quot;;Object.defineProperty(exports,&quot;__esModule&quot;,{value:true});exports.default=void 0;var _re act=_interopRequireDefault(require(""react""));function...`

**What is the expected output?**
`<p>Hello World!</p>`


**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
```json
""react"": ""^16.8.2"",
""react-dom"": ""^16.8.2""
```"
,,,https://github.com/facebook/react/issues/14866,14866,Unexpected additional render using Hooks,[],closed,False,,3,2019-02-15T20:53:45Z,2019-02-16T14:26:36Z,2019-02-16T14:26:36Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
Component is rendered one more additional time than expected.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

Demo here:

https://codesandbox.io/s/v380wrp205


**What is the expected behavior?**
Note the console.log on line 6 in the demo. The behavior I expected would be a maximum of two logs:

re-rendered 0
re-rendered 1

The first log is for the initial render and the second log is for the re-render when the button is clicked. Any additional clicks would be ignored because it bails out of updates if the value between renders are the same (according to https://reactjs.org/docs/hooks-reference.html#bailing-out-of-a-state-update).

Here is the actual behavior:

re-rendered 0
re-rendered 1
re-rendered 1

Clicking the button again after the first click causes another re-render, but why? The value hasn't changed since the previous render.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.8"
,,,https://github.com/facebook/react/issues/14774,14774,Warning for `act` even when code is wrapped inside it,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,8,2019-02-06T17:21:12Z,2019-04-09T13:16:39Z,2019-02-18T20:59:44Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Report a bug

**What is the current behavior?**

`react-test-renderer` emits a warning to wrap code inside `act` even though it is.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

Here is a [CodeSandbox](https://codesandbox.io/s/wwopxr137k?expanddevtools=1&previewwindow=tests) with a component using `useState` that toggles a div on/off on a button click. The test finds the button, calls the `onClick` on the props. This would be followed by a snapshot test. However, no matter how I try and wrap the code in `act`, the warning persists.

Make sure to open the tests tab on the right, and to expand the console at the bottom:

![image](https://user-images.githubusercontent.com/433409/52360399-ac50bf00-2a1a-11e9-9cf1-ba34b642102f.png)


**What is the expected behavior?**

There should be no warning.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

react@16.8
react-dom@16.8
react-test-renderer@16.8
jest@24.1.0

This worked fine with react*@16.7.0-alpha.2, snapshot and all."
,,,https://github.com/facebook/react/issues/14895,14895,Cannot is possible use the same component with React.lazy in multiple entry,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,4,2019-02-20T12:29:47Z,2019-02-20T17:51:43Z,2019-02-20T17:51:43Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
🐛 Bug Report

**What is the current behavior?**
I have multiple entries on my webpack, like bellow:
```
...
entry: {
  page1: 'javascripts/page.one',
  page2: 'javascript/page.two'
}
...
```

If I used:

```
const Component1 = React.lazy(()=> import('components/Component1'));
```

only on entry **page1** work fine. But if I try use in entries **page1 and page2**, work on development mode but when I compiled to production trow a error:

```

TypeError: n.e is not a function
    at react-dom.production.min.js:132
    at ha (react-dom.production.min.js:170)
    at qa (react-dom.production.min.js:204)
    at $a (react-dom.production.min.js:205)
    at Ii (react-dom.production.min.js:220)
    at Mi (react-dom.production.min.js:219)
    at Di (react-dom.production.min.js:216)
    at ei (react-dom.production.min.js:214)
    at Ui (react-dom.production.min.js:233)

```
**What is the expected behavior?**
I would like to get use React.lazy with the same component in multiples entries

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
""react"": ""16.6.1""
""react-dom"": ""16.6.1""

To test I updated to 16.8.0 and continue happening

I'm sure if is a problem with React or Webpack, if someone have some idea, pls help me
"
,,,https://github.com/facebook/react/issues/14861,14861,Cannot type Chinese  in `<input />`  under controlled mode + ReactDom 16.8.2,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,13,2019-02-15T13:23:25Z,2019-02-21T18:31:53Z,2019-02-21T18:31:53Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
Cannot type Chinese  in `<input />`  under controlled mode when using react-dom 16.8.2 via CND

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://jsfiddle.net/youluna/egz9Lvrp/36/
1. Switch IME(input method editor) into Chinese
2. try type any letters, you can only get English letters but not Chinese characters
![image](https://user-images.githubusercontent.com/10049465/52859396-8be5da80-3167-11e9-96ac-95caa4e7f5a7.png)

**What is the expected behavior?**
Can type Chinese characters
![image](https://user-images.githubusercontent.com/10049465/52859361-740e5680-3167-11e9-8a7c-6e28d7650b4e.png)

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Not worked in react-dom 16.8.2 
But worked well in react-dom 16.8.1 

related https://github.com/alibaba-fusion/next/issues/324

update:
It's wired that use React as a <script> tag from a CDN doesn't work, but as a react package on npm worked well. Both are version 16.8.2
1. CDN: https://jsfiddle.net/youluna/6o3rhg7u/1/
2. npm: https://codesandbox.io/s/xp15m8woww"
,,,https://github.com/facebook/react/issues/14887,14887,Hooks not available in some parts of my component tree,[],closed,False,,2,2019-02-19T13:36:37Z,2019-02-20T06:59:47Z,2019-02-19T14:29:35Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
The use of useContext() at a certain level up in the component tree seems to be broken somehow. I'm able to do the approach in other components, but for my main <App> component, the context values are not available. The app is based on create-react-app, using Typescript.

**NOTE: To toggle the functionality of the menu, please simulate screen sizes of a mobile device**
Please note the comments on useContext not working properly in App.tsx, and how I demonstrate the a working context in Header.tsx.
Here's the working codesandbox: https://codesandbox.io/s/4rl53m496x

**What is the expected behavior?**
Expect to be able to use the hook in App.tsx, the same way it's used in Header.tsx

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
```
    ""typescript"": ""^3.3.3""
    ""react"": ""^16.8.2"",
    ""react-dom"": ""^16.8.2"",
    ""react-scripts"": ""^2.1.5"",
    ""@types/react"": ""16.7.18"",
    ""@types/react-dom"": ""16.0.11"",
```


"
,,,https://github.com/facebook/react/issues/15265,15265,About Json object render error,[],closed,False,,5,2019-03-30T01:42:55Z,2019-04-03T14:56:22Z,2019-04-03T14:56:22Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

I got the Json data form backend , I use the react-json-view to see it. it works

![image](https://user-images.githubusercontent.com/22393849/55269313-d614bc80-52cc-11e9-9b47-de175630f6c2.png)
the data is like this
```js
temp = {

        bookid: data[index].chapterid.bookid,
        chaptername: data[index].chapterid.chaptername,
        author: author,
        datetime: data[index].datetime,
        content: data[index].content
      };
```
but when I want to render the first chapter,it failed

And the code is :
```js
render() {
    return (
        <div>
          <DirectoryList data={this.state.directory}/>
          <ReactJSON src={this.state.contents}/>
         {/*above is ok */}
          {this.state.contents[0].bookid} {/*it can't work when add this line*/}
        </div>
    );
  };
```
![image](https://user-images.githubusercontent.com/22393849/55269431-ebd6b180-52cd-11e9-904c-2296429a65b4.png) 

 I can't get the property from the data, even it actually existid in . Why?


React V 16.07
Chrome
Win10"
,,,https://github.com/facebook/react/issues/15203,15203, Promise.all(...).then(...).catch(...).finally is not a function,[],closed,False,,1,2019-03-24T15:09:14Z,2019-03-24T17:37:30Z,2019-03-24T17:37:30Z,NONE,completed,,"I've no idea why got .finally is not a function. event if i try require('es6-promise').polyfill() that still have the same problem.

![image](https://user-images.githubusercontent.com/25706979/54881303-8461d180-4e89-11e9-947e-8b9b64cab0e7.png)
"
,,,https://github.com/facebook/react/issues/15066,15066,What is the react-cache good for?,[],closed,False,,3,2019-03-08T14:16:48Z,2019-03-08T14:51:26Z,2019-03-08T14:18:11Z,NONE,completed,,"At the first sight it seems illogical. I'm glad you're caching like last 500 resources, but _Why_?
The browser itself caches everything anyway - that's why we have so many headers in HTTP.
How does the react-cache help?"
,,,https://github.com/facebook/react/issues/15057,15057,"setState in useEffect causing a ""React state update on an unmounted component"" warning","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,29,2019-03-07T23:17:45Z,2019-07-30T18:41:11Z,2019-07-30T18:41:11Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
The warning is triggered after an intricate sequence of events. I stumbled upon it by accident, assumed it was an error in my code, but then step by step removed everything in my application until I was left with a fairly small bit of code that doesn't seem to be doing anything illegal from the API point of view, yet is triggering a warning.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem:**

https://codesandbox.io/s/q87882qv64

The example is my real application code trimmed down as much as possible to demonstrate the warning. So some of the code might be a bit nonsensical/contrived, but that's because I removed lots of surrounding code leaving only the relevant bits for reproducing the issue.

In other words, there might weird looking uses of useEffect and weird sequencing of things, but that sort of falls out of how I've structured my routes, state, components in the full app, etc.

**What is the expected behavior?**

I would like to know if

a) is this a React bug that I stumbled upon that should be fixed?
b) is this something I'm doing ""wrong"" and how I could fix that in my application (i.e. is this a real memory leak being caused because of the way I structured the code)

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.8.4"
,,,https://github.com/facebook/react/issues/15162,15162,Wrong height calculation of re-render nodes,[],closed,False,,2,2019-03-20T07:28:08Z,2019-03-20T17:21:42Z,2019-03-20T13:19:04Z,NONE,completed,,"I have a problem with incorrect calculations of the container scroll height when adding new React nodes inside it.

Repro steps: 
1) open a pen (below)
2) scroll  down a bit
3) press ""Prepend"" button (to insert new element above)
Expected behavior: the parent container should not scroll when a new Dom element is inserted above.

**Correct behavior** (Jquery real-dom prepend) https://codepen.io/tomsoir/pen/LaJeYM
![2019-03-20 00 38 07](https://user-images.githubusercontent.com/301881/54666998-89e5a300-4aa8-11e9-835e-47f89854249f.gif)

**Incorrect behavior** (React virtual-dom prepend) https://codepen.io/tomsoir/pen/drqZWe
![2019-03-20 00 39 49](https://user-images.githubusercontent.com/301881/54667091-bac5d800-4aa8-11e9-9333-61063df6fda2.gif)

Do you have any ideas about how to fix this problem"
,,,https://github.com/facebook/react/issues/15054,15054,useImperativeHandle callback never called (when rendering w/ enzyme),"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,7,2019-03-07T19:34:32Z,2019-09-04T09:48:33Z,2019-09-04T09:48:33Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**

I have the code:

```
function Form(props, ref) {

  React.useImperativeHandle(ref, () => {
    debugger;
    return {
      setErrors: () => {},
    };
  });
}

export default React.forwardRef(Form);
```

When I use the component, the callback passed to `useImperativeHandle` is never called. (The debugger statement is never hit).

The code that I have using the component is:

```
import {mount} from 'enzyme';

describe('Form component', () => {
  test('exposes a ref', async () => {
    let formRef;
    mount(<Form ref={ref => (formRef = ref)}>{() => <span>test</span>}</Form>);
    await pause(500); // this is just a setTimeout to give time for the hooks to run.
    expect(formRef.setErrors).toBeDefined();
  });
```

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://codesandbox.io/s/v8rqy75mn5

**What is the expected behavior?**

Callback should be called and returned value should be used as the ref.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

```
    ""react"": ""16.8.0-alpha.1"",
    ""react-dom"": ""16.8.0-alpha.1"",
    ""enzyme"": ""3.8.0"",
    ""enzyme-adapter-react-16"": ""1.8.0"",
```
"
,,,https://github.com/facebook/react/issues/15056,15056,Controlled contentEditable element contents not updated when state changes,[],closed,False,,0,2019-03-07T20:50:31Z,2019-03-07T20:55:03Z,2019-03-07T20:55:02Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
An element with contentEditable does not update the content when state updates.

Reproduce:
https://codesandbox.io/s/kk421m2jmr
1. Type something in the contentEditable div.
2. Click reset
3. Expected div to contain ""TEXT RESET!""

**Which versions of React
16.8.4"
,,,https://github.com/facebook/react/issues/15017,15017,Use createRefs API for variable amount of elements,[],closed,False,,1,2019-03-05T14:45:46Z,2019-03-05T14:55:51Z,2019-03-05T14:55:51Z,NONE,completed,,"Hi guys,

I want to report an improvement or a missing documented guidance (if there is already a solution to this problem). I couldn't find a solution so far by looking in the docs or other issues. The only related link to this problem might be this one where the solution is a hacky workaround which does not work for dynamic defined arrays: https://dev.to/ajsharp/-an-array-of-react-refs-pnf

*The actual problem:*
Before the new `createRef` API it was possible to create a map with the shape `{[id]: ref}`. In my render function I was able to to spawn a list of elements and store their reference in this map. For the new way of defining references I need to generate the ""storage"" for references in advance (in the constructor). Since my elements are defined and changed by props I would need to regenerate this collection of references each time before they are actually rendered. Since ""componentWillUpdate"" is deprecated I don't have a chance to recreate those references and link them in my render functions.

For more clarification on my problem here is a short example how this could work right now with componentWillUpdate: https://jsfiddle.net/zqxw6Lg4/3/

I need those references because I want to scroll specific components in this list afterwards.

Versions:
- react: ""16.6.3""
- react-dom: ""16.6.3""


Greetings,
Thomas
"
,,,https://github.com/facebook/react/issues/15074,15074,React.StrictMode combined with useState causes component to render twice,[],closed,False,,22,2019-03-09T15:57:06Z,2022-04-16T13:41:25Z,2019-03-09T16:25:19Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug (maybe)

**What is the current behavior?**
If wrapped in React.StrictMode and a function component contains a call to `useState`, the function (render) is called twice - even if the state setter is never called.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**
https://codesandbox.io/s/lyw9514j4q
(please see console)

**What is the expected behavior?**
I would expect it to only render once.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.8.3 in Chrome on macOS Mojave; requires hooks so not tested with previous versions.

This may be related to https://github.com/facebook/react/issues/12961 - but note that nowhere am I setting state (only initializing it).

If this is expected behavior please feel free to close. Thank you!"
,,,https://github.com/facebook/react/issues/15097,15097,[lerna] Invariant Violation: Hooks can only be called inside the body of a function component.,[],closed,False,,20,2019-03-13T10:21:56Z,2022-07-20T10:26:28Z,2019-03-14T15:23:15Z,NONE,completed,,"Hello,

I have an error regarding hooks in a lerna architecture project where we import a ux lib made of style component inside a react project.
If component are host in the same app, error is not thrown.

**Do you want to request a *feature* or report a *bug*?**
Report a bug

**What is the current behavior?**

An error is thrown:
```
Invariant Violation: Hooks can only be called inside the body of a function component. (https://fb.me/react-invalid-hook-call)
    at invariant (http://localhost/static/js/main.chunk.js:121537:23)
    at resolveDispatcher (http://localhost/static/js/main.chunk.js:122922:36)
    at useRef (http://localhost/static/js/main.chunk.js:122956:28)
    at useStateWithGetter (http://localhost/static/js/main.chunk.js:39121:71)
    at useField (http://localhost/static/js/main.chunk.js:39161:35)
    at http://localhost/static/js/main.chunk.js:39417:27
    at renderWithHooks (http://localhost/static/js/0.chunk.js:70682:22)
    at mountIndeterminateComponent (http://localhost/static/js/0.chunk.js:72686:17)
    at beginWork (http://localhost/static/js/0.chunk.js:73237:20)
    at performUnitOfWork (http://localhost/static/js/0.chunk.js:77166:16)
    at workLoop (http://localhost/static/js/0.chunk.js:77207:28)
    at renderRoot (http://localhost/static/js/0.chunk.js:77287:11)
    at performWorkOnRoot (http://localhost/static/js/0.chunk.js:78232:11)
    at performWork (http://localhost/static/js/0.chunk.js:78142:11)
    at performSyncWork (http://localhost/static/js/0.chunk.js:78116:7)
    at requestWork (http://localhost/static/js/0.chunk.js:77971:9)
    at scheduleWork (http://localhost/static/js/0.chunk.js:77778:9)
    at scheduleRootUpdate (http://localhost/static/js/0.chunk.js:78482:7)
    at updateContainerAtExpirationTime (http://localhost/static/js/0.chunk.js:78508:14)
    at updateContainer (http://localhost/static/js/0.chunk.js:78576:14)
    at ReactRoot.push../node_modules/react-dom/cjs/react-dom.development.js.ReactRoot.render (http://localhost/static/js/0.chunk.js:78889:7)
    at http://localhost/static/js/0.chunk.js:79041:18
    at unbatchedUpdates (http://localhost/static/js/0.chunk.js:78359:14)
    at legacyRenderSubtreeIntoContainer (http://localhost/static/js/0.chunk.js:79037:9)
    at Object.render (http://localhost/static/js/0.chunk.js:79112:16)
    at boot (http://localhost/static/js/main.chunk.js:207505:52)
    at http://localhost/static/js/main.chunk.js:207517:10
```

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
Use this [public repo](https://github.com/ppinel/test-informed-hooks) and follow the readme.
It's a good representation of our project's architecture.
You will experience the error.

**What is the expected behavior?**
Not throwing an error about hooks and displaying a working form.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Well, didn't tested before 16.8.0. But using [react-form](https://github.com/react-tools/react-form) instead of [informed](https://github.com/joepuzzo/informed) works.
An [issue](https://github.com/joepuzzo/informed/issues/167) has been open on informed repository.
II have the feeling that it's more related to React than informed itself.

I am aware of [this page](https://reactjs.org/warnings/invalid-hook-call-warning.html) but nothing worked."
,,,https://github.com/facebook/react/issues/15236,15236,How test componentDidUpdate lifecycle method with test-renderer?,[],closed,False,,12,2019-03-28T08:10:31Z,2019-04-03T15:05:31Z,2019-04-03T15:05:31Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
"
,,,https://github.com/facebook/react/issues/15015,15015,Question about React.Children,[],closed,False,,4,2019-03-05T04:41:36Z,2019-03-05T09:04:33Z,2019-03-05T07:34:39Z,NONE,completed,,"Why use `React.Children` to manipulate children? why not `children.map`, `children.forEach` and so on?"
,,,https://github.com/facebook/react/issues/15233,15233,When state is not updated setState callback should not be invoked,[],closed,False,,5,2019-03-28T07:02:39Z,2019-04-03T15:11:22Z,2019-04-03T15:11:22Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Feature

**What is the current behavior?**
When null is returned in setState updater, callback is invoked.
`
this.setState((prevState) => null, callback);
`
Example (see console):
https://stackblitz.com/edit/set-state-callback

**What is the expected behavior?**
When state is not updated callback should not be invoked.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
^16.0.0

What do you think about it? First of all we can consider callback what invokes after every setState. On the other side we can consider it as callback invoked only after state change. In my opinion second option is more handy because if I want to invoke callback with some job, I usually need to do something when state changed."
,,,https://github.com/facebook/react/issues/15165,15165,getDerivedStateFromError doesn't play nice with redux,[],closed,False,,2,2019-03-20T14:34:42Z,2019-03-21T12:12:01Z,2019-03-21T12:12:01Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
I think it's a question, but this could be a bug. 

**What is the current behavior?**

I'm using redux, so state mutations aren't done. Everything comes in on props.
If you implement an ErrorBoundary using redux, you can get pretty far until you start getting the warning: ""Warning: ErrorBoundary: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.""

As soon as I implement this method it stops calling componentDidCatch. I don't want to use the derived version since that expects me to use state. 

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

I can't post my code but if this sounds valid I will make a code pen example. I'm very new to react/redux. 

**What is the expected behavior?**

Why do I have to implement both? It seems like having to use state isn't considering redux apps. 
I would expect implementing one or the other is fine, or to be able to return null from the derived version. 

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
"
,,,https://github.com/facebook/react/issues/15291,15291,useState hook not updating (onPanResponderRelease),[],closed,False,,4,2019-04-01T23:13:16Z,2019-10-03T15:16:20Z,2019-04-03T14:54:00Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?** Bug.

**What is the current behavior?**
![image](https://user-images.githubusercontent.com/29601050/55361950-7a456180-548d-11e9-98dd-3ffb0409754a.png)

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem:**

* [Repo](https://github.com/English3000/Elixir/tree/refactor/bottom-up/functional_design/islands)
```bash
git clone https://github.com/English3000/Elixir.git
cd Elixir/functional_design/islands
git checkout refactor/bottom-up
cd apps/islands_interface/assets && npm i
cd ../../.. && mix phx.server
```
> Go to `localhost:4000` && join a game
* [`Island` w/ Hooks](https://github.com/English3000/Elixir/blob/refactor/bottom-up/functional_design/islands/apps/islands_interface/assets/js/components/Island.tsx#L47)  
  * already tried w/o `useEffect`

**What is the expected behavior?** 
`onBoard` state hook updates value.

Logic works [w/o hooks](https://github.com/English3000/Elixir/blob/refactor/bottom-up/functional_design/islands/apps/islands_interface/assets/js/components/Island_.tsx#L56):
![image](https://user-images.githubusercontent.com/29601050/55361783-1458da00-548d-11e9-9ff1-4e0d28913951.png)


**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
* **React version:** `""^16.8.4""`... then tried `""^16.8.6""`
* **Browser:** Mozilla
* **OS:** Mac Mojave"
,,,https://github.com/facebook/react/issues/15513,15513,Allow ReactNode as a type for the child of <option/>,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,17,2019-04-26T16:51:51Z,2021-06-10T14:24:58Z,2020-04-17T01:46:25Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Feature

**What is the current behavior?**
Currently, the options element only allows types number and string. 

**What is the expected behavior?**
An option should allow for a ReactNode as a child in addition to a number + string. 

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
All versions.
All browser types.
To the best of my knowledge, no.

p.s. This is my first feature request here, so let me know if I need to adjust the feature request in any way. "
,,,https://github.com/facebook/react/issues/15470,15470,"[Warning] Security vulnerability in 'tar' package, with the latest version","[{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,False,,1,2019-04-22T04:48:44Z,2019-04-23T12:22:03Z,2019-04-23T12:21:54Z,NONE,completed,,"**React version**: 16.8.6
A security Vulnerability is shown when is compiling.

**Steps to reproduce it:**
- Update the project to the latest version 16.8.6
- run the `npm start`
- Run `npm audit` and verify that the project is throwing a security issue inside
![image](https://user-images.githubusercontent.com/36707032/56483346-6773ea80-6497-11e9-8f53-4532dfd56a76.png)

**Package file**
![image](https://user-images.githubusercontent.com/36707032/56483363-8ffbe480-6497-11e9-9a53-ede160a6c29a.png)

"
,,,https://github.com/facebook/react/issues/15527,15527,Apparent memory leak using hooks,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,8,2019-04-29T13:15:32Z,2021-12-08T07:56:44Z,2020-01-16T20:59:43Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Maybe a bug. Maybe I'm just running into a weird edge case.

**What is the current behavior?**

I have a situation where using a combination of `useEffect`, `useCallback`, and having a function in the actual component render is causing a sort of memory leak.
The current render of the component seems to hang on to references of past renders of the component. (more details in the reproduction sample repo)

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**

I think I have this minimized about as much as I can:
https://github.com/rally25rs/react-mem

It's a basic `create-react-app` project, so you can just `yarn install && yarn start` it. There is some explanation/instructions in the web page that it renders.

The `src/VirtualizedTable.js` file is the key file to look at.

**What is the expected behavior?**

As best as my brain can comprehend, memoized references should be getting cleared as the component props change and data should be garbage collected (but it isn't).

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

* Chrome
* react@16.8.6
"
,,,https://github.com/facebook/react/issues/15285,15285,Hover module  experimental event API delay approach,[],closed,False,,3,2019-04-01T14:09:30Z,2019-04-01T16:05:59Z,2019-04-01T16:05:58Z,CONTRIBUTOR,completed,,"To implement `delayHoverStart` and `delayHoverEnd` there are many situations such as below:

**First**
When start delay timeout greater than or equal to the end delay timeout. no worries about this, because both of `mouseover` and `mouseout` events will be run perfectly.

**Second**
When start delay timeout less than end delay. In this situation, there are three options
   - We can clear start delay and JUST run end delay but we will lose `mouseover` event.
   - We can keep both of them but maybe `mouseout` event runs before `mouseover`
   - We can check by `end >= start` as always

I was wondering which one could be more useful."
,,,https://github.com/facebook/react/issues/15414,15414,useMemo in StrictMode,"[{""id"":40929153,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement"",""name"":""Type: Enhancement"",""color"":""84b6eb"",""default"":false,""description"":null},{""id"":1109410193,""node_id"":""MDU6TGFiZWwxMTA5NDEwMTkz"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Hooks"",""name"":""Component: Hooks"",""color"":""c2f27b"",""default"":false,""description"":""""}]",closed,False,,1,2019-04-14T22:27:51Z,2019-10-29T12:25:08Z,2019-10-29T12:25:08Z,COLLABORATOR,completed,,"**Do you want to request a *feature* or report a *bug*?**
*feature*

**What is the current behavior?**
> Write your code so that it still works without useMemo

-- https://reactjs.org/docs/hooks-reference.html#usememo

I can try writing my code with this in mind but it would be very helpful if React could try to help spot issues.

**What is the expected behavior?**

StrictMode can already help us detect side-effects in render by calling it twice. It also helps detecting side-effects in `useMemo` by calling it twice if the dependencies change. However, there's no way to simulate a purge of the cache.

It might help calling the factory in StrictMode regardless of the dependencies (or only on the second render). Other approaches like `<StrictMode areMemoDependenciesEqual={...} />` would give more control to the user.

There's already a working solution by using some feature flag at build time e.g. `React.useMemo(factory, __STRICT__ ? undefined : [dependency])` but the linter can't work with that. Using `React.useMemo(factory, [dependency, PURGE_MEMO_CACHE.current])` would make it more controllable if we write e.g. test instructions but the linter complains about those too. I don't think we have a way to detect if React is between two render calls so that we can purge the cache by flipping `PURGE_MEMO_CACHE.current`

This is also somewhat opposite to #15278 because we want an API to opt-in to cache purging.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Future versions of React that might forget the dependencies.
"
,,,https://github.com/facebook/react/issues/15382,15382,[question] reference to a DOM element as a dependency to useEffect,[],closed,False,,2,2019-04-11T10:09:20Z,2019-04-12T08:04:00Z,2019-04-12T08:04:00Z,NONE,completed,,"I have a third-party library that can only work with DOM via an `id` property:

```js
let editor = new Editor({ id: 'my-editor' })
```

My initial thought was to do something like:

```jsx
let Component = () => {
  let ref = useRef()
  let editorRef = useRef()
  let { current: div } = ref

  useEffect(() => {
    if (div) {
      editorRef.current = new Editor({
        id: 'my-editor'
      })
    }
  }, [ div ])


  return (
    <div ref={ref} id='my-editor' />
  )
}
```

But the component isn't rerendered when `ref.current` is changed, so I've looked up an approach using `useState` (like here https://github.com/thebuilder/react-intersection-observer/blob/master/src/useInView.tsx):

```jsx
let Component = () => {
  let [ div, setDiv ] = useState()
  let editorRef = useRef()

  useEffect(() => {
    if (div) {
      editorRef.current = new Editor({
        id: 'my-editor'
      })
    }
  }, [ div ])


  return (
    <div ref={setDiv} id='my-editor' />
  )
}
```

Is it a valid approach for solving this task or am I missing something? Thanks."
,,,https://github.com/facebook/react/issues/15360,15360,Support `useState` style lazy state initialization in `useReducer`,[],closed,False,,1,2019-04-09T16:20:05Z,2019-04-09T21:30:26Z,2019-04-09T21:30:26Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Feature

**What is the current behavior?**

Signatures of `useState` and `useReducer` for lazy state initialization are different and not consistent.

- signature of `useState`
```ts
function useState<S>(initialState: () => S)
```

- signature of `useReducer`
```ts
function useReducer<S, I, A>(
  reducer: (S, A) => S,
  initialArg: I,
  init: I => S,
)
```

**What is the expected behavior?**

Support below signature of `useReducer` for lazy initialization.

```ts
function useReducer<S, A>(
  reducer: (S, A) => S, 
  initialState: () => S
)
```

This will allow lazy initializations like this.

```js
// Lazy initialization example in https://reactjs.org/docs/hooks-reference.html#usereducer 
// will be
function Counter({initialCount}) {
  // previously
  // `const [state, dispatch] = useReducer(reducer, initialCount, init);`
  const [state, dispatch] = useReducer(reducer, () => init(initialCount));
  // ...
}

// To get initial state from `reducer` (redux style)
// `useReducer(reducer, undefined, reducer)` will be
const [state, dispatch] = useReducer(reducer, reducer);
```

**Which versions of React, and which browser / OS are affected by this issue?**

16.8"
,,,https://github.com/facebook/react/issues/15467,15467,lazy suspend ref props not changing,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":1109407645,""node_id"":""MDU6TGFiZWwxMTA5NDA3NjQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Suspense"",""name"":""Component: Suspense"",""color"":""8ffcd6"",""default"":false,""description"":""""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,5,2019-04-21T08:15:56Z,2020-01-17T09:00:12Z,2020-01-17T09:00:12Z,NONE,completed,,"I am having a problem getting a new height from my outer component when the inner lazy components height changes. I am using getBoundingClientRect() to get height.

Everything works fine when I don't make the component lazy.

I have tryed waiting untill the component is fully loaded before getting the new height, but it still doesn't change the height."
,,,https://github.com/facebook/react/issues/15543,15543,Understanding `act` behaviour,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null},{""id"":139734344,""node_id"":""MDU6TGFiZWwxMzk3MzQzNDQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils"",""name"":""Component: Test Utils"",""color"":""eb6420"",""default"":false,""description"":null}]",closed,False,,6,2019-04-30T14:36:46Z,2019-09-04T11:28:22Z,2019-09-04T11:28:22Z,NONE,completed,," I have been trying to use `act` for the first time, and having some issues, and so I'm wondering if my expectations are wrong about what it is supposed to do, or if I am ""doing it wrong"".

**What is the current behavior?**

The only way I can observe the results of state changes I initiate is by using a timeout.

**Paste the link to your JSFiddle or CodeSandbox example below:**

https://codesandbox.io/s/k5zmln6w83?expanddevtools=1&fontsize=14&hidenavigation=1

**What is the expected behavior?**

What I expect is that by wrapping a state change or render operation in `act`, all of the resulting state changes / side-effects / re-renders will be complete by the time `act` returns, so that the operation appears (or is coerced to be) synchronous. 

I created an example (https://codesandbox.io/s/k5zmln6w83?expanddevtools=1&fontsize=14&hidenavigation=1) wherein I render a view via `unstable_ConcurrentMode`. In the view, I create a `useState` hook with a value of `0`. After the view is rendered, I use that hook's setter to change its state to `1`.

Below is a log of the [steps I take](https://codesandbox.io/s/k5zmln6w83?expanddevtools=1&fontsize=14&hidenavigation=1), showing three values at each time: `seenByRender`, the last state-value that appeared within the render body; `calculated`, the last value returned from my state-update function; and `seenByEffect`, the last value observed from a `useEffect` I create in the view. 

```
1. before act/render:   seenByRender: null, calculated: null, seenByEffect: null
2. after act/render:    seenByRender: 0,    calculated: null, seenByEffect: 0
3. ---incrementing with act/setState---
4. after act/increment: seenByRender: 0,    calculated: 1,    seenByEffect: 0
5. after timeout:       seenByRender: 1,    calculated: 1,    seenByEffect: 1
```

What I am wanting/expecting is for step 4 to look like step 5, ie, I can somehow test the full consequences of my setState call.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.8.6, using unstable_ConcurrentMode
"
,,,https://github.com/facebook/react/issues/15675,15675,Create HostConfig handler for commitUnmount in react-reconciler,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,4,2019-05-16T23:14:43Z,2020-01-17T08:00:01Z,2020-01-17T08:00:01Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
I would like to request a new feature.

**What is the current behavior?**
At the moment there is no way to gain access to the fiber that is unmounting outside of the `onCommitFiberUnmount` hook in React DevTools. Would it be possible to create a new handler that you can pass in your host config that would tap into unmount commits?

```javascript
commitUnmount(node, internalInstanceHandler) {
  // can be a noop by default
}
```

This could be added [where the hook handler is already being called](https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberCommitWork.js#L739).

Please let me know if you would consider this. :smile_cat: "
,,,https://github.com/facebook/react/issues/15585,15585,Component ReactDOM travel,[],closed,False,,3,2019-05-08T12:47:36Z,2019-05-08T13:58:03Z,2019-05-08T13:58:02Z,NONE,completed,,"In React we don`t have a methods in component for tree travel. Needle methods for DOM travel

Need methods
- this.parent() - get access to parent state and methods, can be chained this.parent().parent()
- this.parents( ref || key || other ) - find parent by
- this.neighbourPrev() - get access to neighbour component previous in DOM
- this.neighbourNext() - get access to neighbour component next in DOM

About Motivation.
In native javascript we have simular methods for DOM travel, and in RealWorld we need this important methods for organize good application. 
"
,,,https://github.com/facebook/react/issues/15584,15584,Component additional methods,[],closed,False,,3,2019-05-08T12:36:38Z,2019-05-08T13:59:25Z,2019-05-08T13:02:56Z,NONE,completed,,"In React we don`t have a rich component activity methods. I want tell about self controlled methods for component.

Need methods
- this.mountComponent() - this method add component to DOM, and call from component instance
- this.unmountComponent() - this method remove component from DOM, and call from component instance

About Motivation.
We can remove component from DOM in Parent component, but need pass action (method) from parent to child, and in child component call method. It simple, but why required this steps?
Simple way add methods mountComponent and unmountComponent, this be great!
"
,,,https://github.com/facebook/react/issues/15774,15774,useCallback doesn't memoize callback in shallow renderer,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":204945357,""node_id"":""MDU6TGFiZWwyMDQ5NDUzNTc="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Shallow%20Renderer"",""name"":""Component: Shallow Renderer"",""color"":""eb6420"",""default"":false,""description"":null},{""id"":1109410193,""node_id"":""MDU6TGFiZWwxMTA5NDEwMTkz"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Hooks"",""name"":""Component: Hooks"",""color"":""c2f27b"",""default"":false,""description"":""""}]",closed,False,,8,2019-05-30T08:31:32Z,2020-03-18T11:18:54Z,2020-03-18T11:18:53Z,CONTRIBUTOR,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

bug

**What is the current behavior?**

In shallow renderer, The returned callback from `useCallback` is not the same one between two rerendering even though the dependencies are the same. But `useMemo` will work as expected.

For example, the following test won't work:

```js
    function SomeComponent() {
      const noop = React.useCallback(() => {}, []);

      return (
        <div onClick={noop} />
      );
    }

    const shallowRenderer = createRenderer();
    let firstResult = shallowRenderer.render(<SomeComponent />);
    let secondResult = shallowRenderer.render(<SomeComponent />);

    expect(firstResult).toEqual(secondResult);
```

If `useCallback` returned the same callback between two rendering (I think) the assertion should pass.

but the same (almost) logic will work with `useMemo`, in the shallow renderer test suite (See https://github.com/facebook/react/blob/master/packages/react-test-renderer/src/__tests__/ReactShallowRendererHooks-test.js#L273-L291).

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

I created a branch in https://github.com/chenesan/react/tree/usecallback-not-work-properly-in-shallow-renderer and you can run the failed shallow renderer test in https://github.com/chenesan/react/commit/b2dff28909247342cfcb9ced2fbe24a0f9ca08b7#diff-d9a78422c03941578ae9ba487e8132cb .

**What is the expected behavior?**

`useCallback` should return the memoized callback when the dependencies unchanged even in shallow renderer.

I tried to look into this and I found out that in shallow renderer `useCallback` just returns the original callback argument (See https://github.com/facebook/react/blob/master/packages/react-test-renderer/src/ReactShallowRenderer.js#L365-L371) but `useMemo` will compare the dependencies between rendering. I'm not sure if it's intended (So it's expected that `useCallback` will not memoize callback in shallow renderer). If it's triaged as a bug I'm glad to send a pr for this :)

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

react@16.8.6"
,,,https://github.com/facebook/react/issues/15582,15582,adding useVariable hook and use it to pass refs,[],closed,False,,1,2019-05-08T10:35:29Z,2019-05-08T12:41:03Z,2019-05-08T12:41:03Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?** feature

**What is the current behavior?**
I really love the structure returned by useState => [value, setValue], very clean!

So I wondered why not use this structure for refs?
We could add a hook called `useVariable` which returns [var, setVar] but does not update the current component on calling `setVar`.

Which could be polifilled with something like:
```
const useVariable = initialValue => {
  const ref = useRef([
    initialValue,
    param => {
      ref.current[0] = typeof param === ""function""
        ? param(ref.current[0])
        : param
}
  ]);
  return ref.current;
};
```

The array returned by useVariable could be passed to `<div ref={resultFromUseVariable}/>` Then we could get rid of accessing ref.current in our code.


"
,,,https://github.com/facebook/react/issues/15740,15740,"webview element: ""Warning: Received `true` for a non-boolean attribute `nodeintegration`.""",[],closed,False,,2,2019-05-26T15:38:14Z,2019-05-30T13:58:21Z,2019-05-30T13:58:21Z,NONE,completed,,"
**Do you want to request a *feature* or report a *bug*?**

bug

**What is the current behavior?**

I'm using TSX and Electron and using the <webview> element. 

I'm using <webview disablewebsecurity> and it's complaining that this isn't accepted.

This is a supported property.  It's also represented properly in the typescript types for this element.

```
    interface WebViewHTMLAttributes<T> extends HTMLAttributes<T> {
        allowFullScreen?: boolean;
        allowpopups?: boolean;
        autoFocus?: boolean;
        autosize?: boolean;
        blinkfeatures?: string;
        disableblinkfeatures?: string;
        disableguestresize?: boolean;
        disablewebsecurity?: boolean;
        guestinstance?: string;
        httpreferrer?: string;
        nodeintegration?: boolean;
        partition?: string;
        plugins?: boolean;
        preload?: string;
        src?: string;
        useragent?: string;
        webpreferences?: string;
    }
```

```
/home/burton/projects/polar-bookshelf/node_modules/react-dom/cjs/react-dom.development.js:506 Warning: Received `true` for a non-boolean attribute `disablewebsecurity`.

If you want to write it to the DOM, pass a string instead: disablewebsecurity=""true"" or disablewebsecurity={value.toString()}.
    in webview (created by TabBody)
    in TabBody (created by TabPanes)
    in div (created by TabPane)
    in TabPane (created by TabPanes)
    in div (created by TabContent)
    in TabContent (created by TabPanes)
    in TabPanes (created by TabNav)
    in div (created by TabNav)
    in TabNav (created by FakeTabbedBrowser)
    in div (created by FakeTabbedBrowser)
    in FakeTabbedBrowser (created by App)
    in div (created by App)
    in App
```
I just upgraded all my libs to:

 @types/react@16.8.18 @types/react-dom@16.8.4 react@16.8.6 react-dom@16.8.6 

**What is the expected behavior?**

The <webview> should get the attributes I specify.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

@types/react@16.8.18 @types/react-dom@16.8.4 react@16.8.6 react-dom@16.8.6 


... I'm dead in the water on this one so even a workaround would really be appreciated!

I think this is a React issue since its happening at runtime.  The compiler handles it just fine."
,,,https://github.com/facebook/react/issues/15777,15777,React can import thirdpart react component from cdn?,[],closed,False,,1,2019-05-30T11:38:26Z,2019-06-03T01:28:33Z,2019-06-03T01:28:33Z,NONE,completed,,"React can import third-part react component from cdn?
Like `import('https://domain.com/components/index.js')`"
,,,https://github.com/facebook/react/issues/15764,15764,DevTools in production environment ,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,3,2019-05-29T17:56:31Z,2019-07-29T23:36:25Z,2019-07-29T23:34:53Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->
![2019-05-29_13-00](https://user-images.githubusercontent.com/33522235/58580030-d3254200-8211-11e9-882d-85da2664a3b2.png)


**Do you want to request a *feature* or report a *bug*?**
I think the production environment, React Devtools you should not show any information about the state or components. similar to redux Devtools. 
**What is the current behavior?**
Just now I can Edit some information with React DevTools in the production environment

"
,,,https://github.com/facebook/react/issues/15680,15680,Can we simplify type annotation in line 364?,[],closed,False,,1,2019-05-20T05:01:29Z,2019-05-20T12:08:09Z,2019-05-20T12:08:09Z,NONE,completed,,"https://github.com/facebook/react/blob/31487dd82e82ef62243806b2e76b23a6fb21d0bc/packages/react-reconciler/src/ReactFiberHooks.js#L362-L365


babel outputs same code for  above and
```
 hookTypesDev = 
   current !== null 
     ? (current._debugHookTypes: Array<HookType>)
     : null; 
```
"
,,,https://github.com/facebook/react/issues/15596,15596,Bug in conditional rendering(&&),[],closed,False,,3,2019-05-09T04:07:14Z,2019-05-09T10:54:42Z,2019-05-09T10:50:21Z,NONE,completed,,"
**Do you want to request a *feature* or report a *bug*?**
> *bug*

**What is the current behavior?**
> Conditional Rendering (&&) 
1. list length value is zero(0).
2. zero(0) is falsy from javascript.
3. However, zero(0) is output as the rendered result.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
> JSFiddle: [example](https://jsfiddle.net/2dubbing/fbz8r712/)

**What is the expected behavior?**
> zero(0) is not output.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
> React v16.8.6
> Chrome browser(v73.0.3683.103)

"
,,,https://github.com/facebook/react/issues/15719,15719,React.memo doesn't work as expected in nextjs apps if Provider value changed,"[{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""},{""id"":739761016,""node_id"":""MDU6TGFiZWw3Mzk3NjEwMTY="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler"",""name"":""Component: Reconciler"",""color"":""f9a798"",""default"":false,""description"":null}]",closed,False,,5,2019-05-23T09:26:18Z,2020-04-18T13:08:52Z,2020-04-18T13:08:52Z,CONTRIBUTOR,completed,,"**bug**

**What is the current behavior?**

I can't reproduce this issue out of nextjs app, but see the code of index page  https://codesandbox.io/s/helloworld-i8wzm

```javascript
import * as React from ""react"";
import Link from ""next/link"";

const Context = React.createContext({});
const TmpProvider = Context.Provider;

const MemoChild = () => {
  const r = React.useContext(Context);
  // commenting line above make memo to work as expected, it never render on click
  return null;
};

const Memo = React.memo(
  () => {
    console.info(""memo render"");
    return <MemoChild />;
  },
  // NEVER UPDATE
  () => true
);

const Test = () => {
  console.info(""test render"");
  return (
    <TmpProvider value={{}}>
      <Link href={{ pathname: ""/"" }}>
        <a>click me to force rerender</a>
      </Link>
      <Memo />
    </TmpProvider>
  );
};

export default Test;

```

On every link click log contains both console.info output

```
test render
memo render
```

But if I comment out this line `  const r = React.useContext(Context);`  at MemoChild
log contains just `test render` on link click as expected.

**What is the expected behavior?**

`React.useContext(Context);` in the child of memoized component must not somehow affect code execution, and the only console output on link click must be
```
test render
```

"
,,,https://github.com/facebook/react/issues/15958,15958,video element not rendering react chromium ubuntu,[],closed,False,,1,2019-06-22T01:19:44Z,2020-01-20T05:12:48Z,2019-06-23T05:56:48Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Yes.

**What is the current behavior?**

I have a problem with react not showing the video element. It shows it in the html document but it does not appear in the screen. If I use controls attribute the frame of the video will appear (the video player with controls) but the content will not be displayed (the video file). If I do not use the controls attribute it does not appears in the screen at all.

I have tested the video file within a plain html website and it works perfectly.


**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**
The video should appear in the screen.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

  ""dependencies"": {
    ""react"": ""^16.8.6"",
    ""react-dom"": ""^16.8.6"",
    ""react-scripts"": ""3.0.1""
  }

I have used npx create-react-app and I'm using ubuntu, chromium browser."
,,,https://github.com/facebook/react/issues/15830,15830,dispatchEvent customEvent of web components not working,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,16,2019-06-06T03:05:05Z,2022-04-21T11:12:17Z,2020-01-17T06:59:57Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

feature

**What is the current behavior?**

https://github.com/Tencent/omi/blob/master/packages/omim/test-react/src/MyComponent.js

**Online Demo**

https://tencent.github.io/omi/packages/omim/test-react/build/index.html

**What is the expected behavior?**

Fire all the custom events 

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

All.

I found that dispatchEvent actually executed, except that the element was not bound to the event (such as onAbc) or bound to the document (such as onChange).

Can give a grammatical sugar to bind custom events, otherwise it is not friendly to web compoents integration, such as https://tencent.github.io/omi/packages/omim/docs/build/index.html

------- update --------

I changed it to okay, but it's not elegant.

![844D4012FD49F553DDD28EC252BBBDAC](https://user-images.githubusercontent.com/7917954/59006174-3129d900-8853-11e9-8900-198437424fca.jpg)

------- update --------

I tested dispatchEvent customEvent in other frameworks：


| **Framework**                         | **Result**                           |
| ------------------------------- | ----------------------------------- |
| Preact |   working|
|React| not working|
|Vue| working|
| Angular | working|
|Omi|working|

Thanks."
,,,https://github.com/facebook/react/issues/16018,16018,"useEffect nested under the suspense and lazy, the second empty array parameter does not work",[],closed,False,,2,2019-06-29T02:13:01Z,2019-06-29T13:40:51Z,2019-06-29T13:40:50Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Maybe bug?

**What is the current behavior?**
useEffect nested under the suspense and lazy, the second empty array parameter does not work
```js
import React, { useEffect } from 'react';
function Loader(props){
    const Component = lazy(() => {
        useEffect(() => {
            // fetchData and then update store
        }, []); // [] does not work. it will always fetchData when component rerender, but not just once.
    });
    return <Suspense fallback={<div>Loading...</div>}>
        <Component />
    </Suspense>
}
```

**What is the expected behavior?**
When useEffect nested under the suspense and lazy, the second empty array parameter does not work.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
`""react"": ""^16.5.2""`"
,,,https://github.com/facebook/react/issues/15886,15886,"react-test-renderer returns TypeError: (0 , _typeof4.default) is not a function",[],closed,False,,1,2019-06-14T17:46:18Z,2019-09-03T12:19:02Z,2019-09-03T12:19:02Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
It is a bug report

**What is the current behavior?**
While running my jest tests I am facing the following problem:
```
 FAIL  src/components/Campaigns/CampaignForm/__tests__/CampaignForm.test.js
 Test suite failed to run

    TypeError: (0 , _typeof4.default) is not a function

      1 | import React from 'react'
      2 | import renderer from 'react-test-renderer'
        | ^
```
I have examined the stack.  
```
      at _typeof2 (node_modules/@babel/runtime/helpers/typeof.js:2:39)
      at _typeof2 (node_modules/@babel/runtime/helpers/typeof.js:15:39)
      at node_modules/react-test-renderer/node_modules/scheduler/cjs/scheduler.development.js:61:31
```

If I open the files and see what is at the line numbers on the new files; this is what I have;
```
      at _typeof2 (node_modules/@babel/runtime/helpers/typeof.js:2:39)
function _typeof2(obj) {
  if (typeof Symbol === ""function"" && typeof Symbol.iterator === ""symbol"") {
    _typeof2 = function _typeof2(obj) {

      at _typeof2 (node_modules/@babel/runtime/helpers/typeof.js:15:39)
function _typeof(obj) {
  if (typeof Symbol === ""function"" && _typeof2(Symbol.iterator) === ""symbol"") {

      at node_modules/react-test-renderer/node_modules/scheduler/cjs/scheduler.development.js:61:31
var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
```
So the react-test-renderer typeof call is getting redirected (possibly by babel) to a babel helper function for typeof, which is giving the error.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**
It should testing my jest tests.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
I am running this on mac on the command line.  Using npm run test which defaults to running jest in package.json.  I am using babel 7.0.0 version.  Any guidance on how I might debug this further would be great.  Happy to debug but would need some pointers on where to look for the issue.  I searched for typeof4 in @babel but there is no string.  
Very superficially, (and I could be wrong) I suspect that babel is transpiling the regenerator runtime and when it does it ends up on this problem.
Thanks for any help that will unblock me.

"
,,,https://github.com/facebook/react/issues/15859,15859,ReactDOM.render should flush useEffect queue,[],closed,False,,1,2019-06-11T08:53:27Z,2019-06-11T23:06:42Z,2019-06-11T23:06:41Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Report a possible bug

**What is the current behavior?**

Effects queued using `useEffect` are not executed synchronously by `ReactDOM.render`. This means it is impossible to execute something after the app is fully mounted.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

Example showing possibly incorrect behavior: https://codesandbox.io/s/adoring-cloud-q4b17

Log order is 
>before render 
>render 
>callback 
>after render 
>effect

**What is the expected behavior?**

I'm not sure if this is intentional or not, but the behavior I'd expect is that all effects are run before control is returned from `ReactDOM.render`. This would match the behavior of `componentDidMount`, which does run before control is returned. Example: https://codesandbox.io/s/intelligent-browser-g6n2n

Log order is
>before render 
>render 
>mount 
>callback 
>after render

The concrete example I have is that I subscribe to a store, and then immediately update the store. This change triggers other external effects, so it is necessary that it happens after mount. Because the subscribe-effect has not been run, the app never updates. It can be fixed by subscribing with `useLayoutEffect` instead of `useEffect`, but this seems to run counter to the intention of the hooks.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Replicated in React/ReactDOM 16.8.4 and 16.8.6
"
,,,https://github.com/facebook/react/issues/15835,15835,Not able to import json files in TSX files,[],closed,False,,2,2019-06-07T10:18:07Z,2019-06-11T00:43:26Z,2019-06-11T00:43:19Z,NONE,completed,,"I have tried to import the json file in my react application(App.tsx)

[App.tsx

import * as currencies from './currencies.json';](url)

My Json file will look like below structure:

[{
  ""main"": {
     ""numbers"": {
        ""currencies"": {
         }
      }
   }
}
](url)
While running the application, it throws the below error

(1,1): unused expression, expected an assignment or function call

After further analysis, i have added the typings.d.ts file within src folder

[declare module ""*.json"" {
    const value: any;
    export default value;
}](url)

Please suggest your solution to resolve this issue"
,,,https://github.com/facebook/react/issues/15985,15985,Fragment will throw an error during unmount if it’s content is edited outside react,[],closed,False,,4,2019-06-25T12:25:40Z,2019-09-03T13:02:02Z,2019-09-03T11:36:02Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
If direct child node of fragment was replaced by other node not created by react — react will throw `Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.` when Fragment will be unmounted

**Smallest reproduction case:**
https://codesandbox.io/s/react-replace-element-fragment-error-0rkqw
Second and fourth buttons will produce error on second click.
What’s strange that if you’ll delete the content in fragment in content editable div (button 5) — it will not throw error.

**What is the expected behavior?**
React not throwing error. Maybe warning?
Why? because any browser extension in any browser can replace any node and this will lead to broken application.
Otherwise documentation should be improved and state clearly that fragment is unsafe to use if there is a chance of third party DOM modification. (I understand why it is happening in the first place, but not agree that it should).
Also it would be great to include DOM path into original error if possible, because for example we create captured this error using sentry and it is unclear where it is happening and it’s quite hard to improve the situation.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.8.3, no, I think it was broken all along"
,,,https://github.com/facebook/react/issues/15842,15842,==,[],closed,False,,0,2019-06-08T03:00:04Z,2019-06-08T03:00:23Z,2019-06-08T03:00:23Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
"
,,,https://github.com/facebook/react/issues/15893,15893,Feature Request: Keyed Hooks,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,6,2019-06-15T00:55:47Z,2020-04-17T01:46:23Z,2020-04-17T01:46:23Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

*Do you want to request a feature or report a bug?* **Request a Feature**

# Previous Issues

""Keys for hooks"" was previously proposed in #14998 and closed without much discussion.

See below (""Use Cases"") for particular use cases of keyed hooks, and why they provide a better, more-general solution than other approaches today.

# Background: the rules of hooks

The [Rules of Hooks](https://reactjs.org/docs/hooks-rules.html) outline how React hooks are allowed to be called. The rules are the following:

- Hooks can only be called *at the top level* from custom hooks or React components
- The same hooks, in the same order, must be called from any component every time it renders (or every time some custom hook is called)

There are several good reasons for these rules:

1. These rules enable the *implementation* of hooks to be simple (a global, incrementing counter identifies the state for each primitive hook).
2. The rules enable the *syntax* of hooks to be simple (a sequence of function calls, in order, without explicitly threading state between them, and without needing to arrange them into e.g. an array)
3. You can reason about hooks *independently* since they don't depend on what comes before / after them: this is what allows you to reason about custom hooks in a way that ignores their implementation
4. The rules can be easily checked by static linters

The third rule is important because we want to be able to provide custom hooks whose implementations are ""black boxes"": we don't need to know how a hook works to know what it does. The only requirement is when we call custom hooks, we also follow the Rules. It's important that this change (or other changes to hooks; or the introduction of new primitive hooks) do not cause it to break.

The main limitation of these rules is that hooks must be arranged in a line. We'd like to be able to generalize to support *trees* of hooks. In particular, just like React identifies the state for a component by its location within its parents component tree, we'd like to be able to ""relax"" the rules of hooks enough that we can call hooks *conditionally or variably* without breaking any of (1) or (2) or (3) or (4).

# Feature Overview

Allow hooks to be **grouped and keyed**.

The example below demonstrates correct usage of the proposed API:

```js
import * as React from 'react';

function useLookupMultiple(letters) {
    const lookups = React.useGroup(keyer => {
        const values = [];

        const valA = keyer('A', () => {
            return useLookup('A');
        });
        values.push(valA);


        for (const letter of letters) {
            const valLetter = keyer(letter, () => {
                 return useLookup(letter);
            });
            values.push(valLetter);
        }

        const valB = keyer('B', () => {
            return useLookup('B');
        });
        values.push(valB);

        return values;
    });

    return lookups;
}
```

## New Rules of Hooks

- Hooks still need to follow the old *rules of hooks*
- `useGroup` is a new, primitive hook which must also obey the existing rules of hooks
- *but* hooks can be called from one *new* place: the `keyer` function callback obtained from `useGroup`

We'll now go through the 4 properties outlined above and see that they still apply.

## Property 1: Ease of Implementation

Today, React essentially stores an array of ""memory cells"" for primitive hooks. A global counter is used to identify which cell is the ""current"" one, and each primitive hook increments this counter.

To implement `useGroup`, only a small detour is required:

- The `useGroup` memory cell essentially holds the following state: `{key1: memoryCellArray1, key2: memoryCellArray2, key3: memoryCellArray3}`.
- The passed `keyer` callback first replaces the global memory cell array with the one associated with the provided key; then it calls its passed callback; then it reverts the global memory cell array so that the group can continue

## Property 2: Ease of Syntax

The existing hook syntax is unchanged. The new group syntax is somewhat unwieldier, but the basic concepts still apply: regular function calls (albeit inside callbacks similar to `useEffect` or `useReducer` although run synchronously within the render like the latter rather than the former). The clumsier syntax is actually a benefit, because this feature should be seldom used, except for making certain custom hooks more powerful (see below for the intended use-cases).

## Property 3: Independence

Hooks remain independent from one another. Moreover, since hooks are clearly *grouped* as well as simply keyed, it's easy to tell the scope of keys; in particular, there's no (sensible) way to split a keyed group of hooks across multiple custom hooks (the groups form a clear hierarchy bounded by custom hook scopes), so they can still be understood completely independently.

## Property 4: Easy Linting

Linters would need to be updated in order to support this feature. Luckily, it's fairly easy! The same rules of hooks apply, except that hooks may also be called (at the top level of) the `keyer` callback argument obtained from `React.useGroup`.

# Use Case: The Problem Today

The simplest use-case that demonstrates why keyed hooks would be useful is outlined here. The [EventSource](https://developer.mozilla.org/en-US/docs/Web/API/EventSource) API allows JavaScript to stream events. We can write a nice custom hook to subscribe to an endpoint in some component:

```js
export function useEventSourceListener(url, listenCallback) {
  const listenCallbackRef = React.useRef(listenCallback);

  React.useEffect(() => {
    // On re-render, the listener should be updated.
    listenCallbackRef.current = listenCallback;
  });

  React.useEffect(() => {
    const source = new EventSource(url);
    source.onmessage = e => {
      listenCallbackRef.current(e.data);
    };
    return () => {
      source.close();
    };
  }, [url]);
}
```

Using it is pretty straight-forward:

```js
const ExampleComponent = ({id}) => {
    const [messages, setMessages] = React.useState([]);

    useEventSourceListener(`https://example.com/stream/${id}`, newMessage => {
        setMessages(current => current.concat([newMessage]);
    });

    return <ul>{messages.map((msg, index) => <li key={index}>{msg}</li>)}</ul>;
}
```

This hook worked great for me, until I realized that a particular event stream that I needed was sharded across multiple URLs!

```js
const ExampleComponent = ({id}) => {
    const [messages, setMessages] = React.useState([]);

    const onNewMessage = newMessage => {
        setMessages(current => current.concat([newMessage]);
    };

    useEventSourceListener(`https://example.com/stream/${id}/shard-1`, onNewMessage);
    useEventSourceListener(`https://example.com/stream/${id}/shard-2`, onNewMessage);

    return <ul>{messages.map((msg, index) => <li key={index}>{msg}</li>)}</ul>;  
}
```

And now *this* works until it turns out that there are a dynamic number of URLs depending on `id`. Once that happens, you *can't* write this using React unless you're willing to very carefully violate the rules of hooks and also give up on certain maintainability benefits. For example, the following solution ""obeys the rules of hooks"" as far as React can tell at runtime (although it will fail decent lint checks):

```js
const ExampleComponent = ({id, shards}) => {
    return <ExampleComponentInternal key={shards.length} id={id} shards={shards} />
};

const ExampleComponentInternal = ({id, shards}) => {
    const [messages, setMessages] = React.useState([]);

    const onNewMessage = newMessage => {
        setMessages(current => current.concat([newMessage]);
    };

    for (const shard of shards) {
        useEventSourceListener(`https://example.com/stream/${id}/${shard}`, onNewMessage);
    }
    return <ul>{messages.map((msg, index) => <li key={index}>{msg}</li>)}</ul>;  
}
```

of course, this solution has a large number of problems:

- if the number of shards changes, then any other state (e.g. forms) stored inside the component get thrown away, since the `key` changed
- if the shards get reordered, then the connections will be dropped and re-instantiated, since each `useEventSourceListener` call only knows about itself!

These problems can be remedied in turn by the following solution:

```js
const ListenerComponent = ({url, onNewMessage}) => {
    useEventSourceListener(url, onNewMessage);
    return null;
}

const ExampleComponent = ({id, shards}) => {
    const [messages, setMessages] = React.useState([]);

    const onNewMessage = newMessage => {
        setMessages(current => current.concat([newMessage]);
    };

    for (const shard of shards) {
        useEventSourceListener(, onNewMessage);
    }
    return <>
        {shards.map(shard => <ListenerComponent url={`https://example.com/stream/${id}/${shard}`} key={shard} />)}
        <ul>{messages.map((msg, index) => <li key={index}>{msg}</li>)}</ul>
    </>;
}
```

This solution finally works in React today. Unfortunately, that stops being true if instead `useEventSourceListener` returns any useful value: there's no way to (synchronously) pass a returned value up from those `ListenerComponent`s into `ExampleComponent`. Using refs and `useLayoutEffect` you can kinda fake this, but in particular there's no way to pass those values into subsequent hooks, because hooks can't be called inside `useEffect` or `useLayoutEffect` callbacks.


# Use Case: The Solution

Using keyed hooks, we simply get:

```js
const ExampleComponent = ({id, shards}) => {
    const [messages, setMessages] = React.useState([]);

    const onNewMessage = newMessage => {
        setMessages(current => current.concat([newMessage]);
    };

    React.useGroup(keyer => {
        for (const shard of shards) {
            keyer(shard, () => {
                useEventSourceListener(`https://example.com/stream/${id}/${shard}`, onNewMessage);
           });
        }
    });
    return <>
        <ul>{messages.map((msg, index) => <li key={index}>{msg}</li>)}</ul>
    </>;
}
```

Just like components, we only need to distinguish our hooks calls among *siblings* with `keyer`. Since `useEventSourceListener` is itself already robust against changes to the URL, we don't need to include `id` inside `keyer`'s key argument.

# General Rationale

The general rationale behind this approach is to provide better composition of *custom* hooks. One workaround for the above approach is to create a new `useMultipleEventSourceListener(urls, callback)`, but this approach has several major drawbacks:

- First, the implementation is very complicated. The main appeal of hooks like `useEffect` is that they encapsulate all aspects of one feature: initialization and cleanup go together. Implementing `useMultipleEventSourceListener`, while possible, doesn't let us take advantage of this because we're stuck with doing all initialization / teardown / diffing of values ourselves, since React can no longer do it for us.

- Second, it's not compositional. Why *should* I have to *re-implement* a complex function when a simple loop ought to suffice? In particular, it's at least plausible to implement `useMultipleEventSourceListener` because here I've written the original myself, but if the custom hook comes from some third party then it's no longer feasible to fork and implement a ""multiple"" version myself

- Lastly, it makes nesting custom hooks inside each other non-compositional. Even if I implement and maintain a `useMultipleEventSourceListener`, if I want to call *that* hook multiple times, I'm out of luck; instead I need Consider the case where I find I have multiple calls to `useMultipleEventSourceListener`; in order to be able to handle *that*, I would need to be able to 

# Semantics in Detail

I glossed over several minor semantic details that need to be covered:

## What happens to `useState`/`useReducer` when their keys change?

If the key is ""new"" (i.e. **was not present** on the *previous* render) then the state is copied from the ""initial"" argument.

If the key is not ""new"" (i.e. it **was present** on the *previous* render) then the state is whatever was previously stored.

Basically, if a key disappears and reappears later, the old state was lost. This is just like how components with `key` props behave (whether they're using class `state` or functional `useState`).

## What happens to `useEffect`/`useLayoutEffect` when keys change?

If the key ceases to exist, then the cleanup code gets called (just like if the component unmounted).

This is simple, consistent, and easily understood. Again, it's just like putting the hooks inside children with `key` props that disappear. If hooks work in those situations, they'll likely work here as well.

## What happens to `useRef` when keys change?

The reference is fresh every time the key is ""new"". In particular, if a key disappears and reappears, the old `current` value is lost.

## What happens to `useContext`?

Nothing, `useContext` doesn't actually need memory cells at all.

## What happens to `useDebugValue`?

The debug value can be listed alongside the key which it lies under.

## What happens if the order of keys changes?

Not much - since hooks are independent of each other (property 3 above) it doesn't (or shouldn't) matter what order they're called as long as the memory cell array is updated appropriately. The call order should always match the order they're called inside `useGroup`.

## What happens if the same key is used twice?

There are two obvious approaches:

- Make this an error (or an error-in-debug mode, much like having multiple children with the same `key` prop today)
- Make subsequent calls a no-op

The latter option is occasionally more convenient but potentially very unsafe. The former is much better (especially because if it errors today, it can be changed to have alternative behavior in the future).

## What happens if you call hooks inside `useGroup` but not inside a `keyer` callback?

This causes an implementation-defined error, just like other misuses of keys or hooks today. The rules of hooks let you call hooks inside `keyer` callbacks, but not inside the `useGroup` callback.

## What happens if `keyer` escapes from the `useGroup` callback and gets called later?

This causes a best-effort implementation-defined error, just like other misuses of hooks today (e.g. as if you call `useState` inside of an event callback).

# Conclusion

React hooks are really nice 🥇. There's just a few edge cases like the above where they don't quite cut it - providing keyed hooks would just make writing and using custom hooks that much nicer, and solve tons of issues that are currently just-out-of-reach in maintainable, easily-understood ways."
,,,https://github.com/facebook/react/issues/16246,16246,React onChange event triggers the wrong props (when used with `htmlFor`),[],closed,False,,1,2019-07-30T00:54:04Z,2019-09-03T08:54:48Z,2019-09-03T08:54:48Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
Component triggers the wrong props on the `onChange` event.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
https://codesandbox.io/s/muddy-https-r6w7p
It behaves alright when the default input(file selector) is clicked. But when the div that refers to the input(with `htmlFor`) is clicked, it seems like triggering the old props.

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React v16.8.6
"
,,,https://github.com/facebook/react/issues/16154,16154,Accessing state/props in callback ref with hooks,[],closed,False,,14,2019-07-18T07:03:20Z,2022-01-20T16:38:41Z,2019-08-15T13:14:30Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Requesting guidance on how to implement something with hooks that used to be possible with class components (so it's not quite a bug, but it might end up becoming a feature request)

**What is the current behavior?**

If you want to access an external value inside a callback ref (props/state/etc.), you can use `useCallback`. However, in some cases you may want to avoid re-triggering the callback ref when one of those external values change. In that case, you could use `useRef` to work around this, and update the ref's value with `useEffect`/`useLayoutEffect`, like this:

```
const valueRef = useRef(value);
useEffect(() => {
  valueRef.current = value;
}, [value]);

// Now the callback ref can use `valueRef.current`
```

However, callback refs are called before `useEffect`/`useLayoutEffect` callbacks, so if the callback ref happens to be triggered as a result of the same render in which `value` changes, it will see the old value when it access `valueRef.current`.

This could be worked around by updating `valueRef` as a side effect of render:

```
const valueRef = useRef(value);
valueRef.current = value;
```

This is admittedly a very specific edge case, but I have actually introduced bugs into real code due to this, when trying to convert existing class components to use hooks. Another motivation for this is to use it to help implement a custom hook for making callback refs nicer to use by mimicking the `useEffect` API: https://github.com/facebook/react/issues/15176#issuecomment-512185852

Interestingly, this issue does not happen with class components, because `this.props` and `this.state` have the correct value when the callback ref is triggered.

Here is a codesandbox with a contrived example that reproduces the issue (and shows how the issue does not occur with a class component): https://codesandbox.io/s/callback-refhooks-72m3p

**What is the expected behavior?**

That there is some way of handling this use case using hooks, and in such a way that works with concurrent mode:

• Wanting to access external values in a callback ref
• Wanting to avoid triggering the callback ref when those values change

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

* React/React-DOM 16.8.6
* Not a browser/OS-related issue
* Also did not work in previous versions of React"
,,,https://github.com/facebook/react/issues/16170,16170,Unicode iconfont didn't render when using map function of lists.,[],closed,False,,2,2019-07-21T17:42:48Z,2019-07-22T08:59:07Z,2019-07-22T08:59:07Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

- Bug

**What is the current behavior?**

- ReactDom just renders unicode iconfont as plain text when using map function of lists, instead of iconfont. 
  ![image](https://user-images.githubusercontent.com/30968676/61594654-eefd0100-ac20-11e9-9cc0-7f7007a1cc39.png)


- However, it can render well when  I hardcode the lists without using map function.
  ![image](https://user-images.githubusercontent.com/30968676/61594627-87df4c80-ac20-11e9-9936-fddb75327141.png)


**Steps to reproduce this bug**
1. Create an iconfont project from Alibaba [iconfont](https://www.iconfont.cn).
    Like this
    ![image](https://user-images.githubusercontent.com/30968676/61594159-e30e4080-ac1a-11e9-8833-4d6d9daddc9c.png)
2. Make a list to render these icons using iconfont unicode.
    ```js
    lists.map((list, idx) => (
        <li key={idx}>
             <i className=""iconfont"">{list.unicode}</i>
        </li>
    ))
    ```

**What is the expected behavior?**

- Render these iconfont as icon instead of plain text.

**Which versions of React, and which browser / OS are affected by this issue?**

- Broswer: Google Chrome, Version 75.0.3770.100 (Official Build) (64-bit)
- OS: Ubuntu, Version 18.04.2 LTS (Bionic Beaver)
- React: Version 16.8.6

"
,,,https://github.com/facebook/react/issues/16203,16203,After redirecting React is re rendered and send back to the cached login IE11,[],closed,False,,1,2019-07-25T11:52:51Z,2019-07-27T12:32:33Z,2019-07-27T12:32:33Z,NONE,completed,,"I'am struggling to find a quick solution to my problem , because clients are complaining about that the Site cannot be rendered on the IE . I have done a little research and i came across this `react-app-polyfill/ie11` .
I have insert it as an entry point on mine `src/index.js` It have worked i saw my project ( only the login tho ) working on IE 11 , but after the login it is redirected again back to the login page . The error that IE throws back is :
`DOM7011 : The code on this page disabled back and forward caching.`
`Unhandled promise rejection TypeError: Unable to get property 'data' of undefined or null reference`

After a while i came also across this :
https://reactjs.org/docs/javascript-environment-requirements.html

The new JavaScript Environment Requirements . Bassicly they suggest to enable as an entry point on your `index.js` this
`import 'core-js/es/map'; import 'core-js/es/set';`

So far i have no clue what is going on , but still the app is not running properly on IE . Can somebody give me some advice what to do ?

**UPDATED**
Login.js

```jsx
export default class Login extends Component {
  constructor(props) {
    super(props);

    this.state = {
      translations: EN_TRANSLATIONS,
      clientNumber: """",
      password: """",
      redirectToReferrer: """",
      loginErrorMessage: """",
      lockedUntilDate: """"
    };
  }

  async componentWillMount() {
    let tenant = window.location.hostname;

    axios
      .post(SERVER_URL + ""/api/user/page"", {
        tenant: tenant
      })

      .then(response => {
        localStorage.setItem(""page"", JSON.stringify(response.data.branding));
        localStorage.setItem(""tenant"", tenant);

        this.setState({
          branding: response.data.branding,
          tenant: tenant,
          pageReady: true
        });
      });
  }

  login = () => {
    axios
      .post(SERVER_URL + ""/api/user/access"", {
        tenant: this.state.tenant,
        customerNumber: parseInt(this.state.clientNumber),
        password: sha1(this.state.password + FE_SALT)
      })
      .then(response => {
        localStorage.setItem(""token"", response.data.token);
        localStorage.setItem(""access"", JSON.stringify(response.data.branding));

        this.setState({
          branding: response.data.branding,
          accessReady: true
        });

        if (this.state.accessReady) {
          if (response.data.passwordValidity >= 0) {
            Auth.authenticate(response => {
              this.setState({ redirectToReferrer: ""dashboard"" });
            });
          } else {
            Auth.authenticate(response => {
              this.setState({ redirectToReferrer: ""changePassword"" });
            });
          }
        }
      });
  };

  handleSubmit = event => {
    event.preventDefault();
  };

  render() {
    const {
      redirectToReferrer,
      translations,
      notValidTenant,
      branding
    } = this.state;
    if (redirectToReferrer === ""dashboard"") {
      return (
        <Switch>
          <Route
            render={() => <Redirect to={`/dashboard/${Auth.customerId}`} />}
          />
        </Switch>
      );
    } else if (redirectToReferrer === ""changePassword"") {
      return (
        <Switch>
          <Route
            render={() => (
              <Redirect to={`/change_password/${Auth.customerId}`} />
            )}
          />
        </Switch>
      );
    }
  }
}
```

index.js

```jsx
import ""react-app-polyfill/ie9"";
import ""react-app-polyfill/ie11"";
import ""react-app-polyfill/jsdom"";

import React from ""react"";
import ReactDOM from ""react-dom"";
import App from ""./App"";
import { BrowserRouter } from ""react-router-dom"";

ReactDOM.render(
  <BrowserRouter>
    <App />
  </BrowserRouter>,
  document.getElementById(""root"")
);
```

Also i marked that i cannot import `'react-app-polyfill/stable'` i think this should work , but i am not sure .

**UPDATE**
I have deleted the `node_modules` and installed again `react-app-polyfill` . Now the `'react-app-polyfill/stable'` is recognized , but i ran into another error .
`SCRIPT438: Object doesn't support property or method 'repeat'` ... This IE is making me crazy ...

**UPDATE**
Okey so i was able to delete my private routes and make every route after the login visible `<Route/>` . If i hardcode the URL path and disable the security i can get access to my dashboard page . So that gives me thinking that the problem is coming from the `<Redirect/>` component . Because he is the only one standing between the login and the dashboard . Any suggestion why is this conflict between `IE` and `<Redirect/>` ???
"
,,,https://github.com/facebook/react/issues/16132,16132,Lazy load component with path stored in a variable or prop,[],closed,False,,7,2019-07-14T13:38:22Z,2022-09-19T18:27:14Z,2019-07-15T09:53:58Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Report a bug

**What is the current behavior?**
Error and warning when trying to dynamically `lazy` load a component from a variable or props.

```
Warning: Critical dependency: the request of a dependency is an expression

Error: Cannot find module './Button'
(anonymous function)
.../dynamic-lazy-load/src lazy groupOptions: {} namespace object:5
```

**Reproduction**
In a Codesandbox it seems to be working https://codesandbox.io/s/angry-rgb-vs0g4 fine. For some reason in a non codesandboxed environment, I was able to reproduce the issue [here](https://github.com/ReasonableDeveloper/react-dynamic-lazy-load-bug).

**What is the expected behavior?**
It should lazily load the component even when the path is passed down via props or stored in a variable without throwing a warning or error. The behavior of following code:

```JavaScript
const buttonPath = ""./Button"";
const LazyLoadedButton = lazy(() => import(buttonPath));
```

should match the behavior of
```JavaScript
const LazyLoadedButton = lazy(() => import('./Button'));
```

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Latest version of CRA (3.0.1) and latest React (16.8.6)

This issue was first reported in the lerna support CRA pull request seen [here](https://github.com/facebook/create-react-app/pull/6599#issuecomment-511161680)."
,,,https://github.com/facebook/react/issues/16070,16070,prop-types not work save child please,[],closed,False,,2,2019-07-06T01:42:30Z,2019-09-03T11:23:44Z,2019-09-03T11:23:44Z,NONE,completed,,"I use prop-types package . want to validate my props, i transmit a error type of prop but prop-types not work.

MACOS
react 16.8.6
react-dom 16.8.6
prop-types 15.5.7
redux 4.0.1
react-redux 2.3.0


```
import React from 'react';
import { Button, Icon } from 'antd';
import PropTypes from 'prop-types';

const PageHeader = ({isUnflod, showFilterPanel, title}) => (
    <>
        <div class='page-title'>{title}</div>
        <div class='page-header-base-button'>
            <Button className='left-button' type='primary'>添加</Button>
            <Button type='default' onClick={() => showFilterPanel(!isUnflod)}>
                筛选<Icon type={isUnflod ? 'up' : 'down'} />
            </Button>
        </div>
    </>
)

PageHeader.propTypes = {
    title: PropTypes.number,
    isUnflod: PropTypes.bool.isRequired,
    showFilterPanel: PropTypes.func.isRequired
}

export default PageHeader;
```
```
const Vehicle = ({isUnflod, showFilterPanel, pagination}) => (
    <>
        <PageHeader title='车辆管理' isUnflod={isUnflod} showFilterPanel={showFilterPanel} />
        {
            isUnflod ? <VehicleFilterPanel /> : null
        }
    </>
)
```"
,,,https://github.com/facebook/react/issues/16147,16147,Increase `NESTED_UPDATE_LIMIT`,[],closed,False,,1,2019-07-17T12:38:29Z,2019-07-17T14:28:34Z,2019-07-17T14:24:00Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

*bug*

**What is the current behavior?**

I am creating a mobile app using Expo (SDK33).  I'm using redux, redux-form, react-navigation, and redux-persist, amongst other things.  Without doing anything ridiculous, I have hit the `NESTED_UPDATE_LIMIT` just by having a reasonably deep component tree.

```
    in ConnectFunction (created by Connect(Form(Connect(BaseQuestionnairePage))))
    in Connect(Form(Connect(BaseQuestionnairePage))) (created by ReduxForm)
    in ReduxForm (created by Context.Consumer)
    in Hoc (created by ReduxForm)
    in ReduxForm (created by ConnectFunction)
    in ConnectFunction (created by Connect(ReduxForm))
    in Connect(ReduxForm) (at QuestionnaireScreen.jsx:17)
    in RCTScrollContentView (at ScrollView.js:976)
    in RCTScrollView (at ScrollView.js:1115)
    in ScrollView (at Wizard.jsx:84)
    in RCTView (at View.js:45)
    in View (at Wizard.jsx:83)
    in BaseWizardInterface (created by ConnectFunction)
    in ConnectFunction (at Wizard.jsx:173)
    in BaseWizard (created by ConnectFunction)
    in ConnectFunction (at QuestionnaireScreen.jsx:12)
    in _default (created by SceneView)
    in SceneView (at StackViewLayout.tsx:899)
    in RCTView (at View.js:45)
    in View (at createAnimatedComponent.js:151)
    in AnimatedComponent (at StackViewCard.tsx:93)
    in RCTView (at View.js:45)
    in View (at createAnimatedComponent.js:151)
    in AnimatedComponent (at screens.native.js:59)
    in Screen (at StackViewCard.tsx:80)
    in Card (at createPointerEventsContainer.tsx:95)
    in Container (at StackViewLayout.tsx:971)
    in RCTView (at View.js:45)
    in View (at screens.native.js:83)
    in ScreenContainer (at StackViewLayout.tsx:383)
    in RCTView (at View.js:45)
    in View (at createAnimatedComponent.js:151)
    in AnimatedComponent (at StackViewLayout.tsx:379)
    in PanGestureHandler (at StackViewLayout.tsx:372)
    in StackViewLayout (at withOrientation.js:30)
    in withOrientation (at StackView.tsx:103)
    in RCTView (at View.js:45)
    in View (at Transitioner.tsx:267)
    in Transitioner (at StackView.tsx:40)
    in StackView (created by Navigator)
    in Navigator (at createKeyboardAwareNavigator.js:12)
    in KeyboardAwareNavigator (at create-redux-container.js:72)
    in NavigatorReduxWrapper (created by ConnectFunction)
    in ConnectFunction (at App.jsx:36)
    in RCTView (at View.js:45)
    in View (at StatusBarWrapper.jsx:49)
    in RCTView (at View.js:45)
    in View (at StatusBarWrapper.jsx:48)
    in BaseStatusBarWrapper (created by ConnectFunction)
    in ConnectFunction (at App.jsx:35)
    in BaseAuthGate (created by ConnectFunction)
    in ConnectFunction (at App.jsx:34)
    in PersistGate (at App.jsx:33)
    in Provider (at App.jsx:32)
    in _default (at withExpoRoot.js:20)
    in RootErrorBoundary (at withExpoRoot.js:19)
    in ExpoRootComponent (at renderApplication.js:35)
    in RCTView (at View.js:45)
    in View (at AppContainer.js:98)
    in RCTView (at View.js:45)
    in View (at AppContainer.js:115)
    in AppContainer (at renderApplication.js:34)
```

From what I can tell, there are:

* Eight layers for expo or react-native's bootstrapping;
* A layer for the redux store `Provider`;
* A layer for redux-persist's `PersistGate`;
* Two layers for my `AuthGate` (as it's connected to the store with a HOC, `connect()`);
* Two layers for my `StatusBarWrapper`;
* Four layers for the `<View><View /></View>` in my `StatusBarWrapper`, (they come with `<RCTView />`s apparently);
* Twenty-eight layers for `react-navigation`'s `StackNavigator`;
* Nine layers for my `Wizard`, (two for the outer component, connected to the store, two for the inner component also connected to the store, two for a `<View />`, and three for a `<ScrollView />`);
* Seven layers for my `QuestionnairePage`, (one redux `connect()` HOC to connect the redux-form to the store to load initial values, one redux `connect()` HOC that the `redux-form` connects _itself_ to the store with for its own purposes, one for the `ReduxForm` itself, one for the HOC it contains, one for a context consumer layer (I think?), then finally two more for my actual form.

Given that's 62 in total, I imagine that perhaps the eight expo/react-native bootstrapping layers aren't counted, meaning the final seven layers push it over the edge.

**What is the expected behavior?**

`NESTED_UPDATE_LIMIT` is there to provide oven mitts for infinite loops, right?  Every single question I found on Stack Overflow about this invariant was someone not understanding how JSX works and calling `.setState()` in `.render()`, which isn't at all what I'm doing.  I don't understand why the detection for _infinite_ loops is set to such a low threshold.

In my opinion, `NESTED_UPDATE_LIMIT` should be at least 10x higher.  It'll still catch infinite loops just fine, and won't take much longer to do so, but won't kick my ass for having the audacity to use several libraries and a reasonably deep structure.

Failing that, it should be configurable.  As I said, I'm using expo, which I believe means there's no way for me to change this value when publishing my app.  I can edit it in `node_modules/` just fine on my local machine (and the error goes away of course), but with no way to do so on the build servers, I can't make this app.  Not with react, anyway.  I really don't want that to be the case, because I've been building this for months, at this point, and starting over in swift or whatever would be an awful cost to my employers just because someone thought ""50 is enough for anyone"".  :/

As it seems like the expo bootstrapping layers are being ignored, I'm going to start diving in to that code now to see if I can steal its ideas, but of course I shouldn't have to.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

```
  ""dependencies"": {
    ""@expo/browser-polyfill"": ""0.0.1-alpha.3"",
    ""@expo/vector-icons"": ""10.0.1"",
    ""@react-navigation/core"": ""3.3.1"",
    ""airbnb-prop-types"": ""2.13.2"",
    ""axios"": ""0.18.0"",
    ""buffer"": ""5.2.1"",
    ""expo"": ""33.0.0"",
    ""expo-constants"": ""5.0.1"",
    ""expo-gl"": ""5.0.1"",
    ""expo-web-browser"": ""5.0.3"",
    ""lodash"": ""4.17.11"",
    ""moment"": ""2.24.0"",
    ""path"": ""0.12.7"",
    ""pixi.js"": ""4.7.0"",
    ""prop-types"": ""15.7.2"",
    ""react"": ""16.8.4"",
    ""react-moment-proptypes"": ""1.6.0"",
    ""react-native"": ""https://github.com/expo/react-native/archive/sdk-33.0.0.tar.gz"",
    ""react-navigation"": ""3.11.0"",
    ""react-navigation-redux-helpers"": ""3.0.2"",
    ""react-redux"": ""7.1.0"",
    ""react-switch-case"": ""1.0.6"",
    ""redux"": ""4.0.1"",
    ""redux-form"": ""8.2.1"",
    ""redux-persist"": ""5.10.0"",
    ""redux-persist-expo-securestore"": ""2.0.0"",
    ""redux-thunk"": ""2.3.0"",
    ""reselect"": ""4.0.0"",
    ""whatwg-url"": ""7.0.0""
  },
```

Linux Mint 18, iOS 12.2.  Most likely didn't work in previous versions of react, but I haven't checked."
,,,https://github.com/facebook/react/issues/16083,16083,React ref incorrectly reports 0 height in production.,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,6,2019-07-08T15:11:41Z,2019-07-09T13:26:50Z,2019-07-09T13:26:50Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug
**What is the current behavior?**
ImageViewer.js:
```
class ImageViewer extends React.Component {
  constructor(props) {
    super(props);
    this.state = { gotSize: false };
    this.containerRef = React.createRef();
  }

  componentDidMount() {
    // get zero here, only in production and only on the first run after refresh
    console.log(this.containerRef.current.clientHeight);
    this.setState({ gotSize: true });
    ...
  }
  ...
  render() {
    const { gotSize } = this.state;

    return (
         ...
        <div className={scss['canvas-container']} ref={this.containerRef}>
          {gotSize && <Canvas containerRef={this.containerRef} />}
        </div>
        ...
    );
  }
};
```
My css in container basically a box of width:100% and height: 100%, and it takes the full size in the inspector
Canvas.js:
```
class Canvas extends React.Component {
  constructor(props) {
    super(props);
    this.updateDimensions = this.updateDimensions.bind(this);
  }

  componentDidMount() {
    window.addEventListener('resize', this.updateDimensions);
  }

  componentWillUnmount() {
    window.removeEventListener('resize', this.updateDimensions);
  }

  updateDimensions() {
   ...
   // and of course zero here, but only on the first run
   // after refresh, if I close and open the component the second time it works fine
    const rect = this.props.containerRef.current.getBoundingClientRect(); 
    ...
  }

  render() {...}
}
```
**What is the expected behavior?**
Get the correct height
env:
production: default create-react-app script `""react-app-rewired build""`
macOS High Sierra 10.13.6
Chrome Version 75.0.3770.100 (Official Build) (64-bit)
""react"": ""^16.8.6""
""react-dom"": ""^16.8.6"""
,,,https://github.com/facebook/react/issues/16250,16250,React Context deprecated warning,[],closed,False,,9,2019-07-30T08:44:10Z,2020-04-20T09:48:13Z,2019-08-15T13:07:19Z,NONE,completed,,"
When I use this.context in a class I see a warning ""Deprecated symbol used, consult docs for better alternative"" in PhpStorm IDE.. it is really deprecated?

""react"": ""16.8.3"""
,,,https://github.com/facebook/react/issues/16045,16045,Keep getting `TypeError: Cannot read property 'scrollTop' of null` in a custom hook...,[],closed,False,,10,2019-07-03T07:42:21Z,2021-07-16T03:35:44Z,2019-07-03T17:20:36Z,NONE,completed,,"I made a hook to get the scroll position of a component, like so:

```js
function useScrollPosition() {

  function getScroll() {
    return {
      x: document.getElementById('ContentContainer').scrollTop,
      y: document.getElementById('ContentContainer').scrollLeft
    }
  }

  const [scrollPosition, setScrollPosition] = useState(getScroll)

  useEffect(() => {
    
    function handleScroll() {
      setScrollPosition(getScroll())
    }

    window.addEventListener('scroll', handleScroll)
    return () => window.removeEventListener('scroll', handleScroll)
  }, []) // Empty array ensures that effect is only run on mount and unmount

  return scrollPosition
}
```

...and implemented it in the same file, like so:

```jsx
const ContentContainer = (props) => {

  const scroll = useScrollPosition();

  return (
    <Main id='ContentContainer'>
      <ScrollInfo>
        Vertical position: {scroll.x}px / Horizontal Position: {scroll.y}px
      </ScrollInfo>
      {props.children}
    </Main>
  )
}

export default ContentContainer
```

...and i keep getting the same error:

<img width=""797"" alt=""Screenshot 2019-07-03 00 38 46"" src=""https://user-images.githubusercontent.com/7884263/60572670-f4a2ad80-9d2a-11e9-8162-d4fe1c973f87.png"">

If I disable the hook and the app runs properly, I can then find the scroll position in the console just fine.

Any thoughts as to why I might be getting `null` back for something that clearly isn't `null` when the app loads without this hook enabled?"
,,,https://github.com/facebook/react/issues/16239,16239, Error on unit test : Cannot read property 'Symbol(Symbol.iterator)' of undefined,[],closed,False,,3,2019-07-29T07:09:06Z,2022-04-15T10:34:15Z,2019-07-29T09:27:43Z,NONE,completed,,"@gaearon 
i have a component that has a useState hooks as below  :

`component is so big , because of that , i just write some of the problem .`

```
function Login(props){
/*...*.
    const [, dispatch] = useLoginStateValue();
    
return(
/*...*/
)

}

```

and i have a test for this component

```
jest.mock(""../../Services/login"")

it(""mock login request testing"", (done) => {
    act(() => {
        const wrapper = mount(
            <MuiThemeProvider theme={dark}>
                <Login theme={{isResponsive: true}}/>
            </MuiThemeProvider>);

        wrapper.setState({email: ""@@22WWee""})
        wrapper.setState({password: ""test@test.com""})
        wrapper.find('button#authenticate').simulate('click');

        setTimeout(() => {
            wrapper.update();
            wrapper.setState({alert: ""Bad credentials""})
            expect(wrapper.instance().state.alert).toEqual(""Bad credentials"")
            done()
        })
    })
})
```

when i run test , it shows error :
`
    Error: Uncaught [TypeError: Cannot read property 'Symbol(Symbol.iterator)' of undefined]
`

after removing `    const [, dispatch] = useLoginStateValue();` everything is ok , how can i use dispatch , and LoginStateValue without error in test ?"
,,,https://github.com/facebook/react/issues/16593,16593,Stucking in an infinite loop when add some breakpoints between  `ReactFiberWorkLoop.js#L876` and `#L891``,[],closed,False,,4,2019-08-28T07:28:16Z,2019-09-02T00:25:21Z,2019-09-02T00:25:21Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
maybe a bug
**What is the current behavior?**
In `ReactFiberWorkLoop.js`,if you add some **breakpoint** between line 876 and 891,It seems the condiction in [#L881](https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberWorkLoop.js#L881) always pass,and it return `renderRoot` as continuation,which cause an infinite loop.
It seems the  `currentTime` equal to  `expirationTime` if without any breakpoints.

**What is the expected behavior?**
Maybe it's not a bug,it only happens when you add a breakpoint between line 876 and line 891.
**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 16.9.0, Chrome"
,,,https://github.com/facebook/react/issues/16319,16319,componentDidUpdate not triggered on changes to context,[],closed,False,,5,2019-08-08T16:16:26Z,2022-01-20T05:25:37Z,2019-08-09T17:38:27Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug.

**What is the current behavior?**
Components using a context update their content upon changes to the context, but `render` and `componentDidUpdate` are not invoked even though the the components' content changes.

[Here's a JSFiddle example](https://jsfiddle.net/0ewuj8L4/). Note how the component does update (the display on screen changes), but the ""render"" messages are only logged once (to the console), while the ""update"" messages are never logged.

**What is the expected behavior?**
I guess I understand why this is happening - the components which use `Context.Consumer` don't really re-render or get updated when the context changes; only the `Context.Consumer` component does. It would still be appreciated to at least make `componentDidUpdate` get invoked somehow (automatically).

Regardless, this behavior should certainly be documented as it is quite unclear, unintuitive and not so easy to detect.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Latest React I guess? I'm running on Windows 10.0.17134.799 and Chrome 75.0.3770.142, but I believe it should replicate on other environments as well.
"
,,,https://github.com/facebook/react/issues/16443,16443,[eslint-plugin-react-hooks] JSON.stringify in ehaustive-deps,"[{""id"":1109410193,""node_id"":""MDU6TGFiZWwxMTA5NDEwMTkz"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Hooks"",""name"":""Component: Hooks"",""color"":""c2f27b"",""default"":false,""description"":""""},{""id"":1249821345,""node_id"":""MDU6TGFiZWwxMjQ5ODIxMzQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules"",""name"":""Component: ESLint Rules"",""color"":""f7afdb"",""default"":false,""description"":""""}]",closed,False,,2,2019-08-18T11:14:12Z,2020-01-24T14:22:32Z,2020-01-24T14:22:32Z,NONE,completed,,If it's practical and safe to use `[JSON.stringify(foo)]` in deps for light weight objects i think plugin should not report a warning in that case.
,,,https://github.com/facebook/react/issues/16461,16461,Initial state from props,[],closed,False,,7,2019-08-19T20:41:18Z,2019-09-03T08:47:11Z,2019-09-03T08:47:11Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Feature Request

**What is the current behavior?**
Currently, the only way to reflect a prop change that serves as the initial state for the `useState` hook is via an explicit `useEffect` call.

```js
const TodoList = ({ todos: initialTodos }) => {
  const [todos, setTodos] = useState(initialTodos);

  useEffect(() => setTodos(initialTodos), [initialTodos]);
  
  return (
    <ul>
      {todos.map(todo => (
        <li onClick={/* Do something that setTodos */}>{todo.title}</li>
      )}
    </ul>
  )
}
```

This is not particularly a rare use case. Like, displaying any filterable list in which the items need to be acted upon is basically a use case.

**What is the expected behavior?**
The first thing that comes to mind, would be adding a second argument, which is, you guessed it, a dependency array.

```js
const TodoList = ({ todos: initialTodos }) => {
  const [todos, setTodos] = useState(initialTodos, [initialTodos]);
  
  return (
    <ul>
      {todos.map(todo => (
        <li onClick={/* Something that setTodos */}>{todo.title}</li>
      )}
    </ul>
  )
}
```

There's probably a lot that I'm missing and there might be an obvious reason why this is not the actual behavior.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Latest."
,,,https://github.com/facebook/react/issues/16308,16308,useEffect false positive requiring dependencies ,[],closed,False,,4,2019-08-07T08:44:33Z,2019-08-09T05:30:34Z,2019-08-07T12:06:44Z,NONE,completed,,"https://codesandbox.io/s/lively-sea-2crwk

missing dependencies in useEffect throw false positive warning in some case. How can I remove the warning above? I can think of firing the callback on `setDropdown(, () => console.log('call api here'))`

```
useEffect(() => {
    if (inputVal) {
      callApi({ inputVal, dropdown });
    }
  }, [dropdown]);
```"
,,,https://github.com/facebook/react/issues/16299,16299,[Feature Request] Alternative to service-locator pattern in React,[],closed,False,,5,2019-08-06T03:41:45Z,2019-08-07T02:27:29Z,2019-08-07T01:55:42Z,NONE,completed,,"_**I'm sorry about the long post**_
 
### The problem:
 
Achieving dependency inversion and inversion of control within React is challenging because existing solutions rely on the service locator pattern to transport dependencies from their providers into their consumers.
 
This results in strong coupling of components to their surrounding implementations, decreasing testability, increasing boilerplate and discouraging developers from creating abstractions. 
 
A common pre-context solution to dependency injection is manually wrapping all used components with “provider” functions. An example of this is using functions like `withTheme()` or `connect()`.
 
```jsx
import { withItems } from '../items'
 
export const Hello ={ items = [] }) => {
  return <div>
    { items.map(item => <div>{item}</div>) }
  </div>
}
 
export const InjectedHello = withItems(Hello)
```
 
Wrapping components like this creates silos of troublesome testability and due to it’s unergonomic nature, discourages decoupling components from the surrounding application implementation. 
 
In order to create decoupled component packages (say a UI library that lives in npm), the author must create components which receive all dependencies via props. In order to satisfy these dependencies, a consumer must import the library and re-wrap/re-export every component, injecting their dependencies from a service locator. 
 
```javascript
import { Button } from 'generic-ui'
import { withTheme } from '../somewhere' // service locator
 
export const ThemedButton = withTheme(Button)
```
 
A consumer must also exclude the wrapped “aware” components from unit tests as it’s impractical to test them in a sensible way.
 
https://en.wikipedia.org/wiki/Service_locator_pattern
 
An example of a basic service locator in JS is here
https://stackblitz.com/edit/js-6qzkak
 
An example of a service locator with React is here
https://stackblitz.com/edit/react-tdt624
 
 
### What about context?
 
Context provides a much more ergonomic solution. It still relies on the same service-locator pattern, but it’s ease of use makes it more approachable.
 
Boiled down, what context simply provides is a vehicle for dependencies to tunnel from their creator to their consumer under the floorboards of the library. It’s essentially an alternative to drilling props from the top level to the embedded components.
 
Receiving the theme from a context `const theme = useContext(ThemeContext)` also relies on the context being supplied by a concrete location.
 
If you imagine a simple, generic concept like a store using the Flux architecture; utilities like Redux, MobX. These third party libraries *must* have “React” as a peerDependency. The only alternative is supplying a ""react-connected"" variant of their library.
 
For this reason we have the two packages, ‘redux’ and ‘react-redux’. While the latter does provide some convenience utilities, it's use is not optional. It _*must*_ exist along-side the original implementation.
 
So here is a demonstration of how React enforces coupling by not providing an effective means to handle inversion of control. Below I have a factory function which creates a flux store:
 
```javascript
export const createPostStore = () => {
  const posts = createStateEmitter([])
 
  const getValue = () => posts.getValue()
 
  const add = (post) => {
    posts.setState([
      { title: post, id: randomString() },
      ...getValue()
    ])
  }
 
  return {
    posts,
    getValue,
    add
  }
}
```
It is consumed like you would consume Redux
 
```javascript
const store = createPostStore()
store.subscribe(posts => console.log(posts))
store.add('New Post!')
```
This unit has no external dependencies and can be consumed within React to hold state and trigger re-renders. It is easily tested and can be put in npm without a hard dependency on React.
 
example:
https://stackblitz.com/edit/react-gnj8ba
 
This example shows ""prop drilling"" to get the store into the component. This is ideal from an IoC standpoint, but impractical as with many layers of embedded components, you'll pass dependencies down a long tree and it's difficult to maintain.
 
Of course, I can simply export a context from my package, but I want to avoid a hard dependency on React as it's not really a concern of the library.
 
Another solution to this problem is to have a shared, global context, where there is a contract that components will consume it and extract their required dependencies from there.
 
https://stackblitz.com/edit/react-fz6ue8
 
The challenge here is that I can't expect Bootstrap, Material, or anyone on the internet to `npm install global-context` and have it be the de facto ""shared context"" which allows for IoC/agnosticism in component implementations.
 
The last solution is to make two packages, the package itself and a second package that has a hard dependency on React and exposes a context (Just like Redux and React Redux).
 
### Ok, so what's the solution?
 
Hard to say. React applications often have many layers of components so any solution must involve supplying embedded components their dependencies in a way that scopes their ""providing"" to the current instance of React.
 
Something like a PropProvider, which supplies props to all embedded components might be a solution. It's opt-in making it minimally invasive. It changes nothing for the existing public React API and simply adds another, more flexible, option to a problem you'd normally `useTheme()` to solve.
 
```jsx
<PropProvider values={{ everyone: 'gets this' }}>
    <MyComponent />
</PropProvider>
```
 
The problem with this is naming clashes. If you're a library vendor, you'll need to be creative to avoid clashes. The custom element specification stipulates that you must hyphenate your element names to avoid, or reduce the instances of clashes. Maybe that's a solution?
 
Another option is using getter functions, where key names are nearly impossible to clash and a function knows where to look.
 
```javascript
const MyComponent = (props) => {
    const theme = getTheme(props)
}
```
 
Maybe an official static context for the react instance?
 
```jsx
ReactDOM.render(
    <App/>,
    element,
    { everyone: 'gets this' }
)
```
"
,,,https://github.com/facebook/react/issues/16620,16620,"Error: ""getCommitTree(): Unable to reconstruct tree for root ""1"" and commit 38""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,1,2019-08-30T13:41:45Z,2019-08-30T14:36:38Z,2019-08-30T14:36:27Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. Start profiling app, record and reload page
2. going through profilers commits
3. crush

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.0.6-a39d9c3

Call stack: at d (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:5745)
    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:8527)
    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:275553)
    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55891)
    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62940)
    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99536)
    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84256)
    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81286)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25364
    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)

Component stack: in bi
    in div
    in div
    in div
    in Ir
    in Unknown
    in n
    in Unknown
    in div
    in div
    in Wa
    in ce
    in be
    in So
    in Vl"
,,,https://github.com/facebook/react/issues/16370,16370,useEffect does not get executed again after 16.8.0-alpha1,[],closed,False,,0,2019-08-12T19:00:06Z,2019-08-12T19:04:10Z,2019-08-12T19:04:10Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
It is a bug

**What is the current behavior?**
As seen in this [codepen](https://codesandbox.io/s/react-hooks-playground-k8hxy), the useEffect gets updated every 500ms as expected and mentioned in the docs:  

> Does useEffect run after every render? Yes! By default, it runs both after the first render and after every update.

But if the react version is updated to a newer version, the timeout is called, the setCounter is called with 1 again (after the second run) which leads to a rerender of the component, but the effect is not executed as expected (2 is not called again and there is no loop).  As mentioned in the docs, use Effect without a second parameter should create a loop by calling the setTimeout again after setCount. But this is not the case for versions above 16.8.0-alpha1. Is this intended or not?

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
This [codepen](https://codesandbox.io/s/react-hooks-playground-k8hxy) works by creating a infinity loop. But updating the react version here 
![image](https://user-images.githubusercontent.com/17567991/62890380-aa5a1680-bd43-11e9-8f6c-0e026510365a.png)

will break the functionality and will not loop again because the useEffect is note executed if the prevoiusState === currentState. But the component gets rerendered anyway.

If the intended behavior is not the rerender the component if the state is the same, console.log(1) should not be called. So either the useEffect does not work as intended, or it is not intended that  useState triggers a rerender, if the state is the same.


**What is the expected behavior?**
The expected behavior is for the useEffect to be called in a loop even if the state is the same and the functional component is rendered.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.8.0-alpha1 works, version above it do not.

Thanks for your time and I really enjoy coding with React. Keep it up."
,,,https://github.com/facebook/react/issues/16604,16604,How should we set up apps for HMR now that Fast Refresh replaces react-hot-loader?,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,93,2019-08-28T23:30:26Z,2022-10-25T06:17:09Z,2020-08-10T12:02:59Z,NONE,completed,,"Dan Abramov mentioned that Devtools v4 will be making `react-hot-loader` obsolete: https://twitter.com/dan_abramov/status/1144715740983046144?s=20

> **Me:**
> I have this hook:
> ```require(""react-reconciler"")(hostConfig).injectIntoDevTools(opts);```
> But HMR has always worked completely without it. Is this now a new requirement?

> **Dan:**
> Yes, that's what the new mechanism uses. The new mechanism doesn't need ""react-hot-loader"" so by the time you update, you'd want to remove that package. (It's pretty invasive)

I can't see any mention of HMR in the Devtools documentation, however; now that `react-hot-loader` has become obsolete (and with it, the `require(""react-hot-loader/root"").hot` method), how should we set up apps for HMR in:

* React DOM apps
* React Native apps
* React custom renderer apps

I'd be particularly interested in a migration guide specifically for anyone who's already set up HMR via `react-hot-loader`.

Also, for HMR, does it matter whether we're using the standalone Devtools or the browser-extension Devtools?"
,,,https://github.com/facebook/react/issues/16358,16358,React state values is shared between two components!!!,[],closed,False,,1,2019-08-11T17:08:56Z,2019-08-11T17:56:22Z,2019-08-11T17:56:21Z,NONE,completed,,"**Bug**

I have two components: 
 `ComponentA` 

```js
class ComponentA extends Component {
  constructor(props) {
    super(props);

    this.nextCardSet = this.nextCardSet.bind(this);
    this.prevCardSet = this.prevCardSet.bind(this);
  }
  async prevCardSet() {
    const currPage = this.state.currPage - 1;
    const data = this.state.dataStore[currPage - 1];
    await this.setState({
      currPage,
      data
    });
  }

  async nextCardSet() {
    const currPage = this.state.currPage + 1;
    const data = this.state.dataStore[currPage - 1];
    await this.setState({
      currPage,
      data
    });
  }

  async componentDidMount() {
    const response = await this.getData();

    //...Doing some stuff...

    await this.setState({
      dataStore: mainData,
      data: mainData[currPage - 1],
      currPage,
      totalPages,
      isLoading: false
    });
  }

  async getData() {
    const response = await axios.get(
      'http://localhost:4000/getUserOverviewJson'
    );
    return response;
  }

  render() {
    return (
      <div>
          <Fab size=""small"" disabled={this.state.currPage === 1 ? true : false}>
            <NavigateBefore
              onClick={this.prevCardSet}
            />
          </Fab>
          <Fab
            size=""small""
            disabled={
              this.state.currPage === this.state.totalPages ? true : false
            }
          >
            <NavigateNext
              onClick={this.nextCardSet}
            />
          </Fab>
        </div>
        <CallWorkRender data={this.state.data} />
      </div>
    );
  }
}
```

`ComponentB`
```js
class ComponentB extends Component {
  constructor(props) {
    super(props);
    this.data = props.data;
  }

  getComponent = componentID => {
    const data = this.data['pageData'].shift();
    return ComponentGetter.getComponent(componentID, data);
  };

  render() {
    const { width, data } = this.props;
    this.data = data;
    const layoutConfigCallPrep = layoutConfig['1'][width];

    return (
      <FlexGrid
        layoutConfiguration={layoutConfigCallPrep}
        getComponent={this.getComponent}
      />
    );
  }
}

export default withWidth()(ComponentB);
```



In the initial load `ComponentA` sends data to `ComponentB` , so in CompB when `getComponent()` method is called it pops elements from array which it got as props.

**Now the data in array is manipulated in CompB but when I try to print the state of  CompA  its data also get manipulated. I don't understand how this weird data manipulation is happening. How does the data of one component gets altered due to data change in other component?**

*React@16.8.6*
*Windows 10*
"
,,,https://github.com/facebook/react/issues/16521,16521,React throws an error when using onSelectStart,[],closed,False,,7,2019-08-21T07:49:03Z,2019-09-03T10:38:48Z,2019-09-03T10:38:48Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
When setting this event handler property, React throws an error.

Example jsx:

```jsx
<div
  onSelectStart={e => e.preventDefault()}
>
  Test
</div>
```

React throws the following error:

`Warning: Unknown event handler property `onSelectStart`. It will be ignored.`

Codesandbox link: https://codesandbox.io/embed/holy-violet-4unq8

**What is the expected behavior?**
React is aware of `onSelectStart` and connects to `onselectstart` correctly, without throwing an error

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Tested on latest desktop (linux) Chromium and Firefox with react/react-dom 16.8.6 and 16.9.0, react-scripts 3.0.1 and 3.1.0.

c.f. https://github.com/facebook/react/issues/15787
"
,,,https://github.com/facebook/react/issues/16417,16417,"Error: ""Could not find commit data for root ""1"" and commit null""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,2,2019-08-16T09:48:27Z,2019-08-16T15:09:19Z,2019-08-16T15:08:34Z,NONE,completed,,"<!-- please provide repro information here -->

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.0.2-2bcc6c6

Call stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:16552)
    at pl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:293513)
    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)
    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)
    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)
    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)
    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363
    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)
    at kt (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25092)

Component stack: in pl
    in div
    in ml
    in div
    in div
    in Or
    in Unknown
    in n
    in Unknown
    in div
    in div
    in Ua
    in le
    in ve
    in ko
    in Fl"
,,,https://github.com/facebook/react/issues/16301,16301,[ReactUpdateQueue] Why don't we stop processing higher priority update when we skip a low priority update?,[],closed,False,,1,2019-08-06T15:19:35Z,2019-08-06T17:53:33Z,2019-08-06T17:53:33Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
A question.
**What is the current behavior?**
The current behavior is described in [ReactUpdateQueue.js](https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactUpdateQueue.js#L61)
```
// For example:
//
//   Given a base state of '', and the following queue of updates
//
//     A1 - B2 - C1 - D2
//
//   where the number indicates the priority, and the update is applied to the
//   previous state by appending a letter, React will process these updates as
//   two separate renders, one per distinct priority level:
//
//   First render, at priority 1:
//     Base state: ''
//     Updates: [A1, C1]
//     Result state: 'AC'
//
//   Second render, at priority 2:
//     Base state: 'A'            <-  The base state does not include C1,
//                                    because B2 was skipped.
//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
//     Result state: 'ABCD'
//
```

**What is the expected behavior?**
I think there is no need to process subsequent higher priority updates. It's a waste of cpu."
,,,https://github.com/facebook/react/issues/16355,16355,"Combination of wrapping component in function, updating state through hook and updating parent state through event listener does not update component's own state",[],closed,False,,1,2019-08-11T08:17:37Z,2019-08-11T11:22:40Z,2019-08-11T11:21:01Z,NONE,completed,," This combination of factors results in unexpected behaviour:

* returning a child component from a function in a parent component
* having an onClick listener inside child component update its own state through a hook call
* having that same listener call an event listener that updates parent state

codesandbox.io demo: https://codesandbox.io/s/nice-kepler-bur5h

I would expect the wrapped component to behave similar to the normal child component. Instead, upon click, only the parent state updates while its own state stays unchanged.
"
,,,https://github.com/facebook/react/issues/16499,16499,Wrong tab suggestion label in DevTools,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,1,2019-08-20T01:15:56Z,2019-09-03T17:38:50Z,2019-09-03T17:38:50Z,MEMBER,completed,,The popups that appear when you click on React icon still say “React tab will appear to the right”. But the tab label has changed. 
,,,https://github.com/facebook/react/issues/16616,16616,"Error: ""Cannot modify filter preferences while profiling""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,3,2019-08-30T06:58:11Z,2019-08-30T15:23:31Z,2019-08-30T15:23:31Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.0.6-a39d9c3

Call stack: at n.set (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:1:34098)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:261228
    at Fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:72851)
    at Vi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:74577)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:93355
    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)
    at kt (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25093)
    at Wl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:91165)
    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:79859)
    at M (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:2839)

Component stack: in Ma
    in div
    in div
    in div
    in Ga
    in Xa
    in div
    in lo
    in ir
    in Ir
    in Unknown
    in n
    in Unknown
    in div
    in div
    in Wa
    in ce
    in be
    in So
    in Vl"
,,,https://github.com/facebook/react/issues/16568,16568,"Error: ""getCommitTree(): Unable to reconstruct tree for root ""1"" and commit 1""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,1,2019-08-26T03:49:43Z,2019-08-26T15:38:27Z,2019-08-26T15:38:14Z,NONE,completed,,"PLEASE INCLUDE REPRO INSTRUCTIONS AND EXAMPLE CODE

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.0.5-5441b09

Call stack: at d (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:5744)
    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:8526)
    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:275512)
    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)
    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)
    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)
    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)
    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363
    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:4368)

Component stack: in bi
    in div
    in div
    in div
    in Ir
    in Unknown
    in n
    in Unknown
    in div
    in div
    in Wa
    in ce
    in be
    in So
    in Vl"
,,,https://github.com/facebook/react/issues/16410,16410,React DevTools tutorial instructions are hard to read,"[{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,5,2019-08-15T22:35:58Z,2019-08-17T20:25:03Z,2019-08-16T04:53:37Z,NONE,completed,,"**What is the current behavior?**
https://react-devtools-tutorial.now.sh/

The text on the left is difficult to read because of thin font styling
<img width=""461"" alt=""Screen Shot 2019-08-15 at 3 32 36 pm"" src=""https://user-images.githubusercontent.com/8007686/63131305-0e622200-bf72-11e9-867a-e94551a1c422.png"">
<img width=""467"" alt=""Screen Shot 2019-08-15 at 3 35 42 pm"" src=""https://user-images.githubusercontent.com/8007686/63131388-5da85280-bf72-11e9-9d11-401600713bed.png"">


**What is the expected behavior?**
Increase the contrast on the top row buttons and increase the font-weight for the text

font-weight: 300 or 400 makes it easier to read
(300 pictured)

<img width=""467"" alt=""Screen Shot 2019-08-15 at 3 35 42 pm"" src=""https://user-images.githubusercontent.com/8007686/63131491-c099e980-bf72-11e9-9195-2ee571f384f8.png"">


Running Catalina latest, macOS."
,,,https://github.com/facebook/react/issues/16855,16855,bug on ie/edge v16.9 (scheduler) ,[],closed,False,,2,2019-09-23T00:34:37Z,2019-11-24T15:48:12Z,2019-11-24T15:48:12Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
BUG

**What is the current behavior?**
It seems that scheduler v0.15.0 use methods from window (e.g., `setTimeout`, `requestAnimationFrame`) that are not properly bound to `window`, breaking in ie11 and edge with react-dom v16.9.0.
Problem in PRODUCTION mode (development is ok).

**Repo (full example)**: https://github.com/artola/react-bug

See [README](https://github.com/artola/react-bug/blob/master/README.md) in the repo for a detailed explanation.

**What is the expected behavior?**
It should work as in previous versions, e.g., v16.8.6

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Offending version: v16.9.0
Affected browsers: ie (confirmed ie11, might be others) and edge (17 might be others).
Former versions v16.0.0 up to v16.8.6 working properly.
"
,,,https://github.com/facebook/react/issues/16676,16676,Different components with the same key replicate when toggling the key,[],closed,False,,1,2019-09-05T21:26:40Z,2019-09-05T21:53:21Z,2019-09-05T21:53:21Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?** bug

**What is the current behavior?**

In the following program:

```jsx
import ""./styles.css"";

import React, {useState} from ""react"";
import {render} from ""react-dom"";

function App() {
  const [locked, setLocked] = useState(false);

  return (
    <>
      <button onClick={() => setLocked(x => !x)}>Toggle</button>
      <ul>
        <Part1 key={locked} />
        <Part2 key={locked} />
      </ul>
    </>
  );
}

function Part1() {
  return <li>Part 1</li>;
}

function Part2() {
  return <li>Part 2</li>;
}

render(<App />, document.getElementById(""root""));
```

Pressing “toggle” creates new copies of the `<Part1 />` component forever. See this Codesandbox: https://codesandbox.io/embed/suspicious-edison-gwhjk

**What is the expected behavior?**

My expectation here is either that:

- React will warn about two different component types with the same key,
- or React will unmount the component when the key changes.

The latter is how I thought React worked.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Discovered this issue when upgrading from React 15 to 16. The issue does not exist in React 15."
,,,https://github.com/facebook/react/issues/16845,16845,“Definition for rule '@typescript-eslint/consistent-type-assertions' was not found”,[],closed,False,,4,2019-09-20T20:09:10Z,2019-11-01T18:21:32Z,2019-09-21T00:01:41Z,NONE,completed,,"Hi,

There is a bug in the Create-react-app CLI.
Currently if you use and old package.json that has the : react-scripts: ^3.1.1 version. 
and you run npm i and then try to rum the site (npm start) you get the following error:

“Definition for rule '@typescript-eslint/consistent-type-assertions' was not found”

I solved this by deleting the node_module entirely, then I updated my package.json file to use the ""react-scripts: 3.1.2"" version. then i run the npm i again, and it fixed the issue.

It looks like the new create-react-app doesn't backward support the react-scripts: 3.1.1 version.

Please check this ASAP since I already see posts in StackOverflow, meaning a lot of people are going to encounter this issue.

Thanks."
,,,https://github.com/facebook/react/issues/16854,16854,[npm:create-react-class] Support PureComponent & propTypes,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,10,2019-09-22T23:12:45Z,2020-01-16T20:59:45Z,2020-01-16T20:59:45Z,NONE,completed,,"https://reactjs.org/docs/react-without-es6.html

The ""react without es6"" page should give explanation on how to use the equivalent of a `PureComponent` using `create-react-class` npm package. I Couldn't figure out how to do it. The page seems to be very outdated with new react features.

If it's not possible to do, this issue should be a feature request."
,,,https://github.com/facebook/react/issues/16711,16711,"Error: ""Could not find node with id ""44300"" in commit tree""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,5,2019-09-09T15:10:14Z,2020-01-02T16:59:04Z,2019-09-09T15:28:25Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. Reading the flamegraph of my React app
2. Clicked on one of the options in the `Rendered at` list of the graph
  ![image](https://user-images.githubusercontent.com/41026008/64542778-69710580-d2e1-11e9-8846-ab1b810e034c.png)
3. This caused the below error to appear in React DevTools.

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.0.6-a39d9c3

Call stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11442
    at Map.forEach (<anonymous>)
    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11388)
    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11921)
    at xi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:277807)
    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55891)
    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62940)
    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99536)
    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84256)
    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81286)

Component stack: in xi
    in div
    in div
    in div
    in Ir
    in Unknown
    in n
    in Unknown
    in div
    in div
    in Wa
    in ce
    in be
    in So
    in Vl"
,,,https://github.com/facebook/react/issues/16765,16765,Add third parameter to useState to get current value,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,4,2019-09-12T14:45:25Z,2019-09-12T19:01:59Z,2019-09-12T15:47:30Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Feature

**What is the current behavior?**

If you set a callback on something, e.g. inside useEffect, your callback captures the current value of that state and can never update it. To know the most up-to-date value, you currently have to call the setter with a function containing the new value, even if you only return the value you receive from it. Cf. https://stackoverflow.com/questions/57847594/react-hooks-accessing-up-to-date-state-from-within-a-callback#comment102122412_57847594

**What is the expected behavior?**

There should be a way to access the current state via a getter for these situations. Adding this as a third return value from useState would be non-intrusive and backwards compatible.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

n/a"
,,,https://github.com/facebook/react/issues/16954,16954,Why will Suspense for data fetching require a cache?,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,12,2019-09-29T21:56:33Z,2020-10-04T06:20:10Z,2020-10-04T06:20:10Z,CONTRIBUTOR,completed,,"I'm [integrating Suspense with React Async](https://github.com/async-library/react-async/pull/153), and I've been reading up on how it's supposed to work. All the resources I found talk about needing `react-cache` or another cache mechanism for Suspense to work properly. However, none of the resources explain WHY Suspense needs a cache. Could someone explain that? I've been able to [make it work without a cache](https://github.com/async-library/react-async/pull/153/files#diff-2d8d9c51cb93c9f7f57c81f6f7f1669a). Am I missing something?"
,,,https://github.com/facebook/react/issues/16661,16661,There is no 'rendered by' section in my extension,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,1,2019-09-04T20:55:04Z,2019-09-04T22:18:49Z,2019-09-04T22:18:42Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
"
,,,https://github.com/facebook/react/issues/16761,16761,useState() bug - state value different from initial value,[],closed,False,,1,2019-09-12T11:41:22Z,2019-09-12T15:55:50Z,2019-09-12T15:55:25Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a _feature_ or report a bug?**

Bug

**What is the current behavior?**

I have an Input component that uses `useState()` to handle the state of its floating label, like this:

```
const FloatingLabelInput = props => {
  const {
    value = ''
  } = props

  const [floatingLabel, toggleFloatingLabel] = useState(value !== '')
```

I have a series of those components and you'd expect `initialFloatingLabel` and `floatingLabel` to be always the same, but they're not for some of them! I can see by logging the values:

```
  const initialFloatingLabel = value !== ''
  console.log(initialFloatingLabel)
  const [floatingLabel, toggleFloatingLabel] = useState(initialFloatingLabel)
  console.log(floatingLabel)
```

As a result some of the components have the label in floating state (Postcode and Address Line 1) when they shouldn't (because they're empty), like this:

<img width=""524"" alt=""Screen Shot 2019-09-12 at 12 17 39"" src=""https://user-images.githubusercontent.com/1765942/64780453-4ef49180-d558-11e9-8dd9-9f7dbe362aff.png"">

A very interesting fact is that, if I reorder the fields, it will always be the two first fields that are affected, like in the image above.

These fields are part of a multi-step form (using [Formik](https://github.com/jaredpalmer/formik)) and the steps are handled by a state machine (using [xstate](https://github.com/davidkpiano/xstate)) library. This problem happens only on Step 2. If I set the machine to start on step 2 on app load, this will not happen.

That's on Google Chrome - on Safari, a different subset of fields are affected. There is consistency on which fields are affected in each browser though (if I don't change their order)

**What is the expected behavior?**

If you pass an initial value to `useState()`, the state variable should always be equal to that:

```
const [value, setValue] = useState(initialValue)
```

(```value``` must _always_ be equal to ```initialValue```)

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React: Version 16.8.5
Google Chrome: Version 76.0.3809.132
OS: MacOS Mojave Version 10.14.1
"
,,,https://github.com/facebook/react/issues/16791,16791,React Hooks don't work inside function without export default.,[],closed,False,,8,2019-09-16T11:50:56Z,2019-09-17T17:45:05Z,2019-09-17T17:45:04Z,NONE,completed,,"Hello, I'm trying to call the useContext hook inside a function and I get the following error 
![image](https://user-images.githubusercontent.com/33375759/64955422-de6bae80-d890-11e9-9ef3-4e119d2ba1d2.png).
This is the code that I'm trying to make it work using hooks.

`
import {MaterialUIComponentsNavigation} from 'app/main/documentation/material-ui-components/MaterialUIComponentsNavigation';
import {authRoles} from 'app/auth';
import React, {useContext, useState} from ""react"";
import TextContext from ""../TextContext"";

export function NavigationConfig () {
  const test = useContext(TextContext);
  console.log(""Navigation"",test)
return test;
}
`
And for a reason or another if I change the syntax to export default instead of just export it works. I couldn't find any explanation online (trust me I've tried) and I think this is a bug. My React versions is > 16.8.0 so that's not the issue. 

 


"
,,,https://github.com/facebook/react/issues/16691,16691,DevTools: Failed to execute 'postMessage' on 'Window': #<HTMLAllCollection> could not be cloned.,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,25,2019-09-06T22:12:51Z,2020-08-21T13:31:17Z,2020-08-21T13:31:17Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Report a bug.

**What is the current behavior?**

New dev tools are working fine. But I have a particular component that, when it mounts, the dev tools no longer can inspect anything about it. When I select it, the right hand side just says ""Loading..."" and nothing ever loads.

![interactive](https://user-images.githubusercontent.com/1316441/64463256-95fa0700-d0c0-11e9-9d7b-a853854a1bfe.gif)

As you can see from the gif above, before I click on that particular component that seems to break, I have no errors in my console. But as soon as I click on the component that breaks (or any of its children) the number of console errors goes up by one.

The error in the console looks like this:

![Screen Shot 2019-09-06 at 4 08 14 PM](https://user-images.githubusercontent.com/1316441/64463296-bc1fa700-d0c0-11e9-9cf4-4dd5fa10ff72.png)

```
backend.js:1 Uncaught DOMException: Failed to execute 'postMessage' on 'Window': #<HTMLAllCollection> could not be cloned.
    at Object.send (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/backend.js:1:94424)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/backend.js:9:5785
```

Hard to provide steps to reproduce this since it's a custom component with business-specific logic (so can't provide the code). But I tried google-ing this problem and error and nothing showed up. So figured posting it here might help if others out there on the interwebs are having the same issue and they can comment here.

**What is the expected behavior?**

Inspecting any mounted component will work.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Currently on react/react-dom 16.3 and the previous dev tools worked just fine. I could inspect any component and see it's data. But the [latestest update](https://reactjs.org/blog/2019/08/15/new-react-devtools.html) broke that.
"
,,,https://github.com/facebook/react/issues/16682,16682,Is it possible to disable all contexts within the specified subcomponent?,[],closed,False,,1,2019-09-06T10:34:18Z,2019-09-06T10:39:36Z,2019-09-06T10:39:35Z,NONE,completed,,"Here is an example. I want that contexts work in PageOne and PageTwo, but all subcomponents of SandBox won't get any context. How can I achieve it?

```jsx
const ContextA = React.createContext('a');
const ContextB = React.createContext('b');

class App extends React.Component {
  render() {
    return (
      <ContextA.Provider value=""A"">
           <ContextB.Provider value=""B"">
              <PageOne />
              <PageTwo />
              <SandBox>
                  <SubPage />
              </SandBox>
           </ContextB.Provider>
      </ContextA.Provider>
    );
  }
}

function SubPage() {
  return (
    <ContextA.Consumer>
      {a => (
        <ContextB.Consumer>
          {b => (
            <Content />
          )}
        </ContextB.Consumer>
      )}
    </ContextA.Consumer>
  );
}
```"
,,,https://github.com/facebook/react/issues/16957,16957,Webkit inline styles dissapears in Firefox,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,6,2019-09-30T13:39:44Z,2020-01-09T22:24:02Z,2020-01-09T22:24:02Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**: *bug*

**What is the current behavior?**
Missing `-webkit-print-color-adjust: exact;` in Firefox

**Demo**:
1. Run https://stackblitz.com/edit/react-skxixb in Firefox and Chrome
2. Check CSS for `.header`

**What is the expected behavior?**
`-webkit-print-color-adjust: exact;` should be placed in all browsers

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 16.9.0 and 16.10.1
Windows 10
Firefox 69.0.1"
,,,https://github.com/facebook/react/issues/16774,16774,react-hooks/exhaustive-deps suggesting wrong dependency,[],closed,False,,3,2019-09-13T12:29:00Z,2019-09-13T18:39:16Z,2019-09-13T12:33:55Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

*bug*

**What is the current behavior?**

The react-hooks/exhaustive-deps rule suggests an incorrect dependency.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

```js
function useSomething(search: string) {
  const request = useAxios({ url });

  useEffect(() => {
    if (search.length >= 3) {
      request.execute();
    }
  }, [request.execute, search]); // missing dependency `request` is shown

  useEffect(() => {
    if (request.response) {
      console.log('success');
    }
  }, [request.response]);

  return { request };
}
```

**What is the expected behavior?**

`request.execute` should be fine as a dependency, just like `request.response`. However I get a warning that I should use `request` as a dependency which is wrong (it changes more often than `request.execute` and I just use `request.execute` in my effect).

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

`eslint-plugin-react-hooks@2.0.1`"
,,,https://github.com/facebook/react/issues/16645,16645,React devtools always launches in Chrome,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,1,2019-09-03T19:15:32Z,2019-09-03T21:16:16Z,2019-09-03T21:15:40Z,NONE,completed,,"Hi.

I have the extension installed on both chrome and firefox. My default browser is firefox. Each time I try to debug a react native app remotely it launches chrome to use the debugger there.

How do I change the default browser for devtools to Firefox?"
,,,https://github.com/facebook/react/issues/16785,16785,Using a custom hook on multiple rendered components causing unexpected results,[],closed,False,,2,2019-09-15T08:18:21Z,2019-09-15T15:21:27Z,2019-09-15T15:21:27Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
I want to report an unexpected behavior I found while using a custom hook not sure if it's a possible bug or miss understanding of how custom hooks functions.


**What is the current behavior?**
Using a custom hook on multiple components, only 1 component receives updates other components don't.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React:**

**CodeSandbox:** (https://codesandbox.io/s/react-custom-hooks-nkcn6)

**What is the expected behavior?**
expected behavior is to receive same updates on all child components.

**Note** : I'm not looking for a solution because i already found mine, (using the custom hook on the parent container and pass props to child components). 

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React Version : 16.8
"
,,,https://github.com/facebook/react/issues/17202,17202,"Error: ""Could not find node with id ""1681"" in commit tree""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,1,2019-10-28T09:53:08Z,2019-10-29T16:00:17Z,2019-10-29T16:00:12Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. Was profiling component performance.

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.2.0-a8b8ffb89

Call stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:156567
    at Map.forEach (<anonymous>)
    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:156513)
    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157036)
    at gl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314363)
    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59263)
    at lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:103717)
    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89467)
    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89392)
    at pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86341)

Component stack: in gl
    in div
    in div
    in div
    in _o
    in Unknown
    in n
    in Unknown
    in div
    in div
    in zi
    in Ge
    in un
    in ba
    in Rc"
,,,https://github.com/facebook/react/issues/17235,17235,`input` event `onchange` Why is there a border?,[],closed,False,,2,2019-10-31T06:14:10Z,2019-10-31T11:04:29Z,2019-10-31T11:04:29Z,NONE,completed,,"在我开启`chrome-devtools=` 之后, `input` 的 `change` 事件, 触发后会有边框, 这是不是`chrome` 的默认行为? 还是说, 是 `react-devtools` 开发工具的行为🧐?

After I turn on `chrome-devtools=`, the `change` event of `input` will have a border after the trigger. Is this the default behavior of `chrome`? Or, is the behavior of the `react-devtools` 🧐

![test.gif](https://i.loli.net/2019/10/31/MhfqmWpBaDuvyNU.gif)"
,,,https://github.com/facebook/react/issues/17186,17186,[concurrent mode]  useMemo and useState are initialized twice,[],closed,False,,1,2019-10-26T00:11:57Z,2019-10-26T00:59:33Z,2019-10-26T00:59:33Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Report a bug

**What is the current behavior?**

In concurrent mode, `useMemo` and `useState` appear to be initialized twice.

**What is the expected behavior?**

`useMemo` callback is only called when dependencies change and`useState` initializer is only called once. https://codesandbox.io/s/upbeat-glade-cndru

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

`0.0.0-experimental-f6b8d31a7`

This bug only happens in concurrent mode. Legacy mode works as expected.
"
,,,https://github.com/facebook/react/issues/17038,17038,Components not correctly displayed,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,4,2019-10-08T08:07:27Z,2019-10-10T14:53:35Z,2019-10-09T17:44:43Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

bug

**What is the current behavior?**

elements not reconized

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

only use components tab in console of chrome.

**What is the expected behavior?**

see any elements react

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Window 10 64bit
react ^16.8.1


![image](https://user-images.githubusercontent.com/13313/66378070-068f8e80-e9b3-11e9-9956-cd8b98525efb.png)

This is my console component visualizzation, the same page visualizated with linux&chrome not have any issue"
,,,https://github.com/facebook/react/issues/17199,17199,"Identify component as 'pending', when used with useTransition","[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,6,2019-10-28T04:43:20Z,2020-05-21T01:07:18Z,2020-02-02T07:11:44Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Feature

**What is the current behavior?**

When using `useTransition`, the components are re-rendered with the last state they had. 
 Without the ability to identify this 'pending' phase, components can't conditionally choose not to throw a promise - ie. the promise was created outside React.

**What is the expected behavior?**

Components should be able to differentiate the current phase they're in, eg.

```js
const phase = usePhase()
// or
const isPending = useTransitionPending()
```

**Example**

https://codesandbox.io/s/serene-wozniak-pnhhh

**Use case**

Library (pending release): [gqless](https://gqless.netlify.com/)

I've created a factory which tracks usage of 'references' during render, and updates the components when they change:

```js
const MyComponent = connected(() => {
  const data = accessReference()
  return <div>{data}</div>
})
```

```js
function connected(component) {
	return (props) => {
		const forceUpdate = useForceUpdate()

		references = startRecording()

		try {
			return component(props)
		} finally {
			references.stopRecording()
		}
		
		for (ref of references) {
			ref.onUpdate(forceUpdate)
			ref.onPendingChange(forceUpdate)
			if (ref.isLoading) throw promise
		}
	}	
}
```

Without the ability to check whether the current component is 'pending', the promise will be thrown on the 'pending' render phase - which prevents the transition from working.

This doesn't happen in the [examples](https://reactjs.org/docs/concurrent-mode-patterns.html), as the data is immutable and passed down as the `resource` prop.
"
,,,https://github.com/facebook/react/issues/17200,17200,how can I set few different refs to one element?,[],closed,False,,2,2019-10-28T07:26:44Z,2019-10-29T12:43:46Z,2019-10-29T12:43:46Z,NONE,completed,,"for example, I had a ref from react-dnd and another one I need for outside hook. I solved it by just setting the ref to another inner div. and I can't reuse ref from react-dnd, because it's different object at all. is it possible or it's technical limitations?
"
,,,https://github.com/facebook/react/issues/17179,17179,Dynamic import with Hook.,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,4,2019-10-24T22:07:11Z,2020-12-09T15:51:00Z,2019-10-29T18:16:25Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Report a bug.

**What is the current behavior?**

Trying dynamic import with hooks and fail with this error: 

> Should have a queue. This is likely a bug in React. Please file an issue.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

```
   const [PathTest, setPathTest] = useState("""");

  import(`Layout/ModalTest`).then(module => setPathTest(module.default))
```

**What is the expected behavior?**

Dynamic import with hooks.  This is a example with class component:

import(`${path}`).then(module => this.setState({ module: module.default }))

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

    ""react"": ""^16.9.0"",Debian,Vivaldi.

"
,,,https://github.com/facebook/react/issues/17156,17156,Eslint plugin for Hooks gives warning about dispatch in dependencies,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,4,2019-10-21T11:27:22Z,2020-03-11T18:41:53Z,2019-10-22T01:43:50Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Bug.

**What is the current behavior?**

If I don't include `dispatch` in the dependency list of a `useCallback` hook, I get this warning:

```
React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.eslint(react-hooks/exhaustive-deps)
```

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**

See line 50 in `Application.js`: https://codesandbox.io/s/competent-bash-47zt1

**What is the expected behavior?**

There should be no warning, as per the [React docs](https://reactjs.org/docs/hooks-reference.html#usereducer):

> React guarantees that dispatch function identity is stable and won’t change on re-renders. This is why it’s safe to omit from the useEffect or useCallback dependency list.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

- react@16.10.2
- react-dom@16.10.2
- eslint-plugin-react-hooks@1.7.0
- eslint@6.5.1
- dbaeumer.vscode-eslint@1.9.1
- vscode@1.39.2"
,,,https://github.com/facebook/react/issues/17002,17002,Are there any react official UI templates which I can make use?,[],closed,False,,1,2019-10-03T13:24:53Z,2019-10-03T14:59:10Z,2019-10-03T14:59:10Z,NONE,completed,,
,,,https://github.com/facebook/react/issues/17126,17126,React this.context returns empty object {},[],closed,False,,4,2019-10-17T09:29:27Z,2019-10-17T14:47:44Z,2019-10-17T14:47:44Z,NONE,completed,,"it is 2 days now I'm trying to solve this nonsense riddle. I've read all documentations and answers related to this but no specific answer for my case. I run my code both on React Native 0.61 (React version 16.9.0) and Snack playground.

**Problem is: console.log(this.context) always returns empty object like this - {}**
**I must return provider value when passed console.log(this.context)** 

The code is:
`import React from 'react';
import { Text } from 'react-native';

const AppContext = React.createContext({})

class App extends React.Component {
  state = {
    products: [
      { id: 'p1', title: 'Gaming Mouse', price: 29.99 },
      { id: 'p2', title: 'Harry Potter 3', price: 9.99 },
    ],
    cart: []
  };

  render() {
    return (
      <AppContext.Provider
        value={{
          products: this.state.products
        }}
      >
      </AppContext.Provider>
    );
  }
}


export default class testScreen extends React.Component {
  static contextType = AppContext

  render() {
    console.log(this.context)

    return (
      <>
        <Text>{'Sometext'}</Text>
      </>
    );
  }
}
`

I need help urgently, because it ties my hands to go further. Thank you in advance."
,,,https://github.com/facebook/react/issues/17117,17117,Change ref mechanism to ids' ,[],closed,False,,2,2019-10-16T19:32:41Z,2019-11-02T06:36:21Z,2019-10-17T05:53:27Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
A feature request

**What is the current behavior?**
Right now when we write a component and we need a reference to it - we need to use the ref feature. Thats a cool thing but the syntax is a bit cumbersome as the developer needs to write code to declare it and also the JSX part. 

**What is the expected behavior?**
As a suggestions - developers already know and understand the usage of 'id' as a unique attribute of an element. What if the syntax would be something like `<div id=""foo"" ...>` or  `<div idName=""foo"" ...>` (copying the syntax of className). 
If React behind the scene would generate a reference with that name, or with adding dynamic-string to it - that would make the code a bit shorter, and more readable and natural
If this is implemented inside an iterator, we can do something like `<div id=""{'${index'}_foo}"" ...>` and if the developer doesn't apply something dynamically in it - have the compiler throw an error or something.  

"
,,,https://github.com/facebook/react/issues/17204,17204,Provide a way to identify an unmounting node in callback ref,[],closed,False,,1,2019-10-28T10:53:10Z,2019-11-08T10:55:37Z,2019-11-08T10:54:17Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Feature

**What is the current behavior?**

A callback ref is executed with null before the corresponding component is unmounted.

**What is the expected behavior?**

I wish I could get the reference to the node before unmounting, [as a second argument](https://github.com/facebook/react/blob/4bc52ef0dfbb0389cc20b65cef0645afb7b85445/packages/react-reconciler/src/ReactFiberCommitWork.js#L208). Below is a reduced use case.

```js
const Component = () => {
  const refs = React.useRef([])
  const setRefs = React.useCallback(
    (node, unmountingNode) => {
      if (node === null) {
        return refs.current = refs.current.filter(ref => ref !== unmountingNode)
      }
      refs.current.push(node)
   },
   [])
  return (
    <>
      <div ref={setRefs}></div>
      <div ref={setRefs}></div>
      <div ref={setRefs}></div>
    </>
  )
}
```

The ""real"" usecase is a custom hook that observe intersections. It returns `setRefs`.

EDIT: as I'm editing this issue to fix typos, I realize that the callback signature is not so nice...
"
,,,https://github.com/facebook/react/issues/17098,17098,"input[type=""number""] fires onChange twice when clicking Chrome arrows",[],closed,False,,4,2019-10-15T21:24:48Z,2019-10-17T13:52:10Z,2019-10-17T12:47:09Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
With an `input[type=""number""]`, in Chrome (confirmed only on OSX), clicking the up or down arrow inside the input increments or decrements the number twice. See example: https://codesandbox.io/s/silly-voice-syphy. 

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://codesandbox.io/s/silly-voice-syphy. 

```jsx
function App() {
  const [number, setNumber] = React.useState(0);

  return (
    <div className=""App"">
      <h1>Hello CodeSandbox</h1>
      <input
        type=""number""
        value={number}
        step=""1""
        onChange={event => {
          setNumber(event.target.value);
        }}
      />
    </div>
  );
}
```

**What is the expected behavior?**
It should only increment it once. 

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Tested on React 16.10.2 and 16.8. I've confirmed this happens in Chrome on OSX, but not Firefox on OSX. 
"
,,,https://github.com/facebook/react/issues/17482,17482,No workaround for issues with autofocus,[],closed,False,,2,2019-11-28T08:06:22Z,2019-12-02T09:36:11Z,2019-12-02T09:36:10Z,NONE,completed,,"Bug report

There is no workaround for autoFocus! the linter will not compile typescript code when using autofocus. Readers and accessibility issues, could you please provide a workaround for this problem alternatively please remove it from the library as it causes more issues than it is worth.

"
,,,https://github.com/facebook/react/issues/17352,17352,Upgrade Rollup to 0.68.1+,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":71502270,""node_id"":""MDU6TGFiZWw3MTUwMjI3MA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure"",""name"":""Component: Build Infrastructure"",""color"":""f9d0c4"",""default"":false,""description"":null}]",closed,False,,10,2019-11-13T04:07:32Z,2021-06-30T13:38:45Z,2021-06-30T13:38:45Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug-ish.

**What is the current behavior?**
`import 'react'` (where 'react' is the UMD module build) from an ES module will fail due to https://github.com/rollup/rollup/pull/2274.  `this` is not set in the context of ES modules, so if you try to `import 'react'` in that context you will get a runtime error since `this` is undefined and Rollup (before the linked fix) tries to use `this` when it really means `globalThis` or `self`.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
```
npm install react
```
`index.html`
```html
<!DOCTYPE html>
<head><meta charset='utf-8'></head>
<body>
	<script type='module'>
		import './node_modules/react/umd/react.development.js'
	</script>
</body>
```

**What is the expected behavior?**
The React UMD module can be loaded by an ES module.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React: 16.11.0
Firefox: 70.0.1
Windows 10"
,,,https://github.com/facebook/react/issues/17332,17332,"useTransition: After startTransition, it does not react to passed props changes","[{""id"":40929153,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement"",""name"":""Type: Enhancement"",""color"":""84b6eb"",""default"":false,""description"":null},{""id"":1205087127,""node_id"":""MDU6TGFiZWwxMjA1MDg3MTI3"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Features"",""name"":""Component: Concurrent Features"",""color"":""ffccd3"",""default"":false,""description"":""""}]",closed,False,,7,2019-11-10T08:47:41Z,2020-06-29T18:30:35Z,2020-06-29T18:30:35Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Probably a bug
**What is the current behavior?**
After firing startTransition, ""current"" component stops reacting to passed props changes while reacting to local state changes.
**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

In the following CodeSandBox, `count` is counting up in the parent component using `setInterval` but if we click ""CLICK ME"", it suddenly stops updating.
https://codesandbox.io/s/usetransition-stop-reacting-passed-props-updates-p9k1b

**What is the expected behavior?**
When passed props change, it should show the latest value of it where possible

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Experimental build (0.0.0-experimental-5faf377df)"
,,,https://github.com/facebook/react/issues/17454,17454,Why useEffect's default behavior is to run on every render?,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,3,2019-11-25T23:35:19Z,2019-12-02T10:03:23Z,2019-12-02T10:02:41Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
API design question about `useEffect`

**What is the current behavior?**
Currently `useEffect` runs on every render. This default behavior can be dangerous in situations like dealing with HTTP requests when you forget to pass the second argument. This seems to be a common mistake especially for newcomers like myself. I can't think of many (any) patterns where you want to run `useEffect` on every render. What was the reasoning behind not defaulting to run once? 
"
,,,https://github.com/facebook/react/issues/17306,17306,img onLoad does not always fire in react 18,"[{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,False,,11,2019-11-07T19:29:09Z,2022-03-31T15:28:14Z,2022-03-31T09:41:16Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug
**What is the current behavior?**

`<img onLoad={fn} />` does not always trigger `fn` when rendered using createRoot if it has siblings which are heavy to render (I think?).

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://codesandbox.io/s/quiet-dawn-t1std
You might have to use the retry button a few times, but hopefully you should be able to see it. Don't disable cache while trying

**What is the expected behavior?**

onLoad always fires if img gets loaded.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

0.0.0-experimental-f6b8d31a7
Reproduced in chrome and firefox windows. Have not tried the codesandbox in mac, but the actual bug in our app occurred there first so I'd be surprised if it is OS specific.

It does not happen with regular ""sync"" mode."
,,,https://github.com/facebook/react/issues/17276,17276,Unexpected value order with useTransition,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":1205087127,""node_id"":""MDU6TGFiZWwxMjA1MDg3MTI3"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Features"",""name"":""Component: Concurrent Features"",""color"":""ffccd3"",""default"":false,""description"":""""}]",closed,False,,4,2019-11-05T09:17:35Z,2021-04-20T16:21:44Z,2021-04-20T16:21:44Z,CONTRIBUTOR,completed,,"The order of returned values in useTransition is opposite to what I consider to be an established pattern of `[value, function]`.

Current: `const [startTransition, isPending] = useTransition()`.
Expected: `const [isPending, startTransition] = useTransition()`.
Also fine: `const { startTransition, isPending } = useTransition()`.

## Rationale

The order is in my opinion inconsistent with other hooks, built-in and community hooks, and this inconsistency is somewhat bothersome on the aesthetic level.

Users without tooling support (TypeScript et al) will see `Uncaught TypeError: startTransition is not a function` error whenever they get the order wrong.

Having this insonsistency risks reducing the strength of the convention in the community, making hooks less convenient to use overall.

## Built-in hooks

```js
const [state, setState] = useState();
const [state, dispatch] = useReducer();
const [startTransition, isPending] = useTransition();
```

## Community examples

I have done a quick overview of positional returned values from hooks in the community. Hooks that use `[value, function]` pattern:

[useImmer](https://github.com/immerjs/use-immer#useimmer), [streamich/react-use](https://github.com/streamich/react-use) ([useTimeout](https://github.com/streamich/react-use/blob/master/docs/useTimeout.md), [useSessionStorage](https://github.com/streamich/react-use/blob/master/docs/useSessionStorage.md), [useLockBodyScroll](https://github.com/streamich/react-use/blob/master/docs/useLockBodyScroll.md), [useLocalStorage](https://github.com/streamich/react-use/blob/master/docs/useLocalStorage.md), [useToggle](https://github.com/streamich/react-use/blob/master/docs/useToggle.md)) [bdbch/react-localstorage](https://github.com/bdbch/react-localstorage), [rehooks/local-storage](https://github.com/rehooks/local-storage), [react-rekindle/use-request](https://github.com/react-rekindle/use-request).

Hooks that use `[function, value]` pattern: none.

## Is second value optional?

One could argue that, unlike with other examples, useTransition does not require the user to care about the `isPending` value. However, not using isPending creates a poor UX that the extisting React docs explicitly call out as a problem. We’re supposed to care about isPending. ([docs](https://github.com/reactjs/reactjs.org/blob/081bb31226919062938ef924472ba1b4170facfc/content/docs/concurrent-mode-patterns.md#adding-a-pending-indicator-adding-a-pending-indicator)).

Besides, even with corrected value order, the user can still ignore isPending at a low cost of an explicit parameter skip (`const [, startTransition] = useTransition()`).

## Can we return an object?

useState returns a list for convenient aliasing:

```ts
const [color, setColor] = useState();
const [position, setPosition] = useState();
```

For hooks that a single component uses only once the benefit is significantly reduced and the community often chooses to return an object with named values instead. This removes the problem of getting positioned values incorrectly and is more inline with the broader JavaScript ecosystem.

I am speculating here, but it seems like a component will often only have one transition, like [the Button example in the docs](https://github.com/reactjs/reactjs.org/blob/081bb31226919062938ef924472ba1b4170facfc/content/docs/concurrent-mode-patterns.md#baking-transitions-into-the-design-system-baking-transitions-into-the-design-system). In that case it seems beneficial to return named values and reserve the positioned return values for cases where it really matters.
"
,,,https://github.com/facebook/react/issues/17405,17405,Devtools: broken indentation in the components tree,"[{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,4,2019-11-20T11:04:06Z,2019-11-27T10:50:42Z,2019-11-26T19:38:14Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
a bug

**What is the current behavior?**
Items in the components' tree are rendered as a plain list

![Screenshot 2019-11-20 at 13 58 42](https://user-images.githubusercontent.com/12268898/69233511-1697b200-0b9e-11ea-93d4-e1484195b295.png)
![Screenshot 2019-11-20 at 14 05 35](https://user-images.githubusercontent.com/12268898/69233941-fa484500-0b9e-11ea-976d-35b65a0f9761.png)

**What is the expected behavior?**
Each item has an indentation according to its depth in the tree

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React Developer Tools @ 4.2.0 (Chrome Extension)
Google Chrome @ 78.0.3904.108
"
,,,https://github.com/facebook/react/issues/17460,17460,[useReducer] Inconsistent behavior of `dispatch` on first call and laters,[],closed,False,,3,2019-11-26T12:21:36Z,2019-11-26T22:21:11Z,2019-11-26T20:49:48Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Maybe a bug

**What is the current behavior?**
```javascript
function reducer(state, action) {
  console.log(""run reducer"");
  switch (action.type) {
    case ""INCREMENT"": {
      return state + 1;
    }
    default:
      return state;
  }
}

function increase() {
  dispatch({
    type: ""INCREMENT""
  });
  console.log(""after dispatch"");
}
```
**The output of the first time calling `increase`:**
```
run reducer
after dispatch
```
**The output of the later times calling `increase`:**
```
after dispatch
run reducer
```

https://codesandbox.io/s/infallible-bassi-r0k3w
(open this link of reproduction, and see the console logs)
---

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**
The sequence of output should keep same.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
^16.8.0"
,,,https://github.com/facebook/react/issues/17273,17273,useTransition's startTransition function can result in infinite loop when it's included as a useEffect dependency,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":1205087127,""node_id"":""MDU6TGFiZWwxMjA1MDg3MTI3"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Features"",""name"":""Component: Concurrent Features"",""color"":""ffccd3"",""default"":false,""description"":""""}]",closed,False,,2,2019-11-04T23:12:15Z,2020-08-28T18:49:01Z,2020-08-28T18:49:01Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**

Bug

**What is the current behavior?**

I've narrowed it down to this:

https://codesandbox.io/s/usetransition-useeffect-dependency-issue-2olmx

Basically, what I *think* is important is:

1. There's a state change resulting in the useEffect being called
2. The useEffect callback starts a transition
3. The transition callback sets state
4. The set state results in a render which suspends

If these are all the case, then including the `startTransition` function in the dependency array will trigger an infinite loop. In the codesandbox I have a safety in place so your browser doesn't fall over.

**What is the expected behavior?**

The `startTransition` function should be consistent between renders.

I've observed that if you do not inline the config to `useTransition` then this is not a problem. I know that the docs recommend keeping this config consistent, but if this is desirable behavior, then maybe a warning about this particular situation in the docs would be useful. I expect that inlining the config will be pretty natural for people.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

- react@0.0.0-experimental-f6b8d31a7
- react-dom@0.0.0-experimental-f6b8d31a7"
,,,https://github.com/facebook/react/issues/17467,17467,Is there any reason why React.version is still stuck in 16.8.6 ?,[],closed,False,,2,2019-11-26T22:22:56Z,2019-11-27T12:10:36Z,2019-11-27T12:10:36Z,NONE,completed,,"In 16.12.0 and in some previous versions, React.version still return 16.8.6"
,,,https://github.com/facebook/react/issues/17279,17279,It's confusing that useTransition doesn't do anything outside of user-blocking events,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":1205087127,""node_id"":""MDU6TGFiZWwxMjA1MDg3MTI3"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Features"",""name"":""Component: Concurrent Features"",""color"":""ffccd3"",""default"":false,""description"":""""}]",closed,False,,5,2019-11-05T17:29:14Z,2019-11-15T22:46:52Z,2019-11-15T22:46:51Z,MEMBER,completed,,"I ran into this when implementing Back button transition in a router. Because the transition is inside a browser `popstate` event, it gets batched with the low pri update, and the pending state doesn't appear.

I had to do [this](https://github.com/gaearon/suspense-experimental-github-demo/blob/cb75d1a71847be85e1365d8b33f766a0d0e21463/src/createRouter.js#L68-L69) to work around it but it's unfortunate. We might want to fix this by treating pending state as special. Or maybe a warning — but then we need a first-class official API for opting into user blocking pri."
,,,https://github.com/facebook/react/issues/17292,17292,"Error: ""Could not find commit data for root ""729"" and commit 2""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,2,2019-11-06T19:11:13Z,2019-11-26T19:15:53Z,2019-11-26T19:15:39Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. Viewing a component within Storybook
2. Opened Profiler
3. Changed the target from Root to Story

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.2.0-a8b8ffb89

Call stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:162685)
    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332158)
    at sc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332375)
    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59263)
    at Hi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:66573)
    at lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104884)
    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89467)
    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89392)
    at pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86341)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45721

Component stack: in sc
    in div
    in div
    in _o
    in Unknown
    in n
    in Unknown
    in div
    in div
    in zi
    in Ge
    in un
    in ba
    in Rc"
,,,https://github.com/facebook/react/issues/17434,17434,useEffect executes return block before the main one,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,4,2019-11-22T13:22:39Z,2020-02-27T17:17:58Z,2020-02-27T17:17:58Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Report a bug

**What is the current behavior?**
When there is a time consuming activity in main block of useEffect, return block gets executed first, then the main block. This is an anti-pattern.

**Steps to reproduce.**
https://codesandbox.io/s/react-hooks-playground-ych47

**What is the expected behavior?**
In useEffect hook, return block should always be executed last, and nothing after it, right? It doesn't make sense to do a cleanup before actually doing some activity first.
"
,,,https://github.com/facebook/react/issues/17516,17516,"map through connected component, get data of last saga call within all componenets",[],closed,False,,1,2019-12-03T23:39:37Z,2019-12-04T05:30:10Z,2019-12-04T05:30:10Z,NONE,completed,,"
** want to report a *bug*?**

**What is the current behavior?**

i have a connect componenet name Section(Redux component), which render a section within a View.

Sometimes the View has more than one Section and this how i render:
`/**
 *
 * SubViews
 *
 */

import React, { memo, useEffect } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { createStructuredSelector } from 'reselect';
import { compose } from 'redux';
import { Box } from '@material-ui/core';
import { handleErrorStatus } from 'utils/apiUtils';
import EmptyPaper from 'components/layout/atoms/EmptyPaper';
import ViewSection from 'containers/ViewSection';

import { strings } from 'constants/strings';
import { useInjectSaga } from 'utils/injectSaga';
import { useInjectReducer } from 'utils/injectReducer';
import reducer from './reducer';
import saga from './saga';
import { loadSubViews } from './actions';
import makeSelectSubViews, {
  makeSelectSubViewsLoading,
  makeSelectSubViewsError,
} from './selectors';

export function SubViews({
  handleLoadViewSections,
  views,
  viewsLoading,
  viewsError,
  siteId,
  assessmentId,
  location,
  history,
}) {
  useInjectReducer({ key: 'subViews', reducer });
  useInjectSaga({ key: 'subViews', saga });
  const pathnames = location.pathname.split('/').filter(x => x);
  useEffect(() => {
    const viewcode = pathnames[6];
    if (siteId !== undefined && siteId !== null) {
      handleLoadViewSections(siteId, assessmentId, viewcode);
    }
  }, []);

  if (viewsLoading) {
    return <EmptyPaper type=""loading"" text={strings.viewSectionsLoading} />;
  }
  if (handleErrorStatus(viewsError)) {
    return <EmptyPaper type=""empty"" text={handleErrorStatus(viewsError)} />;
  }
  if (views === null || views.length === 0) {
    return (
      <Box p={4}>
        <EmptyPaper type=""empty"" text=""no data"" />
      </Box>
    );
  }
  return (
    <>
      <Box p={4}>
        {views[0].sections.map(section => (
          <ViewSection
            key={section.id}
            viewcode={views[0].viewCode}
            section={section}
            history={history}
            location={location}
            siteId={siteId}
            assessmentId={assessmentId}
          />
        ))}
      </Box>
    </>
  );
}

SubViews.propTypes = {
  handleLoadViewSections: PropTypes.func.isRequired,
  views: PropTypes.array,
  viewsLoading: PropTypes.bool.isRequired,
  viewsError: PropTypes.bool.isRequired,
  siteId: PropTypes.number,
  assessmentId: PropTypes.string,
  location: PropTypes.object,
  history: PropTypes.object,
};

const mapStateToProps = createStructuredSelector({
  views: makeSelectSubViews(),
  viewsLoading: makeSelectSubViewsLoading(),
  viewsError: makeSelectSubViewsError(),
});

function mapDispatchToProps(dispatch) {
  return {
    handleLoadViewSections: (siteId, assessmentId, viewcode) => {
      dispatch(loadSubViews(siteId, assessmentId, viewcode));
    },
  };
}

const withConnect = connect(
  mapStateToProps,
  mapDispatchToProps,
);

export default compose(
  withConnect,
  memo,
)(SubViews);
`





and my Section code is:







`/**
 *
 * ViewSection
 *
 */

import React, { memo, useEffect, useCallback } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import SectionTitle from 'components/layout/atoms/SectionTitle';
import QuestionsPanel from 'components/sections/QuestionsPanel';
import { createStructuredSelector } from 'reselect';
import { compose } from 'redux';
import Location from 'containers/sections/Location';
import Assets from 'containers/sections/Assets';
import Threats from 'containers/sections/Threats';
import { useInjectSaga } from 'utils/injectSaga';
import { useInjectReducer } from 'utils/injectReducer';
import {
  makeSelectQuestions,
  makeSelectQuestionsLoading,
  makeSelectQuestionsError,
} from './selectors';
import reducer from './reducer';
import saga from './saga';
import { loadQuestions, updateAnswer } from './actions';
import {
  makeSelectDescriptors,
  makeHelperDataSelector,
} from '../Site/selectors';
import { toggleHelpPanel } from '../Site/actions';

export function ViewSection({
  section,
  viewcode,
  siteId,
  assessmentId,
  history,
  location,
  handleLoadQuestions,
  questions,
  loading,
  error,
  handleUpdateAnswer,
  descriptors,
  helperData,
  handletoggleHelpPanel,
}) {
  useInjectReducer({ key: 'viewSection', reducer });
  useInjectSaga({ key: 'viewSection', saga });
  console.log('ViewSection()');
  console.log(section);
  // console.log(viewcode);
  useEffect(() => {
    console.log('ViewSection() useEffect()');
    if (section.contentType === 'Questions') {
      handleLoadQuestions(
        siteId,
        assessmentId,
        viewcode,
        section.sectionCode,
        descriptors,
      );
    }
  }, [section]);

  const onHandleUpdateAnswer = useCallback((answer, answerId) => {
    handleUpdateAnswer(siteId, assessmentId, answer, answerId);
  }, []);

  if (section.contentType === 'Locations') {
    return (
      <Location
        history={history}
        location={location}
        siteId={siteId}
        assessmentId={assessmentId}
        section={section}
        loading={loading}
        error={error}
      />
    );
  }
  if (section.contentType === 'Assets') {
    return (
      <Assets
        history={history}
        location={location}
        siteId={siteId}
        assessmentId={assessmentId}
        section={section}
      />
    );
  }
  if (section.contentType === 'Threats') {
    return (
      <Threats
        history={history}
        location={location}
        siteId={siteId}
        assessmentId={assessmentId}
        section={section}
      />
    );
  }

  const handleDrawerClose = (itemId, isDrawerOpen, ratings, colorOrder) => {
    handletoggleHelpPanel({ itemId, isDrawerOpen, ratings, colorOrder });
  };
  console.log('ViewSection() render');
  console.log(questions)

  if (section.contentType === 'Questions') {
    return (
      <QuestionsPanel
        headingText={section.title}
        helperData={helperData}
        handleDrawerClose={handleDrawerClose}
        key={section.id}
        loading={loading}
        error={error}
        questionsList={questions}
        handleAnswerSubmit={onHandleUpdateAnswer}
      />
    );
  }

  return (
    <div>
      <SectionTitle text={section.title} />
    </div>
  );
}

ViewSection.propTypes = {
  section: PropTypes.object.isRequired, // from parent compoenent
  viewcode: PropTypes.string.isRequired, // the view code from parent
  location: PropTypes.object,
  history: PropTypes.object,
  siteId: PropTypes.number,
  assessmentId: PropTypes.string,
  handleLoadQuestions: PropTypes.func,
  questions: PropTypes.array,
  loading: PropTypes.bool,
  error: PropTypes.any,
  handleUpdateAnswer: PropTypes.func,
  descriptors: PropTypes.array.isRequired,
  helperData: PropTypes.object,
  handletoggleHelpPanel: PropTypes.func,
};

const mapStateToProps = createStructuredSelector({
  questions: makeSelectQuestions(),
  loading: makeSelectQuestionsLoading(),
  error: makeSelectQuestionsError(),
  descriptors: makeSelectDescriptors(),
  helperData: makeHelperDataSelector(),
});

function mapDispatchToProps(dispatch) {
  return {
    handleLoadQuestions: (
      siteId,
      assessmentId,
      viewcode,
      sectioncode,
      descriptors,
    ) => {
      dispatch(
        loadQuestions(siteId, assessmentId, viewcode, sectioncode, descriptors),
      );
    },
    handleUpdateAnswer: (siteId, assessmentId, updatedAnswer, answerId) => {
      dispatch(updateAnswer(siteId, assessmentId, updatedAnswer, answerId));
    },
    handletoggleHelpPanel: (action, helperData) => {
      dispatch(toggleHelpPanel(action, helperData));
    },
  };
}

const withConnect = connect(
  mapStateToProps,
  mapDispatchToProps,
);

export default compose(
  withConnect,
  memo,
)(ViewSection);
`

Now, when my page renders, i get list of sections with their own headings but i get same lits of questions within all the sections.

this screen schot of console will explain it better
![console](https://user-images.githubusercontent.com/29419606/70099157-1f9a8000-1682-11ea-8c87-caf480d31c62.PNG)


**What is the expected behavior?**

it is expected when i map through my connected component, each one triggers it's own saga and reducer and render its own related question list
"
,,,https://github.com/facebook/react/issues/17671,17671,Unexpected component function call using useState ,[],closed,False,,0,2019-12-20T03:08:20Z,2019-12-20T03:08:35Z,2019-12-20T03:08:35Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

*bug*

**What is the current behavior?**

There is a simple count component with two buttons: +1 or +0. When I click the +0 button, component will not 

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://codesandbox.io/s/long-firefly-nz5px?fontsize=14&hidenavigation=1&theme=dark

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
"
,,,https://github.com/facebook/react/issues/17552,17552,react-refresh load from CDN?,"[{""id"":40929153,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement"",""name"":""Type: Enhancement"",""color"":""84b6eb"",""default"":false,""description"":null},{""id"":1649755876,""node_id"":""MDU6TGFiZWwxNjQ5NzU1ODc2"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Fast%20Refresh"",""name"":""Component: Fast Refresh"",""color"":""473bcc"",""default"":false,""description"":""""}]",closed,False,,10,2019-12-09T07:42:10Z,2022-08-26T06:23:28Z,2019-12-17T13:56:36Z,CONTRIBUTOR,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

feature

**What is the current behavior?**

When `react-dom` is loaded from CDN like `<script src=""https://cdn.jsdelivr.net/npm/react-dom@16.12.0/umd/react-dom.development.js""></script>`, `react-refresh` failed to inject hook into devtools.

I've created a related issue here: https://github.com/pmmmwh/react-refresh-webpack-plugin/issues/13

We should find a way to invoke `injectIntoGlobalHook` function from `react-refresh/runtime`, however this file is in cjs format so we cannot currently do this in a simple way.

**What is the expected behavior?**

I'd like `react-refresh` to publish runtime as a umd bundle so we can reference it from CDN and put it before `react-dom`'s `<script>` element, then invoke `injectIntoGlobalHook` in the right place.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

- `react-dom`: 16.12.0
- `react-refresh`: 0.7.0"
,,,https://github.com/facebook/react/issues/17664,17664,console tab,[],closed,False,,2,2019-12-19T17:52:25Z,2019-12-19T22:04:59Z,2019-12-19T21:44:46Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
"
,,,https://github.com/facebook/react/issues/17595,17595,[HMR] Waiting for update signal from WDS...,[],closed,False,,4,2019-12-13T09:10:01Z,2020-02-15T18:56:08Z,2020-02-15T18:56:08Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
With react-scripts@3.3.0, `[HMR] Waiting for update signal from WDS...` is written to the console after running npm start.

**What is the expected behavior?**
No console statement is produced.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Observed in react-scripts@3.3.0 but not observed in react-scripts@3.2.0
"
,,,https://github.com/facebook/react/issues/17677,17677,How can i create a dynamic ENum,[],closed,False,,2,2019-12-20T07:55:18Z,2019-12-20T17:23:06Z,2019-12-20T17:23:06Z,NONE,completed,,"This request asking about existing features supported by ReactJS. I have an enum in use on several reactJS pages(200 implementations across 32 code files). Now the requirement is to make it dynamic. I am not sure how can i achieve it in ReactJS+REDUX implementation. 

I am working on the latest version of ReactJS"
,,,https://github.com/facebook/react/issues/17741,17741,hydrate SVG error: Expected server HTML to contain a matching <clipPath> in <svg>,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,12,2019-12-29T19:33:12Z,2022-08-17T19:22:26Z,2022-03-30T00:22:36Z,NONE,completed,,"
**Do you want to request a *feature* or report a *bug*?**

bug

**What is the current behavior?**

It seems like `ReactDOM.hydrate` doesn't play nice with certain kinds of inline SVGs.
Specifically ones that have `clipPath`s

When nextjs tries calling hydrate on a page with one of these SVGs, the offending part of the svg flashes quickly then react throws this error to the console.

```
Expected server HTML to contain a matching <clipPath> in <svg>.
```

I have a very small example of this happening here https://github.com/Delray-Devs/site/tree/brokenSVG

The strange part is when next builds the site statically it all works.

I originally opened this issue on zeit/nextjs, but @timneutkens suggested I open the issue here.

See https://github.com/zeit/next.js/issues/9871 for all the details.

**What is the expected behavior?**

The SVG containing the `clipPath` gets rendered correctly on the client side.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React: 16.12, not sure about previous versions
Browser: Firefox and Chrome
OS: macOS
"
,,,https://github.com/facebook/react/issues/17743,17743,Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined.,[],closed,False,,1,2019-12-29T21:59:37Z,2019-12-30T15:49:25Z,2019-12-30T15:49:25Z,NONE,completed,,"```js
import React from ""react"";
import * as reactNative from ""react-native"";
import { MapView } from ""react-native-maps"";

export default class App extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      region: {
        latitude: 37.78825,
        longitude: -122.4324,
        latitudeDelta: 0.922,
        longitudeDelta: 0.0421
      }
    };
  }
  render() {
    return (
      <reactNative.View style={styles.container}>
        <reactNative.Text>home screen</reactNative.Text>
        <MapView
          initialRegion={this.state.region}
          ShowsCompass={true}
          rotateEnabled={false}
          Style={{ flex: 1 }}
        ></MapView>
      </reactNative.View>
    );
  }
}

const styles = reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: ""#fff""
  }
});
```

**Edited** for formatting by @bvaughn"
,,,https://github.com/facebook/react/issues/17617,17617,getDerivedStateFromProps not update state,[],closed,False,,2,2019-12-16T10:39:48Z,2019-12-20T21:37:18Z,2019-12-20T21:37:18Z,NONE,completed,,"I have problem when use getDerivedStateFromProps. This is my code 

```jsx
   static getDerivedStateFromProps(nextProps, prevState) {
    console.log('run here to rerender', nextProps.userInfo)
    let route = [];
    nextProps.userInfo.listtab.map((item, index) => {
      route.push({
        title_vi: item.name_vi,
        title_en: item.name_en,
        key: item.id.toString(),
        is_vip: item.is_vip_price,
        flagTab: index
      });
      console.log('Check data item shop:', item, route)
    });
    console.log(""data rerender tabbar:"", route)
    return { routes: route };
  }
```

With first console, i'm get good value and it is what i want. But when second and third console and ""return"" value i receive not nextProps, and state not change with new data"
,,,https://github.com/facebook/react/issues/17534,17534,Jest React UI - unit testing,[],closed,False,,1,2019-12-05T11:53:20Z,2019-12-07T16:30:41Z,2019-12-07T16:30:40Z,NONE,completed,,"I am pretty new to React and Jest unit test framework. I have my component and trying to write few unit test cases , tried few ways and unable to proceed further. Here is my code and test case. Can anyone guide /suggest the best approaches please. Non of the tests work and Thanks

React UI component Header

import React from 'react';
import { Navbar, NavbarBrand } from 'reactstrap';
import { Link } from 'react-router-dom';


const Header = ({children}) =>
    <Navbar light className=""sticky-top navbar-expand-lg navbar-toggleable-sm bg-white border-bottom"">
        <NavbarBrand tag={Link} to=""/"">Abc: Portal</NavbarBrand>
        <div className=""d-flex w-100 justify-content-end"">
            {children}
        </div>
    </Navbar>

export default Header
Tests - First two test cases passes, the third test case fails with error Expected is """" for received is ""undefined "" could anyone please guide me in the right direction.

import React from 'react'
import { shallow, mount } from 'enzyme';
import { Navbar, NavbarBrand } from 'reactstrap';
import { cleanup } from '@testing-library/react';
import renderer from 'react-test-renderer';
import { render, unmountComponentAtNode, ReactDOM } from ""react-dom"";
import { act } from ""react-dom/test-utils"";
import GlobalSettings from './../features/Header/GlobalSettings';
import UserDisplayName from './../features/Header/UserDisplayName';
import { Link, MemoryRouter  } from 'react-router-dom';
import Header from './../features/Header/';

import Enzyme from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';

Enzyme.configure({ adapter: new Adapter() });

// automatically unmount and cleanup DOM after the test is finished.
afterEach(cleanup);

let container = null;
beforeEach(() => {
    // setup a DOM element as a render target
    container = document.createElement(""div"");
    document.body.appendChild(container);
});

afterEach(() => {
    // cleanup on exiting
    unmountComponentAtNode(container);
    container.remove();
    container = null;
});
    
test('renders correctly', () => {
    const tree = shallow(
        <NavbarBrand>
            Damage Matrix: Customer Portal
        </NavbarBrand>
        );
       
    expect(tree).toMatchSnapshot();
});

test('renders correctly', () => {
    const tree = renderer.create(
        <NavbarBrand>
            Damage Matrix: Customer Portal
        </NavbarBrand>
        ).toJSON();

    expect(tree).toMatchSnapshot();
});
test('test Header', () => {
    act(() => {
        render(<MemoryRouter><Header /></MemoryRouter>, container);
    });
    expect(container.children.afterEach).toBe("""");

    act(() => {
        render(<MemoryRouter><Header children=""Hello"" /></MemoryRouter>, container);
    });
    expect(container.appendChild).toBe(""Hello"");

    act(() => {
        render(<MemoryRouter><Header>Testing Hello Children</Header></MemoryRouter>, container);
    });
    expect(container.appendChild).toBe(<UserDisplayName />);

});
"
,,,https://github.com/facebook/react/issues/17673,17673,"Error: ""Could not find node with id ""678"" in commit tree""",[],closed,False,,0,2019-12-20T04:09:58Z,2019-12-20T04:10:30Z,2019-12-20T04:10:30Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.2.1-3816ae7c3

Call stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108
    at Map.forEach (<anonymous>)
    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)
    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)
    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)
    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)
    at el (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:68139)
    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108547)
    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)
    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)

Component stack: in vl
    in div
    in div
    in div
    in wo
    in Unknown
    in n
    in Unknown
    in div
    in div
    in Li
    in $e
    in dn
    in Ca
    in Pc"
,,,https://github.com/facebook/react/issues/17602,17602,haml,[],closed,False,,0,2019-12-14T14:04:27Z,2019-12-18T10:17:34Z,2019-12-18T10:17:34Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
"
,,,https://github.com/facebook/react/issues/17507,17507,"Error: ""Could not find node with id ""18486"" in commit tree""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,1,2019-12-03T08:09:08Z,2019-12-03T15:42:23Z,2019-12-03T15:41:53Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. Clicked restart and start profiling
2. Finished profiling
3. Clicked on a commit and got the error below

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.2.1-3816ae7c3

Call stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108
    at Map.forEach (<anonymous>)
    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)
    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)
    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)
    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)
    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)
    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)
    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)
    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)

Component stack: in vl
    in div
    in div
    in div
    in wo
    in Unknown
    in n
    in Unknown
    in div
    in div
    in Li
    in $e
    in dn
    in Ca
    in Pc"
,,,https://github.com/facebook/react/issues/17593,17593,validateDOMNesting incorrectly validates <tr> - children of <table>,[],closed,False,,3,2019-12-13T07:27:54Z,2021-04-25T06:39:01Z,2019-12-13T08:16:17Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

bug.

**What is the current behavior?**

validateDOMNesting shows warning when`<tr>` used as a child of  `<table>`, after any `<caption>`, `<colgroup>` and `<thead>` but only if there no `<tbody>` are children of the `<table>`.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://codesandbox.io/s/empty-rgb-s5x9w
In the console, you will see warning: `validateDOMNesting(...): <tr> cannot appear as a child of <table>. Add a <tbody> to your code to match the DOM tree generated by the browser.`

**What is the expected behavior?**

According to [`<tr>` definition from W3C](https://www.w3.org/TR/html52/tabular-data.html#the-tr-element),  warning should not be showed for the situation.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React 16.12.0, Windows 10, 1909(64bit), Chrome 79.0.3945.79,
"
,,,https://github.com/facebook/react/issues/17636,17636,Lint rule for hooks report error for non hook function starting by `useXXX` ,[],closed,False,,5,2019-12-17T10:33:56Z,2021-05-17T14:12:27Z,2019-12-18T15:32:17Z,NONE,completed,,"Declaring non-hook function like:

```js
import { useWith, identity } from ""ramda"";

const test = useWith(Math.pow, [identity, identity]);
```

causes

```js
React Hook ""useWith"" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.eslint(react-hooks/rules-of-hooks)
```

I'm using latest version of eslint-plugin-react-hooks `2.3.0`

It would be useful to have settings to override this regexp.

https://github.com/facebook/react/blob/36a6e29bb3eead85e3500ba7269cbcd55516a8fb/packages/eslint-plugin-react-hooks/src/RulesOfHooks.js#L11-L20

I can make PR for it if you think that this is a good idea."
,,,https://github.com/facebook/react/issues/17879,17879,Bug: Hooks fail with renderToString,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2020-01-21T12:02:32Z,2020-01-21T14:39:33Z,2020-01-21T14:39:32Z,NONE,completed,,"So I'm loading a precompiled react file into my server.js and using that to rendertostring.
(there is a very good reason why I'm doing it like this, don't ask about it, that's no part of the issue here)

This actually works but the moment you introduce hooks... it all goes to hell. I've tried setting react/react-dom as externals and such. Nothing works. It keeps throwing the same issue.

1. There are no mismatching versions
2. There are no duplicate react versions I can see
3. The rules of hooks are not broken as far as I know.

React version: 16.12.0

## Steps To Reproduce

1. https://github.com/Pixelatex/hooks-ssr-issue
2. Yarn build
3. Yarn serve
4. Go to localhost:3000 and see it crash, removing the hooks from app.js shows it working.


Link to code example:

https://github.com/Pixelatex/hooks-ssr-issue

## The current behavior

It should render a string with the resulting html.

## The expected behavior

Hooks should just work."
,,,https://github.com/facebook/react/issues/17814,17814,emoji in useState string makes useState stop working,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2020-01-09T17:50:18Z,2020-01-09T18:41:09Z,2020-01-09T18:40:44Z,NONE,completed,,"I am running on latest React. When I try to use unicode emojis in a useState string, the useState function stops updating the string.

Example:
```javascript
const [text, setText] = useState('😀');

console.log(text);
```

Emoji will be visibile in console log. However, when I run:

```javascript
setText('different text');
```

`text` now is an empty string.

What is happening? Why? How can I solve it?"
,,,https://github.com/facebook/react/issues/17940,17940,"Bug: ComponentDidMount gives different ref vs useEffect(()=>{}, [])","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,0,2020-01-30T18:50:14Z,2020-01-31T04:24:54Z,2020-01-31T04:24:54Z,NONE,completed,,"React version: 16.12

I know `useEffect` works different than `componentDidMount/Update` it's in the docs. however, in many places states that 

```
useEffect(() => {}, []);
```
is a replacement of 
```
componentDidMount() {}
```

However in the following code, `useEffect` retuns the expected ref but not `componentDidMount`, I expect them to work differently but didn't expect they give different result. (actual dom vs undefined)

Wrapper.js
```
const Wrapper = ({ children }) => {
  const wrapperRef = useRef();

  const getRef = useCallback(() => {
    return wrapperRef.current;
  }, []);

  const renderChildren = useMemo(
    () => () => {
      debugger;
      if (children instanceof Function) {
        return children({
          prop1: 1,
          prop2: 2,
          parentRef: wrapperRef,
          getParentRef: getRef
        });
      } else {
        return children;
      }
    },
    []
  );

  return <div ref={wrapperRef}>{renderChildren()}</div>;
};
```

Inner1.js
```
const Inner = ({ prop1, prop2, getParentRef }) => {
  useEffect(() => {
    if (getParentRef) {
      console.log(""ref in inner"", getParentRef());
    }
  }, []);

  return (
    <div style={{ background: ""green"" }}>
      {prop1}
      {prop2}
    </div>
  );
};
```

Inner2.js
```
class Inner2 extends React.Component {
  componentDidMount() {
    console.log(""ref in Inner2"", this.props.getParentRef());
  }

  render() {
    return (
      <div style={{ background: ""yellow"" }}>
        {this.props.prop1}
        {this.props.prop2}
      </div>
    );
  }
}
```

app.js
```
<Wrapper>
        {({ prop1, prop2, parentRef, getParentRef }) => {
          return (
            <React.Fragment>
              <Inner
                prop1={prop1}
                prop2={prop2}
                parentRef={parentRef.current}
                getParentRef={getParentRef}
              />
              <Inner2
                prop1={prop1}
                prop2={prop2}
                parentRef={parentRef.current}
                getParentRef={getParentRef}
              />
            </React.Fragment>
          );
        }}
      </Wrapper>
```


## Steps To Reproduce

1. run the live example
2. see the output log

Link to code example:

https://codesandbox.io/s/busy-platform-4l8ch

## The current behavior
in `componentDidMount` it's undefined
in `useEffect` the ref is not undefined

## The expected behavior
both shouldn't be undefined."
,,,https://github.com/facebook/react/issues/17813,17813,[DevTools] Component inspector not loading for large components,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,3,2020-01-09T17:12:37Z,2020-01-28T19:21:33Z,2020-01-09T18:34:08Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug report.

**What is the current behavior?**
The component inspector works fine on most components, but on ones that are particularly large with many large props it is stuck on ""Loading..."".

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
You should be able to reproduce the issue on: https://data.world/jonloyens/an-intro-to-dataworld-dataset

Navigate to the component with the key: ""jonloyens/an-intro-to-dataworld-dataset"". Other components above and below that one will load, but that one specifically will not.

**What is the expected behavior?**
It should load the component tree eventually. Previous to the 4.3.0 update these components loaded fine.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Our app uses React version 16.8.3.
I am on dev tools version 4.3.0 on Chrome 79.0.3945.88 on MacOS Catalina 10.15.2 (but others on earlier versions of MacOS are having the same issue).

I have a suspicion that this may be related to https://github.com/facebook/react/pull/17579 as this change has made a big impact on our app (mostly in a good way). We use ImmutableJS, and that change has made it much easier to navigate Immutable props since it preloads the values. The component that is loading slowly uses a proportionately large number of Immutable props to other components.
"
,,,https://github.com/facebook/react/issues/17782,17782,Parsing error: Unexpected token,[],closed,False,,1,2020-01-05T19:52:18Z,2020-01-05T20:15:19Z,2020-01-05T20:15:19Z,NONE,completed,,"When I Try To Run My React App It Says [This](https://gist.github.com/Hoidberg/435a70f80a33668716eadec1907df174) Which Is Preventing Me From Running The App. Is There Any Way I Can Fix It?
"
,,,https://github.com/facebook/react/issues/17843,17843,the worst arabic translation ,"[{""id"":40929154,""node_id"":""MDU6TGFiZWw0MDkyOTE1NA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Invalid"",""name"":""Resolution: Invalid"",""color"":""e6e6e6"",""default"":false,""description"":null},{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,1,2020-01-15T00:31:27Z,2020-01-15T00:47:12Z,2020-01-15T00:47:11Z,NONE,completed,,"language and translation
i'm sure that you translated your react site by google 
the worst result at all 
i hope you correct it 

https://github.com/reactjs/rfcs
"
,,,https://github.com/facebook/react/issues/17895,17895,Bug: fix BigInt in copyElementPath in react-devtools,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null},{""id"":725156255,""node_id"":""MDU6TGFiZWw3MjUxNTYyNTU="",""url"":""https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)"",""name"":""good first issue (taken)"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,7,2020-01-23T11:59:29Z,2020-01-31T22:36:00Z,2020-01-31T22:36:00Z,CONTRIBUTOR,completed,,"This is a continuation of an previous issue to add support for the BigInt data type in React DevTools.

Original PR https://github.com/facebook/react/pull/17233 (merged)

This happens when you try to copy a BigInt value to clipboard via React DevTools.

![](https://image.prntscr.com/image/c4SnNIPXR1GlSXIt49FOlw.png)

Would @nutboltu mind taking a look?

```
backend.js:1 Uncaught TypeError: Do not know how to serialize a BigInt
    at JSON.stringify (<anonymous>)
    at c (backend.js:1)
    at Object.copyElementPath (backend.js:6)
    at t.<anonymous> (backend.js:6)
    at t.r.emit (backend.js:6)
    at backend.js:32
    at t (backend.js:8)
c @ backend.js:1
copyElementPath @ backend.js:6
(anonymous) @ backend.js:6
r.emit @ backend.js:6
(anonymous) @ backend.js:32
t @ backend.js:8
postMessage (async)
(anonymous) @ contentScript.js:1
<./app-insights/app-insights>:50 Uncaught TypeError: Cannot read property 'message' of null
    at trackError (<./app-insights/app-insights>:50)
    at eval (<./app-insights/app-insights>:22)
trackError @ <./app-insights/app-insights>:50
eval @ <./app-insights/app-insights>:22
setTimeout (async)
eval @ <./app-insights/app-insights>:21
error (async)
initAppInsights @ <./app-insights/app-insights>:17
main @ VM70658 client>:101
main @ ./../../../node_modules/@tessin/tcm/lib/dev/boot-loader:31
async function (async)
main @ ./../../../node_modules/@tessin/tcm/lib/dev/boot-loader:27
(anonymous) @ 219:3435
backend.js:1 Uncaught TypeError: Do not know how to serialize a BigInt
    at JSON.stringify (<anonymous>)
    at c (backend.js:1)
    at Object.copyElementPath (backend.js:6)
    at t.<anonymous> (backend.js:6)
    at t.r.emit (backend.js:6)
    at backend.js:32
    at t (backend.js:8)
c @ backend.js:1
copyElementPath @ backend.js:6
(anonymous) @ backend.js:6
r.emit @ backend.js:6
(anonymous) @ backend.js:32
t @ backend.js:8
postMessage (async)
(anonymous) @ contentScript.js:1
<./app-insights/app-insights>:50 Uncaught TypeError: Cannot read property 'message' of null
    at trackError (<./app-insights/app-insights>:50)
    at eval (<./app-insights/app-insights>:22)
trackError @ <./app-insights/app-insights>:50
eval @ <./app-insights/app-insights>:22
setTimeout (async)
eval @ <./app-insights/app-insights>:21
error (async)
initAppInsights @ <./app-insights/app-insights>:17
main @ VM70658 client>:101
main @ ./../../../node_modules/@tessin/tcm/lib/dev/boot-loader:31
async function (async)
main @ ./../../../node_modules/@tessin/tcm/lib/dev/boot-loader:27
(anonymous) @ 219:3435
backend.js:1 Uncaught TypeError: Do not know how to serialize a BigInt
    at JSON.stringify (<anonymous>)
    at c (backend.js:1)
    at Object.copyElementPath (backend.js:6)
    at t.<anonymous> (backend.js:6)
    at t.r.emit (backend.js:6)
    at backend.js:32
    at t (backend.js:8)
c @ backend.js:1
copyElementPath @ backend.js:6
(anonymous) @ backend.js:6
r.emit @ backend.js:6
(anonymous) @ backend.js:32
t @ backend.js:8
postMessage (async)
(anonymous) @ contentScript.js:1
<./app-insights/app-insights>:50 Uncaught TypeError: Cannot read property 'message' of null
    at trackError (<./app-insights/app-insights>:50)
    at eval (<./app-insights/app-insights>:22)
```"
,,,https://github.com/facebook/react/issues/17755,17755,Implement a method in serviceWorker.js file for skipWaiting in service worker life cycle,[],closed,False,,1,2020-01-02T09:59:59Z,2020-01-02T16:04:49Z,2020-01-02T16:04:49Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

I have propose for implementing a method in CRA that skip waiting for service-worker after new update in app detected by it
"
,,,https://github.com/facebook/react/issues/17823,17823,"Error: ""Could not find node with id ""32"" in commit tree""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,2,2020-01-12T05:04:15Z,2020-01-12T20:38:28Z,2020-01-12T19:22:11Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.3.0-3e0967783

Call stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159833
    at Map.forEach (<anonymous>)
    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159779)
    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160302)
    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:322998)
    at ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59363)
    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107431)
    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99973)
    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99898)
    at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:96672)

Component stack: in Sl
    in div
    in div
    in div
    in vo
    in Unknown
    in n
    in Unknown
    in div
    in div
    in Qi
    in Ve
    in nn
    in Da
    in Yc"
,,,https://github.com/facebook/react/issues/17846,17846,"Warning: Did not expect server HTML to contain the [first prerendered] text node ""[chinese characters]""","[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,16,2020-01-15T15:41:52Z,2020-04-22T13:42:10Z,2020-04-22T13:42:10Z,NONE,completed,Arlen22,"I don't even know where to start with this. When I inspect the source of this error, it is a very well-written section of code, but I can find almost no documentation on this problem anywhere. I don't know what causes it and short of spending the next two weeks stepping through React and Next.js, I have no way of know where to start. I thought I had fixed the problem by making FontAwesome a dynamic import, but then the text next to it through the same error. I've also had classes causing errors by not resolving to the same class names on hydration as the prerendered HTML has. I don't understand this problem and I don't know what it means. 

Here's my package.json, if that helps anything. This problem doesn't make any sense to me but i've been running into it since I started with next.js, but I don't know anything about it. 

```json
{
  ""name"": ""next-project"",
  ""version"": ""1.0.0"",
  ""description"": """",
  ""main"": ""src/pages/index.ts"",
  ""scripts"": {
    ""dev"": ""rm -rf .next .expo && next dev"",
    ""build"": ""next build"",
    ""start"": ""next start"",
    ""next"": ""next""
  },
  ""author"": ""https://github.com/arlen22/"",
  ""license"": ""ISC"",
  ""dependencies"": {
    ""@expo/vector-icons"": ""^10.0.6"",
    ""@unimodules/core"": ""^5.0.0"",
    ""@unimodules/react-native-adapter"": ""^5.0.0"",
    ""@zeit/next-css"": ""^1.0.1"",
    ""babel-preset-expo"": ""^8.0.0"",
    ""expo-asset"": ""^8.0.0"",
    ""expo-font"": ""^8.0.0"",
    ""native-base"": ""^2.13.8"",
    ""next"": ""^9.1.5"",
    ""next-fonts"": ""^0.19.0"",
    ""next-images"": ""^1.2.0"",
    ""next-progressbar"": ""^1.0.0"",
    ""node-fetch"": ""^2.6.0"",
    ""react"": ""^16.12.0"",
    ""react-dom"": ""^16.12.0"",
    ""react-icons"": ""^3.8.0"",
    ""react-native-drawer-layout"": ""^2.0.0"",
    ""react-native-web"": ""^0.11.7"",
    ""rxjs"": ""^6.5.4""
  },
  ""devDependencies"": {
    ""@expo/next-adapter"": ""^2.0.0-beta.10"",
    ""@types/node"": ""^12.12.18"",
    ""@types/react"": ""^16.9.16"",
    ""@types/react-native"": ""^0.60.25"",
    ""@types/react-native-drawer-layout"": ""^1.3.5"",
    ""file-loader"": ""^5.0.2"",
    ""next-transpile-modules"": ""^2.3.1"",
    ""typescript"": ""^3.7.3"",
    ""url-loader"": ""^3.0.0""
  }
}
```"
,,,https://github.com/facebook/react/issues/18183,18183,useMutableSource and hydration,"[{""id"":1775958285,""node_id"":""MDU6TGFiZWwxNzc1OTU4Mjg1"",""url"":""https://api.github.com/repos/facebook/react/labels/React%20Core%20Team"",""name"":""React Core Team"",""color"":""9149d1"",""default"":false,""description"":""Opened by a member of the React Core Team""}]",closed,False,,2,2020-02-28T21:38:11Z,2020-05-21T23:00:47Z,2020-05-21T23:00:47Z,COLLABORATOR,completed,bvaughn,"Follow up to PR #18000 and RFC https://github.com/reactjs/rfcs/pull/147

The new `useMutableSource` hook will need at least one additional API to be able to support server rendering and hydration. This API would likely be on the React root (the object returned by `createRoot`) and would enable mutable sources to have their versions eagerly captured before hydration begins.

##### How is the version used?

Currently a work-in-progress version of each mutable source is stored on the source itself. This version enables us to [avoid tearing before a source has been subscribed to](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md#reading-from-a-source-before-subscribing). This version number is lazily populated (the first time a source is read during a given render).

##### How will the version be used during hydration?

In the case of server rendering, this version will need to be eagerly populated for every source so that we can detect tearing between the version of the source used for the server respond, and the version we will eventually read from while hydrating on the client.

##### How will this work?

One way to do this would be to store an array on each React root of mutable source and version number pairs. Each time we start (or resume) hydration, we can iterate through this array and use it to initialize the work-in-progress version for each source.

Once all outstanding hydration work is finished, we can clear the array. (Although this will require an additional change as we do not currently have a way to detect that we've finished all pending hydration work.)"
,,,https://github.com/facebook/react/issues/18134,18134,setState takes type State but it should be Partial<State>,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2020-02-26T01:12:49Z,2020-02-26T01:47:43Z,2020-02-26T01:47:43Z,NONE,completed,,"Not sure where TS typing complaints belong, I have this one:

![Screenshot from 2020-02-25 17-13-18](https://user-images.githubusercontent.com/11139560/75302291-27d20980-57f2-11ea-9ad9-3dad9ef128d1.png)


As far as I know it should be `Partial<State>` not `State` for the type. Here is the type of setState() 

```js
    function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>];
```

but this is better:

```js
    function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<Partial<S>>>];
```"
,,,https://github.com/facebook/react/issues/18037,18037,Bug: ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,0,2020-02-14T03:54:34Z,2021-10-19T08:07:30Z,2020-02-15T23:06:48Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.12.0

## Steps To Reproduce

1. location: react-reconciler/src/ReactUpdateQueue/processUpdateQueue method
2. updateQueue: sufficient->insufficient>sufficient>insufficient
3. baseState is not up-to-date for update of insufficient priority
<!-- 
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
"
,,,https://github.com/facebook/react/issues/18065,18065,"False positives with warning ""React Hook useEffect has missing dependencies""","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,3,2020-02-18T13:27:20Z,2020-02-26T10:45:22Z,2020-02-24T15:27:04Z,NONE,completed,,"The useEffect() hook produces false positive warnings concerning ""React Hook useEffect has missing dependencies"" in rare cases.

React version: 16.12.0

## Steps To Reproduce

There are situations in which ""React Hook useEffect has missing dependencies"" is not correct concerning the problem and implementation logic at hand. Example:

```ts
const [current, send] = useMachine(machine);
const currentMatchesSignedIn = current.matches('signedIn');

useEffect(() => {
    if (currentMatchesSignedIn) {
        send('UPDATE_ENTRIES');
    }
  }, [currentMatchesSignedIn]);
```

`current` represents the current state, `send` is a function that the effect should not depend upon. It would be wrong if the effect would depend upon a change of it.

I had other circumstance in which the warning was plainly wrong, that didn't involve Xstate. It would be nice if there was a way to disable this warning for this rare cases."
,,,https://github.com/facebook/react/issues/17957,17957,Docs: ,"[{""id"":40929154,""node_id"":""MDU6TGFiZWw0MDkyOTE1NA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Invalid"",""name"":""Resolution: Invalid"",""color"":""e6e6e6"",""default"":false,""description"":null}]",closed,False,,0,2020-02-03T06:30:19Z,2020-02-03T06:31:11Z,2020-02-03T06:31:11Z,NONE,completed,,"🚨 This issue tracker is not for documentation issues. 🚨

The React website is hosted on a separate repository. You may let the
team know about any issues with the documentation by opening an issue there:
- https://github.com/reactjs/reactjs.org/issues/new
"
,,,https://github.com/facebook/react/issues/18097,18097,40 errors associated with this file,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2020-02-21T19:16:46Z,2020-02-22T08:04:21Z,2020-02-22T03:29:43Z,NONE,completed,,"

![https://i.imgur.com/o4MKh9p.jpg](https://i.imgur.com/o4MKh9p.jpg)

https://github.com/reactjs/reactjs.org

I decided to try react and reactjs.org and saw a lot of errors.

i use windows

Strange, but even with these errors the site seems to work.

```
GET http://0.0.0.0:8000/__webpack_hmr net::ERR_ADDRESS_INVALID

C:/react/reactjs.org/node_modules/react-error-overlay/lib/index.js:2172 Warning: The <HeaderLink /> component appears to be a function component that returns a class instance. Change HeaderLink to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `HeaderLink.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.

C:/react/reactjs.org/node_modules/react-error-overlay/lib/index.js:2172 Warning: The <Header /> component appears to be a function component that returns a class instance. Change Header to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `Header.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.



__stack_frame_overlay_proxy_console__ | @ | C:/react/reactjs.org…y/lib/index.js:2172
-- | -- | --
  | warningWithoutStack | @ | C:/react/reactjs.org….development.js:530
  | mountIndeterminateComponent | @ | C:/react/reactjs.org…evelopment.js:18805
  | beginWork$1 | @ | C:/react/reactjs.org…evelopment.js:20162
  | beginWork$$1 | @ | C:/react/reactjs.org…evelopment.js:25756
  | performUnitOfWork | @ | C:/react/reactjs.org…evelopment.js:24695
  | workLoopSync | @ | C:/react/reactjs.org…evelopment.js:24671
  | performSyncWorkOnRoot | @ | C:/react/reactjs.org…evelopment.js:24270
  | scheduleUpdateOnFiber | @ | C:/react/reactjs.org…evelopment.js:23698
  | updateContainer | @ | C:/react/reactjs.org…evelopment.js:27103
  | eval | @ | C:/react/reactjs.org…evelopment.js:27528
  | unbatchedUpdates | @ | C:/react/reactjs.org…evelopment.js:24433
  | legacyRenderSubtreeIntoContainer | @ | C:/react/reactjs.org…evelopment.js:27527
  | render | @ | C:/react/reactjs.org…evelopment.js:27608
  | eval | @ | C:/react/reactjs.org/.cache/app.js:94
  | setTimeout (async) |   |  
  | eval | @ | C:/react/reactjs.org…omready/ready.js:26
  | eval | @ | C:/react/reactjs.org/.cache/app.js:93
  | Promise.then (async) |   |  
  | eval | @ | C:/react/reactjs.org/.cache/app.js:91
  | Promise.then (async) |   |  
  | eval | @ | C:/react/reactjs.org/.cache/app.js:48
  | eval | @ | C:/react/reactjs.org/.cache/app.js:130
  | ./.cache/app.js | @ | commons.js:827
  | __webpack_require__ | @ | commons.js:725
  | fn | @ | commons.js:102
  | eval | @ | C:/react/reactjs.org…js.org/.cache/app:3
  | 0 | @ | commons.js:5470
  | __webpack_require__ | @ | commons.js:725
  | (anonymous) | @ | commons.js:792
  | (anonymous) | @ | commons.js:795


```"
,,,https://github.com/facebook/react/issues/18053,18053,Question: It's not problem just question in my mind,"[{""id"":40929154,""node_id"":""MDU6TGFiZWw0MDkyOTE1NA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Invalid"",""name"":""Resolution: Invalid"",""color"":""e6e6e6"",""default"":false,""description"":null},{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,4,2020-02-17T13:33:08Z,2020-02-22T06:33:25Z,2020-02-22T03:58:28Z,CONTRIBUTOR,completed,,"Why all implements of hooks in `react-dom` and we have to import from `react`?
Just I want to know about it"
,,,https://github.com/facebook/react/issues/18058,18058,Context API not working in production,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2020-02-17T15:41:00Z,2020-02-22T03:56:07Z,2020-02-22T03:56:07Z,NONE,completed,,"Hi! React Context works perfectly on my application on development environment with Webpacker but when I precompile my assets to serve my application in production environment it throw me TypeError: undefined is not an object (evaluating 'n.context.user.username') error. I tried implementing all the suggested solutions but it still didn't work. I upgrade the versions: to ""react"": ""^16.7.0"", ""react-dom"": ""^16.6.0"" and defining the Context creation in a separate file. The app will work fine if we use <UserContext.Consumer/> but want to stick to try our best to stick to the contextType method. Would appreciate any help. Thank you.

Link to code example:

Context Creation
https://github.com/VantageSG/Vantage/blob/master/app/javascript/contexts/UserContext.jsx

Context Provider
https://github.com/VantageSG/Vantage/blob/master/app/javascript/components/App.jsx

Context Consumer
https://github.com/VantageSG/Vantage/blob/master/app/javascript/components/navBar/desktopNavBar.jsx

React version: 16.6

## The current behavior
`TypeError: undefined is not an object (evaluating 'n.context.user.username') error`

## The expected behavior
Context API working properly."
,,,https://github.com/facebook/react/issues/18389,18389,Bug: NotFoundError: Node was not found,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,5,2020-03-25T21:50:07Z,2020-07-13T22:31:50Z,2020-03-30T15:19:48Z,NONE,completed,,"React version: 16.13.1

After update react getting crash on production everytime. in local development its crashing but not all time.

Error getting in development :
NotFoundError: Node was not found

Error getting in production:
Uncaught (in promise) DOMException: Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node."
,,,https://github.com/facebook/react/issues/18225,18225,link test build then Can't resolve './cjs/react-dom.development.js',"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,3,2020-03-05T17:11:46Z,2020-03-14T13:34:39Z,2020-03-14T13:34:39Z,NONE,completed,,"React Source Code version: 16.13.0

## Steps To Reproduce

1. clone react souce code 
2. yarn build react and react-dom then link them ( [from doc  ](https://reactjs.org/docs/how-to-contribute.html)
<img width=""980"" alt=""image"" src=""https://user-images.githubusercontent.com/2384105/76006565-a4c65700-5f47-11ea-9c48-399e37dcd268.png"">


3. cd myProject( clean project from create-react-app)
4. link react and react-dom  then yarn start


## The current behavior
<img width=""656"" alt=""image"" src=""https://user-images.githubusercontent.com/2384105/76006337-48633780-5f47-11ea-8a70-c1b78f292f78.png"">

## The expected behavior
server ok
"
,,,https://github.com/facebook/react/issues/18436,18436,Bug: useEffect returned function fires on didUnmount not willUnmount,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,4,2020-03-30T21:06:59Z,2020-03-31T15:32:58Z,2020-03-31T01:08:55Z,NONE,completed,,"This bug report relies on the expectation that a function returned in useEffect should fire on willUnmount. This seems to be agreed upon by every post I can find, but doesn't appear to be the behavior I'm experiencing.

React versions from package.json
```
    ""react"": ""^16.12.0"",
    ""react-dom"": ""^16.12.0"",
```
Currently using node 12.15

## Steps To Reproduce

Mount this component, then force it to unmount:

```
function TesterComponent() {
  const ref = createRef();

  useEffect(
    () => {
      console.log('didMount: ', ref)
      return () => console.log('willUnmount: ', ref);
    },
    []
  )

  return (
    <div ref={ref}></div>
  );
}
```

## The current behavior

`ref` will be populated for the first debug, but be null for the second.

ex (Copied from the browser console):
```
didMount:  {current: div}
willUnmount:  {current: null}
```

## The expected behavior

Current should be populated if this is firing on willUnmount rather than didUnmount. So the above output should look like this:
```
didMount:  {current: div}
willUnmount:  {current: div}
```"
,,,https://github.com/facebook/react/issues/18284,18284,Bug: DevTools Profiler doesn't show selected commit,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,5,2020-03-12T00:28:58Z,2020-03-12T02:12:58Z,2020-03-12T02:12:58Z,MEMBER,completed,bvaughn,"I don't see the selection at all. My version is 4.5.0. I think this regressed.

<img width=""266"" alt=""Screenshot 2020-03-11 at 23 40 37"" src=""https://user-images.githubusercontent.com/810438/76475966-6d005900-63f8-11ea-8779-7330eba193ee.png"">
"
,,,https://github.com/facebook/react/issues/18247,18247,Bug: Callback referencing to outdated state when assigned as part of initial state object,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,3,2020-03-08T13:44:01Z,2020-03-09T16:40:19Z,2020-03-08T17:10:45Z,NONE,completed,,"Callback referencing to outdated state when assigned as part of initial state object.

I am not actually sure if this is a bug or intended behavior, and if it is intended I would love to have a lint rule or react warning me about it.

React version: 16.13.0

## Steps To Reproduce

```
import React from ""react"";

function App() {
  const increaseCount = () =>
    setCountObj({ ...countObj, count: countObj.count + 1 });

  const [countObj, setCountObj] = React.useState({
    count: 0,
    onButtonClick: increaseCount
  });

  return (
    <div>
      <h3>count: {countObj.count}</h3>
      <button onClick={countObj.onButtonClick}>Click to increase count</button>
    </div>
  );
}

export default App;
```

Link to code example: [https://codesandbox.io/s/pensive-mendeleev-f25is](https://codesandbox.io/s/pensive-mendeleev-f25is)

## The current behavior
This is a simplified use case of an issue I encountered lately.

When clicking the button multiple times the count stays at 1, it seems that the callback inside the initial state referencing to outdated state value every time its called

## The expected behavior
The state inside the callback should be undefined or referencing to the correct state.

## Solution
I solved the issue by removing the callback from the state and creating 'actualState' variable that is a merge between the state with the callback."
,,,https://github.com/facebook/react/issues/18200,18200,Feature: extend propTypes functionality,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2020-03-03T14:11:07Z,2020-03-03T14:15:11Z,2020-03-03T14:15:11Z,NONE,completed,,"React version: Latest

## More of a feature request 😄 

```
const Parent = ({ x, y }) => <p>{x}{y}</p>;
Parent.propTypes = {
  x: PropTypes.string,
  y: PropTypes.string,
};

const Child = ({ a, b, x, y }) => {
  return (
    <div>
      <Parent x={x} y={y} />
      <p>{a}</p>
      <p>{b}</p>
    </div>
  );
};
Child.propTypes = {
  a: PropTypes.string,
  b: PropTypes.string,
  ...PropTypes.extend(Parent), // => Can this be possible?
};
```

Link to code example:

- shared the code snippet in the issue itself 😅 

## The current behavior

The current behaviour doesn't let you extent propTypes functionality from one component to the other. I see this as a very common practise for e.g, in UI libraries where you build components on top of other components. For example a `BaseButton` & on top of it you will build `PrimaryButton`, 'SecondaryButton` where the 2 buttons extend on `BaseButton` functionalities.

The functionality itself works, but there is no one in `propTypes` to have a feature where it can inherit props from it's parent class.

For my use case, in my UI library I am trying to generate an API table from `propTypes` section of the component, but since I can not extend props from class I have to manually re-add each prop from parent component to child component for API generation.

## The expected behavior

The propTypes does not have a feature where you can extent props from a certain component.
"
,,,https://github.com/facebook/react/issues/18410,18410,"Bug: ncu(node-check-updates) shows many dependencies needing update, some major","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2020-03-27T22:10:04Z,2020-03-28T13:38:49Z,2020-03-28T13:38:49Z,NONE,completed,,"this is ncu output in package.json currently in react master:

> 
> @babel/cli                                             ^7.8.0  →         ^7.8.4 
>  @babel/code-frame                                      ^7.8.0  →         ^7.8.3 
>  @babel/core                                            ^7.8.0  →         ^7.9.0 
>  @babel/helper-module-imports                           ^7.8.0  →         ^7.8.3 
>  @babel/parser                                          ^7.8.0  →         ^7.9.4 
>  @babel/plugin-external-helpers                         ^7.8.0  →         ^7.8.3 
>  @babel/plugin-proposal-class-properties                ^7.8.0  →         ^7.8.3 
>  @babel/plugin-proposal-object-rest-spread              ^7.8.0  →         ^7.9.0 
>  @babel/plugin-syntax-dynamic-import                    ^7.8.0  →         ^7.8.3 
>  @babel/plugin-syntax-jsx                               ^7.8.0  →         ^7.8.3 
>  @babel/plugin-transform-arrow-functions                ^7.8.0  →         ^7.8.3 
>  @babel/plugin-transform-async-to-generator             ^7.8.0  →         ^7.8.3 
>  @babel/plugin-transform-block-scoped-functions         ^7.8.0  →         ^7.8.3 
>  @babel/plugin-transform-block-scoping                  ^7.8.0  →         ^7.8.3 
>  @babel/plugin-transform-classes                        ^7.8.0  →         ^7.9.2 
>  @babel/plugin-transform-computed-properties            ^7.8.0  →         ^7.8.3 
>  @babel/plugin-transform-destructuring                  ^7.8.0  →         ^7.8.8 
>  @babel/plugin-transform-for-of                         ^7.8.0  →         ^7.9.0 
>  @babel/plugin-transform-literals                       ^7.8.0  →         ^7.8.3 
>  @babel/plugin-transform-modules-commonjs               ^7.8.0  →         ^7.9.0 
>  @babel/plugin-transform-object-super                   ^7.8.0  →         ^7.8.3 
>  @babel/plugin-transform-parameters                     ^7.8.0  →         ^7.9.3 
>  @babel/plugin-transform-react-jsx-source               ^7.8.0  →         ^7.9.0 
>  @babel/plugin-transform-shorthand-properties           ^7.8.0  →         ^7.8.3 
>  @babel/plugin-transform-spread                         ^7.8.0  →         ^7.8.3 
>  @babel/plugin-transform-template-literals              ^7.8.0  →         ^7.8.3 
>  @babel/preset-flow                                     ^7.8.0  →         ^7.9.0 
>  @babel/preset-react                                    ^7.8.0  →         ^7.9.4 
>  @babel/traverse                                        ^7.8.0  →         ^7.9.0 
>  art                                                    0.10.1  →         0.10.3 
>  babel-eslint                                          ^10.0.3  →        ^10.1.0 
>  babel-plugin-syntax-trailing-function-commas           ^6.5.0  →        ^6.22.0 
>  coveralls                                              ^3.0.9  →        ^3.0.11 
>  cross-env                                              ^6.0.3  →         ^7.0.2 
>  danger                                                ^9.2.10  →        ^10.0.0 
>  eslint-config-fbjs                                     ^1.1.1  →         ^3.1.1 
>  eslint-config-prettier                                 ^6.9.0  →        ^6.10.1 
>  eslint-plugin-flowtype                                ^2.25.0  →         ^4.7.0 
>  eslint-plugin-jest                                   ^22.15.0  →        ^23.8.2 
>  eslint-plugin-no-for-of-loops                          ^1.0.0  →         ^1.0.1 
>  eslint-plugin-react                                    ^6.7.1  →        ^7.19.0 
>  fbjs-scripts                                            0.8.3  →          1.2.0 
>  filesize                                               ^6.0.1  →         ^6.1.0 
>  flow-bin                                                 0.97  →          0.121 
>  google-closure-compiler                         ^20200112.0.0  →  ^20200315.0.0 
>  jest                                                  ^24.9.0  →        ^25.2.3 
>  jest-diff                                             ^24.9.0  →        ^25.2.3 
>  minimist                                               ^1.2.0  →         ^1.2.5 
>  mkdirp                                                 ^0.5.1  →         ^1.0.3 
>  pacote                                                ^10.3.0  →        ^11.1.4 
>  prettier                                               1.19.1  →          2.0.2 
>  prop-types                                            ^15.6.2  →        ^15.7.2 
>  rimraf                                                 ^3.0.0  →         ^3.0.2 
>  rollup                                                ^1.19.4  →         ^2.2.0 
>  rollup-plugin-babel                                    ^4.0.1  →         ^4.4.0 
>  rollup-plugin-commonjs                                 ^9.3.4  →        ^10.1.0 
>  rollup-plugin-node-resolve                             ^2.1.1  →         ^5.2.0 
>  rollup-plugin-strip-banner                             ^0.2.0  →         ^2.0.0 
>  semver                                                 ^7.1.1  →         ^7.1.3 
>  typescript                                             ^3.7.5  →         ^3.8.3 
>  webpack                                               ^4.41.2  →        ^4.42.1 
> 
A lot of those are only pathes and minor like babel, but some are major, rollup is a special one in this list but so is jest,eslint-plugin-react,etc.

I'm ready to help in updating those packages if you need so.
"
,,,https://github.com/facebook/react/issues/18250,18250,Bug: Mixing native and synthetic events causes abnormal behavior,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,3,2020-03-09T10:27:34Z,2020-06-14T12:09:35Z,2020-06-14T12:09:35Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.13.0

## Steps To Reproduce

1. 
![image](https://user-images.githubusercontent.com/13357301/76204226-f2d2a780-6232-11ea-869f-d89366bb5446.png) move mouse from A to B, You can see that the console printed ""inner mouseenter""

2. 
![image](https://user-images.githubusercontent.com/13357301/76204387-4513c880-6233-11ea-8f2c-cd754cc80bbe.png) move mouse from A to B, nothing


<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

https://codesandbox.io/s/staging-breeze-z05hz

More info:

user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior

not print 'inner mouseenter'

## The expected behavior

print 'inner mouseenter'
"
,,,https://github.com/facebook/react/issues/18290,18290,Bug: IE11 throws error Assignment to read-only properties is not allowed in strict mode,"[{""id"":69105383,""node_id"":""MDU6TGFiZWw2OTEwNTM4Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Browser:%20IE"",""name"":""Browser: IE"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,10,2020-03-12T10:38:37Z,2021-03-24T18:55:41Z,2021-03-24T18:55:40Z,NONE,completed,,"When working in development mode in IE11 error is thrown in file 
react-dom.development.js line 185. 

Error: ""Assignment to read-only properties is not allowed in strict mode""
window.event is readOnly variable and IE11 is strict about it.

![image](https://user-images.githubusercontent.com/5305497/76511927-8509c400-645c-11ea-89c4-9f38a6e0a778.png)


React version: 16.13.0

In production build there is no error as this code block is not included.

"
,,,https://github.com/facebook/react/issues/18715,18715,"Bug: when i change the second params of `ReactDOM.createPortal`, the dom destroy and then rebuild.","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2020-04-23T11:53:29Z,2020-04-30T03:21:09Z,2020-04-30T03:21:09Z,NONE,completed,,"ReactDOM version: 16.13.1

## Steps To Reproduce

1. open the console tab of sandbox
2. click the picture
3. click the scaled picture again

Link to code example: https://codesandbox.io/s/muddy-smoke-j8lfy

## The current behavior
when i change the second params of `ReactDOM.createPortal`, the dom was destory and then rebuild.

PS. I inject the function` document.createElement` so we can see the dom rebuilds.

when i toggle the active status of picture, the `document.createElement` was called which means the dom destroy and then rebuild.

## The expected behavior
i expect react-dom will reuse the dom nodes, so that the cost of dom destroy and rebuild can be saved. Also, it is a useful way to reuse cross-layer-dom-node "
,,,https://github.com/facebook/react/issues/18747,18747,Using the tsconfig file to configure the alias does not take effect,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,6,2020-04-26T14:38:10Z,2020-08-16T07:23:52Z,2020-08-16T07:23:52Z,NONE,completed,,"The project was generated using the create-react-app scaffolding, and the paths option was removed when I used the tsconfig.json file to configure the path alias! Then I tried to use the extends property in the tsconfig.json file to connect to the external path configuration file, but it didn't work either! Using the customize-cra plug-in in conjunction with the above configuration file does not take effect. How do I configure it? Why doesn't the scaffolding support?

React version: 16.13.1
react-scripts version: 3.4.1

```
{
  ""extends"": ""./tsconfig.paths.json"", // Subsequent configuration options
  ""compilerOptions"": {
    ""target"": ""es5"",
    ""lib"": [
      ""dom"",
      ""dom.iterable"",
      ""esnext""
    ],
    ""allowJs"": true,
    ""skipLibCheck"": true,
    ""esModuleInterop"": true,
    ""allowSyntheticDefaultImports"": true,
    ""strict"": true,
    ""forceConsistentCasingInFileNames"": true,
    ""module"": ""esnext"",
    ""moduleResolution"": ""node"",
    ""resolveJsonModule"": true,
    ""isolatedModules"": true,
    ""noEmit"": true,
    ""jsx"": ""react""
  },
  ""include"": [
    ""src/**/*""
  ],
  ""exclude"": [
    ""node_modules"",
    ""**/*.spec.ts""
  ]
}
```
The tsconfig.paths. json path file configuration:
```
{
  ""compilerOptions"": {
    ""baseUrl"": ""src"",
    ""paths"": {
      ""@/*"": [""src/*""],
      ""actions/*"": [""src/actions""],
      ""api/*"": [""src/api""],
      ""common/*"": [""src/common""],
      ""components/*"": [""src/components""],
      ""containers/*"": [""src/containers""],
      ""helper/*"": [""src/helper""],
      ""icon/*"": [""src/icon""],
      ""reducers/*"": [""src/reducers""]
    }
  }
}
```
Customize -cra configuration file:
```
const { override, addDecoratorsLegacy, addWebpackAlias } = require(""customize-cra"")
const path = require(""path"")

module.exports = override(
  addDecoratorsLegacy(),
  addWebpackAlias({
      ""@"": path.resolve(__dirname, 'src'),
      ""actions"": path.resolve(__dirname, 'src/actions'),
      ""api"": path.resolve(__dirname, 'src/api'),
      ""common"": path.resolve(__dirname, 'src/common'),
      ""components"": path.resolve(__dirname, 'src/components'),
      ""containers"": path.resolve(__dirname, 'src/containers'),
      ""helper"": path.resolve(__dirname, 'src/helper'),
      ""icon"": path.resolve(__dirname, 'src/icon'),
      ""reducers"": path.resolve(__dirname, 'src/reducers')
  })
)
```
Sample file contents:
`import App from 'components/App'`
Warning message:
```
The following changes are being made to your tsconfig.json file:
  - compilerOptions.paths must not be set (aliased imports are not supported)
```
Error message:
```
./src/index.tsx
Module not found: Can't resolve 'components/App' in 'D:\code\my-music\src'

```
Please help me thank you!"
,,,https://github.com/facebook/react/issues/18512,18512,Bug: dev tools development script is running production build,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2020-04-06T21:01:16Z,2020-04-17T00:39:20Z,2020-04-17T00:39:20Z,CONTRIBUTOR,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

**React Dev Tools version**: 4.6.0

I'm not sure there is a problem with `package.json` within`react-devtools-extensions` package, or it's just my misunderstand how it works, but script `build:dev` create production build. 
Command above runs a each script (per browser) in which `NODE_ENV`  is set to `production`.

## Steps To Reproduce

1. Just run `yarn build:dev` in `react-devtools-extensions`
2. It creates minified version of files.


https://github.com/facebook/react/blob/master/packages/react-devtools-extensions/package.json

```javascript 
 ""scripts"": {
    ""build"": ""cross-env NODE_ENV=production yarn run build:chrome && yarn run build:firefox && yarn run build:edge"",
    ""build:dev"": ""cross-env NODE_ENV=development yarn run build:chrome && yarn run build:firefox && yarn run build:edge"",
    ""build:chrome"": ""cross-env NODE_ENV=production node ./chrome/build"",
    ""build:chrome:crx"": ""cross-env NODE_ENV=production node ./chrome/build --crx"",
    ""build:chrome:dev"": ""cross-env NODE_ENV=development node ./chrome/build"",
    ""build:firefox"": ""cross-env NODE_ENV=production node ./firefox/build"",
    ""build:firefox:dev"": ""cross-env NODE_ENV=development node ./firefox/build"",
    ""build:edge"": ""cross-env NODE_ENV=production node ./edge/build"",
    ""build:edge:crx"": ""cross-env NODE_ENV=production node ./edge/build --crx"",
    ""build:edge:dev"": ""cross-env NODE_ENV=development node ./edge/build"",
    ""test:chrome"": ""node ./chrome/test"",
    ""test:firefox"": ""node ./firefox/test"",
    ""test:edge"": ""node ./edge/test""
  },
```

## The current behavior
`""build:dev"": ""cross-env NODE_ENV=development yarn run build:chrome && yarn run build:firefox && yarn run build:edge""` where `build:<browser>` has  `NODE_ENV` set to `production`.

## The expected behavior
Each step in `build:dev` should be replaced from `build:<browser>` to `build:<browser>:dev`


"
,,,https://github.com/facebook/react/issues/18695,18695,Bug: function component cannot have ref property,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,4,2020-04-21T21:57:06Z,2020-04-23T11:13:21Z,2020-04-22T16:13:50Z,NONE,completed,,"When passing ref property to a function component, validateFunctionComponentInDev shows a warning about it being a bad thing.

React version: HEAD

While this might have been true for stateless function components (as many places refer to func components), probably since the introduction of hooks, they can have state, and I had the impression that one could rewrite any class component into a function based one.

```
function TestComponent({ref}) {
  const [state] = React.useState({
    stateField1: 42,
  });
  assignRef(ref, state);
  return (
    <div>
      { state.stateField1 }
    </div>
  );
}

This code wont work, caller would never be able to get The Answer. Caller is sad.
```

## The current behavior
React giving a warning and making the ref prop defunct.

## The expected behavior
Remove limitation and let ref on my function component live happily ever after."
,,,https://github.com/facebook/react/issues/18779,18779,Bug: Radio buttons do not get checked with an array of inputs,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,3,2020-04-29T17:05:15Z,2020-04-30T04:06:59Z,2020-04-30T04:06:15Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.13.0

## Steps To Reproduce

1. Example below illustrates the problem.
2. The component `Radio` has an array of objects that are mapped into `<input>`s which can't be selected. The version without the array in `HelloWorld.jsx` works as expected.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://glitch.com/~react-input-radio-bug (click on `Remix` below the rendered example to see the code) (if a link to CodeSandbox is really needed I can create one later, please say so)

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
The radio buttons do not work or in some cases take two clicks to get marked as checked.

## The expected behavior
It should work as in the version without an array."
,,,https://github.com/facebook/react/issues/18474,18474,eliminate non-working right-click item,[],closed,False,,2,2020-04-03T03:49:55Z,2020-04-09T13:53:09Z,2020-04-03T18:58:27Z,NONE,completed,,"WIN10. I installed new version of downloader (FDM Free Download Manager) in firefox 74. It does not work. Using Revo I removed FDM shown in Revo uninstaller. FF still shows the bad item.  I reinstalled previous version FDM (2 years old). Now there are 2 _Download with FDM_ entries. One of them works with the old process. The other (new) fails, offering a Notification (attached). The position of the 2 menu items change within the right-click menu used with link SAVE on a website, usually referring to SAVE a video *.mp4.
![fdm new 2020 error](https://user-images.githubusercontent.com/32346180/78321659-d5d77e80-7529-11ea-8dfa-9edf434ea3dc.jpg)
I spent hours trying to find solution: Editors I can not use due to lack of knowledge: (ShellMenuViewer, ShellExViewer Nirsoft). I created a userChrome.css in the hope it would some how fill with the right-click lines. Restarting  FF74 added nothing to the css .
Mozilla website offers nothing useful, I could not find a way to open a forum ticket. 
I hope to get some help / solution pointers here. Thanks.
"
,,,https://github.com/facebook/react/issues/18705,18705,"Bug: React devtools shows ""Unable to find React on the page"" Incorrectly","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,26,2020-04-22T20:24:58Z,2022-04-05T16:25:23Z,2020-04-24T23:25:55Z,NONE,completed,Eddie-CooRo,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.12.0
Devtools version: 4.6.0

## Steps To Reproduce

Don't know.

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
React devtools shows ""Unable to find React on the page"" in the inspector Components pane. The website is a plain CRA app and the devtools is able to detect that the website is using a development build of the react when I click on the devtools icon in the browser extensions bar. I'm able to see the Components when I use devtools on a website other than mine (like reactjs.org). My app is served using the default `react-scripts start` command.
I don't know what exactly is causing the issue but I can share logs or whatever that help to pinpoint the issue as you request.
![Screenshot from 2020-04-23 00-51-25](https://user-images.githubusercontent.com/20463083/80030112-01cc9b00-84fd-11ea-90ac-220e5bb2eed4.png)
"
,,,https://github.com/facebook/react/issues/18518,18518,Bug: DevTools search filtering removes a space,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,1,2020-04-07T12:27:24Z,2020-04-07T17:28:22Z,2020-04-07T17:28:22Z,MEMBER,completed,bvaughn,"Compare two screenshots closely. The space after ""from"" disappears when the next word is selected. 
<img width=""574"" alt=""Screenshot 2020-04-07 at 13 26 40"" src=""https://user-images.githubusercontent.com/810438/78668988-7b487480-78d3-11ea-8836-7c75fb907e4f.png"">


<img width=""776"" alt=""Screenshot 2020-04-07 at 13 26 35"" src=""https://user-images.githubusercontent.com/810438/78668983-7a174780-78d3-11ea-967e-31d3f68aef64.png"">
"
,,,https://github.com/facebook/react/issues/18606,18606,"Can repro this in browserstack with Pixel XL and default chrome browser, here's a gif of the behavior (notice after I press spacebar the word disappears):","[{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,False,,1,2020-04-14T14:41:51Z,2020-04-14T15:51:46Z,2020-04-14T15:51:41Z,NONE,completed,,"Can repro this in browserstack with Pixel XL and default chrome browser, here's a gif of the behavior (notice after I press spacebar the word disappears):
![android](https://www.dropbox.com/s/904l9baubex0u0s/android-2.gif?raw=1)

_Originally posted by @icd2k3 in https://github.com/facebook/draft-js/issues/1077#issuecomment-321041952_"
,,,https://github.com/facebook/react/issues/18780,18780,"Saving an unrendered functional component to state throws ""Error: Should have a queue"" or ""Rendered more hooks than during the previous render.""","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2020-04-29T17:22:44Z,2020-04-29T17:31:12Z,2020-04-29T17:31:11Z,NONE,completed,,"React version: 16.13.1

## Steps To Reproduce

1. Create a component with hooks. Let's call it `Component` for brevity.
2. Save it to the state on the main functional component without creating it: `setState(Component)`.
Note that it is not `setState(<Component />)`
3. App crashes with either ""Error: Should have a queue."" or ""Rendered more hooks than during the previous render."", depending on the type of hooks 

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:
https://codesandbox.io/s/polished-sound-wpc8y

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
App crashes when adding an unrendered component to state. Rendering the component and then adding it to state works fine.

## The expected behavior
Both ways to be accepted as valid."
,,,https://github.com/facebook/react/issues/18666,18666,Bug: Uncaught Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object.,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2020-04-18T06:29:16Z,2020-04-18T07:06:57Z,2020-04-18T07:06:57Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: ^16.7.0 && 16.13.1

## Steps To Reproduce

1. Here is the following piece of code in `index.tsx`:

```javascript
import React from 'react';
import ReactDOM from 'react-dom';

// Please ignore type any, I have used it just to avoid confusion with the type of component passed
export const renderRoot = (Root: any) => {
    ReactDOM.render(<Root />,
        document.getElementById('root'),
    );
};
```
2. Now I want to pass a component to render:

```javascript
import renderRoot from '../index';
import React from 'react'

const Home = () => {
    return <div>Hello World</div>
}

renderRoot({
    Root: Home
});
```

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Please find the sandboxed code here: https://codesandbox.io/s/create-react-app-y9mfn?file=/index.js

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->
"
,,,https://github.com/facebook/react/issues/18775,18775,"Bug: list component when key exists, there will be cache item component","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,False,,3,2020-04-29T02:51:15Z,2020-08-08T07:41:40Z,2020-08-08T07:41:40Z,NONE,completed,,"React version:

```
 ""react"": ""^16.5.2"",
 ""react-dom"": ""^16.5.2"",
 ""mobx"": ""^5.9.0"",
 ""mobx-react"": ""^5.4.3"",
```

## Steps To Reproduce

The premise is as follows:
I use 'mobx' as state control.
I have 2 states, ` mydata = [] `,  `serData = [{XXX}]`, serData.length = 20.
I have a `mode; / / local or dispatch` is used to control the display of `mydata or serdata`

1. Show `mydata`. The page is blank at this time
2. Switch `mode = dispatch`, display`serData`, select the first `item data`
3. At this time, `mydata = [item data]`
4. Switch `mode = local`, show `mydata`
5. At this time, `mydata` shows four pieces of data, three of which are from the `serData` page. I've debugged it. At this time, `mydata = [item data]`, `< item / > render` only executes once, not four times

PS: when I `< item key = """" / >`, the display is normal and there is only one piece of data. `< item key = {item.guid} / >`
And this problem does not necessarily exist. There are many `list components` in my project, only 2 of them have this problem

"
,,,https://github.com/facebook/react/issues/18983,18983,Bug: eslint hooks plugin TypeScript optional chaining with exhaustive-deps,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2020-05-22T20:10:00Z,2021-11-30T09:45:55Z,2020-05-23T21:52:27Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: `16.13.0`
eslint-plugin-react-hooks version: `4.0.2`

When I upgraded from `^2.0.0` to `4.0.2`, this bug started happening:

## Steps To Reproduce

When you optionally chain, there is a bug with `exhaustive-deps`:

1. With no optional chaining, there is no issue
<img width=""463"" alt=""Screen Shot 2020-05-22 at 12 48 55 PM"" src=""https://user-images.githubusercontent.com/24969218/82704534-9aecef80-9c2a-11ea-8eb9-b312b7cb951a.png"">

2. With optional chaining, we see an eslint error
<img width=""462"" alt=""Screen Shot 2020-05-22 at 12 50 12 PM"" src=""https://user-images.githubusercontent.com/24969218/82704613-c8399d80-9c2a-11ea-91d0-b4f361114852.png"">

The error is 
```
React Hook useEffect has a missing dependency: 'test?.includes'. Either include it or remove the dependency array. eslint(react-hooks/exhaustive-deps)
```

Which auto fixes to:
<img width=""465"" alt=""Screen Shot 2020-05-22 at 12 52 25 PM"" src=""https://user-images.githubusercontent.com/24969218/82704749-19499180-9c2b-11ea-9b5b-c539ac7beb45.png"">

(in addition to being incorrect, this causes issues with the eslint `eslint@typescript-eslint/unbound-method` rule)"
,,,https://github.com/facebook/react/issues/18935,18935,DevTools: Uncaught error doesn't go away on page refresh,"[{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,4,2020-05-16T06:51:01Z,2020-05-21T18:21:23Z,2020-05-21T18:21:23Z,COLLABORATOR,completed,,"1. Wait for devtools to hit an error (eg: #18934).
2. Reload the page.

Expected: Devtools reinitializes cleanly.
Actual: Error is still there. Need to hide devtools, reload _again_, then show devtools to get it to behave.

DevTools version: 4.6.0-6cceaeb67

"
,,,https://github.com/facebook/react/issues/19006,19006,Bug: ReactPartialRenderer function createOpenTagMarkup calls isCustomComponent for every property unnecessarily,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2020-05-26T15:59:18Z,2020-05-26T20:41:34Z,2020-05-26T20:41:34Z,NONE,completed,bvaughn,This is a performance issue. Function isCustomComponent is called multiple times for each property of the same component inside of createOpenTagMarkup function (ReactPartialRenderer.js).
,,,https://github.com/facebook/react/issues/18896,18896,The DOM element that ref refers to is missing,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,4,2020-05-12T14:54:27Z,2020-05-12T17:42:25Z,2020-05-12T17:41:52Z,NONE,completed,,"I used useRef in the function component to refer to an audio element. When I clicked the content of the song, I sent some actions to Redux. Then the console reported an error and could not call the play and other methods of audio element. When I tried the ref callback to get audio element, according to the official document, the ref will be cleared every time it is updated, so this method still doesn't work. Could you please tell me how to solve the problem that the ref point element is missing?

React version: 16.13.1

## Steps To Reproduce

1. When you click on the song, it should start playing, but the DOM element that ref points to is null
2. The result is ""Cannot read property 'play' of null""

Main core code examples:
```js
let audioRef: React.RefObject<HTMLAudioElement> = createRef();
const setFullScreen = useCallback(() => updateFullScreenState(!fullScreen), [
  fullScreen,
]);
const songFadeInAndOutPlay = useMemo(
  () => new SongFadeInAndOutPlay(audioRef!.current!),
  []
);
const playControls = useCallback(
  (e: React.SyntheticEvent) => {
    if (!state) return;
    e.stopPropagation();
    if (playing) {
      songFadeInAndOutPlay.songFadeOutPause();
      audioRef!.current!.pause();
    } else {
      audioRef!.current!.play();
      songFadeInAndOutPlay.songFadeInPlay();
    }
    setState(false);
    updatePlayingState(!playing);
  },
  [playing, state]
);

const startPlay = useCallback(() => {
  const songFadeInAndOutPlay = new SongFadeInAndOutPlay(audioRef!.current!);
  audioRef!.current!.play();
  songFadeInAndOutPlay.songFadeInPlay();
  setState(true);
}, [state]);
```
Props received from Redux:
`export default function Player({ fullScreen, playing, currentSong, updateFullScreenState, updatePlayingState }: PlayerProps)`

Link to code example:
[https://github.com/VitaminCtea/reactBugImage/blob/master/reactReportImage.gif](errorImage)

## The current behavior
The ref points to the DOM element missing, and Redux dispatches the event as normal

## The expected behavior
The DOM element that the ref points to is not lost
**How can I solve the problem I am facing? Am I doing this correctly?**
supplementary instruction:

> These useCallbaxk functions cannot be broken down into the useEffect hook because you are listening for props from Redux, so even if the useEffect hook is listening for props, the supplied props value will not be updated! The use of ref callbacks will also lose the reference to the element!"
,,,https://github.com/facebook/react/issues/18839,18839,Inhancement: Dispatch (returned by useReducer) shuould also be available as third parameter in reducer function.,[],closed,False,,3,2020-05-06T07:05:37Z,2020-05-07T11:56:40Z,2020-05-07T11:56:39Z,NONE,completed,,"React version: @latest

**I am using Context API to manage state of my application, and stuck at below problem.**

## The current behavior
Currently, reducer function takes just **state** and **action** as parameter. I can dispatch actions from components only, due the behavior of hooks (as you know). But what if I there is some dependent action (**Y**) on action (**X**) which needs to be called after completion of action (**X**). Currently there is no way to handle this kind of scenario. 

## The expected behavior
If there had been **dispatch** function as third parameter, passed internally and automatically to the reducer function, we could have solved above problem. 

Currently I have to pass **dispatch** as part of action payload, which does not look right and clean.

This will help developers to write clean code, and all the logic related to dependent actions can be moved inside reducer function from components.

## Example

```javascript
const reducer = (state, action, dispatch) => {
  switch (action.type) {
    case 'LOGIN':
      // Do LOGIN related stuff here
      dispatch({ type: 'LOGIN_SUCCESS' });
      return { ...state };
    case 'LOGIN_SUCCESS':
      // Do LOGIN_SUCCESS related stuff here
      return { ...state };
    default:
      return state;
  }
};
```"
,,,https://github.com/facebook/react/issues/19015,19015,export default Form.create()(connect(mapStateToProps)(CommonLog));,[],closed,False,,6,2020-05-27T07:47:37Z,2021-09-14T15:22:31Z,2020-05-27T16:15:48Z,NONE,completed,,"`export default Form.create()(connect(mapStateToProps)(CommonLog));`

```
function mapStateToProps(state) {
    return {
        user: state.user
    }
}

export default Form.create()(connect(mapStateToProps)(FailCMD));
```

Before，our project has some codes like this. But now, antd as 3.x to 4.2.5, how to change the code ?"
,,,https://github.com/facebook/react/issues/18848,18848,Bug: useLayoutEffect callback called twice when a dom node is in a dependency array,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,10,2020-05-06T19:43:49Z,2020-05-07T11:59:24Z,2020-05-06T20:48:04Z,CONTRIBUTOR,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: v16.3.1

## Steps To Reproduce

1. add `useLayoutEffect`
2. add dom node to the deps array
3. invoke setState inside useLayoutEffect callback

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:
https://codepen.io/everdimension/pen/rNOpZGK

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
`useLayoutEffect` callback gets called a second time, although the values in the deps array have not changed

## The expected behavior
`useLayoutEffect` callback should not get called unless values in the dependency array change"
,,,https://github.com/facebook/react/issues/19043,19043,Bug: eslint-plugin-react-hooks:  Cannot read property 'references' of undefined,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,12,2020-05-29T15:15:49Z,2020-07-01T13:21:11Z,2020-07-01T13:21:11Z,NONE,completed,Xiot,"eslint-plugin-react-hooks is throwing a `Cannot read property 'references' of undefined` error on `/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:1683:23`

I added a console log statement before that line
```
var usedDep = dependencies.get(missingDep);
          console.log('usedDep', usedDep, missingDep, dependencies)
          if (usedDep.references[0].resolved !== topScopeRef) {   // error is thrown here
```
and this is the output.
```
usedDep undefined program?.slug Map {
  'program?.uuid' => { isStatic: false, references: [ [Reference] ] },
  'monitorService' => { isStatic: false, references: [ [Reference] ] },
  'navigate' => { isStatic: false, references: [ [Reference] ] },
  'program.slug' => { isStatic: false, references: [ [Reference] ] } }
```

I don't actually have `program?.slug` referenced anywhere in this file. 
I am using `program.slug` though.

Versions:
eslint-plugin-react-hooks@4.0.4
eslint@6.8.0
babel-eslint@10.1.0

## Steps To Reproduce
The code below throws the error.
I have found 2 ways to stop the error from happening.
1. Removing the line ` programUuid: program?.uuid ?? '', `
2. adding `program.slug` to the list of dependencies.

Link to code example:
```
const onSave = useCallback(
    args => {
      const request: CreateMonitorV3Request = {
        programUuid: program?.uuid ?? '',        
      };

      monitorService
        .create(request)
        .then(x => {
          // $FlowFixMe - program will be available
          navigate(`/programs/${program.slug}/monitors/${x.uuid}`);
        })
        .catch(ex => {
          console.log('error', ex);
        });
    },
    [monitorService, program?.uuid]
  );
```

## The current behavior
Error is thrown `Cannot read property 'references' of undefined`

## The expected behavior
eslint successfully reports that I'm missing dependencies in `useCallback`


Full Stack trace:
```
TypeError: Cannot read property 'references' of undefined
Occurred while linting /project-root/src/pages/monitor/configuration-pages/new-monitor-page.js:26
    at /project-root/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:1683:23
    at Set.forEach (<anonymous>)
    at visitFunctionWithDependencies (/project-root/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:1674:29)
    at visitCallExpression (/project-root/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:826:11)
    at listeners.(anonymous function).forEach.listener (/project-root/node_modules/eslint/lib/linter/safe-emitter.js:45:58)
    at Array.forEach (<anonymous>)
    at Object.emit (/project-root/node_modules/eslint/lib/linter/safe-emitter.js:45:38)
    at NodeEventGenerator.applySelector (/project-root/node_modules/eslint/lib/linter/node-event-generator.js:254:26)
    at NodeEventGenerator.applySelectors (/project-root/node_modules/eslint/lib/linter/node-event-generator.js:283:22)
    at NodeEventGenerator.enterNode (/project-root/node_modules/eslint/lib/linter/node-event-generator.js:297:14)
```"
,,,https://github.com/facebook/react/issues/18853,18853,Bug: Devtools conceal lack of setImmediate polyfill,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2020-05-07T03:38:24Z,2020-05-07T22:36:50Z,2020-05-07T22:36:50Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: N/A; sample app uses 16.13.1
Devtools version: 6cceaeb67 on FF and Chrome

## Steps To Reproduce

Generally speaking:
1. Call `setImmediate` in a react app without a polyfill after react devtools have initialized.

To demonstrate in the sample app:
1. Open sample app with browser devtools closed.
2. Click button and observe that `setImmediate` is not defined initially or after mounting react.
3. Open browser devtools to allow react devtools extension to initialize.
4. Click button and observe that `setImmediate` has been defined.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

I couldn't figure out how to prevent polyfills from being included on CodeSandbox.
[js bin editor](https://jsbin.com/rixunedepi/1/edit?html)
[repro page](https://output.jsbin.com/rixunedepi/1)
<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
React devtools globally defines a polyfill for `setImmediate`, masking the problem.

## The expected behavior
Usage of `setImmediate` without a polyfill in an app will throw an error."
,,,https://github.com/facebook/react/issues/18971,18971,Bug: Typing Fast into Controlled Input doesn't change value visually immediately,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,8,2020-05-21T14:17:47Z,2020-05-22T09:04:37Z,2020-05-22T09:04:37Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

I have a controlled input and when I type slowly, it updates the state and shows the current input value. However, when I start typing fast, I can see the input value updating in the DOM in the developer tools but the input becomes empty visually until I stop typing and then I can see the updated value visually too.

I have provided a gif where I start typing fast and you can see the value changing in the developer tools at the bottom of the screen but the input becomes blank when typing fast till I stop.

![bug](https://user-images.githubusercontent.com/53095479/82567798-8d7e2980-9b86-11ea-92b1-448872ac8777.gif)


React version: 16.13.1

## Steps To Reproduce

1. Create a control input
2. Start typing very fast

## The current behavior
When typing fast into a controlled input, the value of the input in the dev tools updated but the input becomes visually empty until I stop

## The expected behavior
When typing fast into a controlled input, the input should update visually."
,,,https://github.com/facebook/react/issues/19211,19211,Bug: React hook state not cleared when rendering using ReactDOMServer if component errors,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,0,2020-06-29T23:26:29Z,2020-07-08T02:10:24Z,2020-07-08T02:10:24Z,CONTRIBUTOR,completed,,"In the react-dom package, React maintains some global internal state for hooks when server rendering a component (https://github.com/facebook/react/blob/v16.13.1/packages/react-dom/src/server/ReactPartialRendererHooks.js#L44-L54). The state is reset after [each function component finishes rendering](https://github.com/facebook/react/blob/v16.13.1/packages/react-dom/src/server/ReactPartialRenderer.js#L535) via [the `finishHooks` function](https://github.com/facebook/react/blob/v16.13.1/packages/react-dom/src/server/ReactPartialRendererHooks.js#L197-L201). 

Since the state of the hooks are only reset after a component finishes rendering, we can observe incorrect hooks state if a component that was using hooks raised an error while rendering, thus causing the finishHooks call to never execute. The next function component to render within the same process would then use the hooks state from the Component that previously failed to render, potentially causing mismatches.

We can work around this bug by rendering a no-op function component at the top of our react tree (which will cause `finishHooks` to properly run), but it seems like a more ideal fix would be to reset the hooks state as part of [the `prepareHooks` call](https://github.com/facebook/react/blob/v16.13.1/packages/react-dom/src/server/ReactPartialRendererHooks.js#L161-L173).  The comments actually have the code already present -- maybe there is a good reason for the state not to be reset there?

React version: 16.13.1

## Steps To Reproduce
Refer to the steps in the README of the example repo.

Link to code example:
https://github.com/pmaccart/react-hooks-ssr-state-leak

## The current behavior
The hooks state of a component is not cleared between renders


## The expected behavior
The hooks state of a component is cleared between renders
"
,,,https://github.com/facebook/react/issues/19185,19185,Bug: npx create-react-app my-app returns error,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,4,2020-06-24T06:09:33Z,2020-06-24T14:02:14Z,2020-06-24T14:02:13Z,NONE,completed,,"Typing npx-react-app doesn't work. It throws error.

## Steps To Reproduce

 `npx create-react-app my-app`

## The current behavior
![cmd_PFUUb2Y3Lu](https://user-images.githubusercontent.com/32035481/85506763-ce001580-b612-11ea-821e-83eb39cbfc22.png)
Th error shown in cmd is:
```
npm ERR! code ENOLOCAL
npm ERR! Could not install from ""Amin\AppData\Roaming\npm-cache\_npx\2956"" as it does not contain a package.json file.

npm ERR! A complete log of this run can be found in:
npm ERR!     C:\Users\Farhan Bin Amin\AppData\Roaming\npm-cache\_logs\2020-06-24T05_56_16_593Z-debug.log
Install for [ 'create-react-app@latest' ] failed with code 1
```
The debug log file is:
```
0 info it worked if it ends with ok
1 verbose cli [
1 verbose cli   'C:\\Program Files\\nodejs\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'install',
1 verbose cli   'create-react-app@latest',
1 verbose cli   '--global',
1 verbose cli   '--prefix',
1 verbose cli   'C:\\Users\\Farhan',
1 verbose cli   'Bin',
1 verbose cli   'Amin\\AppData\\Roaming\\npm-cache\\_npx\\2956',
1 verbose cli   '--loglevel',
1 verbose cli   'error',
1 verbose cli   '--json'
1 verbose cli ]
2 info using npm@6.14.4
3 info using node@v12.16.3
4 verbose npm-session a74bdc721a94d85a
5 silly install loadCurrentTree
6 silly install readGlobalPackageData
7 silly fetchPackageMetaData error for file:Amin\AppData\Roaming\npm-cache\_npx\2956 Could not install from ""Amin\AppData\Roaming\npm-cache\_npx\2956"" as it does not contain a package.json file.
8 http fetch GET 304 https://registry.npmjs.org/create-react-app 242ms (from cache)
9 silly pacote tag manifest for create-react-app@latest fetched in 262ms
10 http fetch GET 404 https://registry.npmjs.org/Bin 1039ms
11 http fetch GET 404 https://registry.npmjs.org/Bin 939ms
12 silly fetchPackageMetaData error for Bin@latest 404 Not Found - GET https://registry.npmjs.org/Bin - Not found
13 timing stage:rollbackFailedOptional Completed in 2ms
14 timing stage:runTopLevelLifecycles Completed in 2027ms
15 verbose stack Error: ENOENT: no such file or directory, open 'F:\react\Amin\AppData\Roaming\npm-cache\_npx\2956\package.json'
16 verbose cwd F:\react
17 verbose Windows_NT 10.0.15063
18 verbose argv ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js"" ""install"" ""create-react-app@latest"" ""--global"" ""--prefix"" ""C:\\Users\\Farhan"" ""Bin"" ""Amin\\AppData\\Roaming\\npm-cache\\_npx\\2956"" ""--loglevel"" ""error"" ""--json""
19 verbose node v12.16.3
20 verbose npm  v6.14.4
21 error code ENOLOCAL
22 error Could not install from ""Amin\AppData\Roaming\npm-cache\_npx\2956"" as it does not contain a package.json file.
23 verbose exit [ 1, true ]

```
Also I have I have node version `12.16.3` and npm version `6.14.4` installed. My pc is running windows 10.
"
,,,https://github.com/facebook/react/issues/19105,19105,Bug: Incorrect HTML attribute name for custom tags,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,3,2020-06-09T13:01:46Z,2020-06-10T05:18:33Z,2020-06-10T05:18:33Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.13.1

Hello developers,

## Steps To Reproduce

1. Use `React.createElement` to create a custom tag, e.g. `mjx-container`, `mjx-i` (these are tags used by mathjax), and set its `className`. For example, `React.createElement('mjx-container',  { className: 'Mathjax' }, 'Hello')`
2. Checkout the dev tools, and you can see that we have got `<mjx-container classname=""Mathjax"">Hello</mjx-container>`. However, I expected to have `class`, but not `classname`. Since `className` attribute makes sense only in React JSX, but not in HTML and CSS.

![image](https://user-images.githubusercontent.com/25521218/84149661-66cf5680-aa93-11ea-8247-da9ddf5f6c6c.png)


<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://codepen.io/Margatroid/pen/KKVdYdd

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior

I expect to get `<mjx-container class=""Mathjax"">Hello</mjx-container>`

## The expected behavior

But I have got `<mjx-container classname=""Mathjax"">Hello</mjx-container>`

I've encountered this issue when trying to use gatsby, mdx, and Mathjax to render equations service-side. My current workaround is replacing `className`s to `class`es for mathjax related tags.

Thank you for your time!"
,,,https://github.com/facebook/react/issues/19127,19127,Bug: React is taking longer time to open in Browser,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,3,2020-06-13T07:45:15Z,2021-01-25T14:34:05Z,2020-06-13T20:38:25Z,NONE,completed,,"I have just started to learn React. So you can came to a conclusion that _I don't build heavy apps_. When I run `npm start` it takes minimum of 15 seconds to open up in the browser. Herewith I have attached the screenshot for your reference

![image](https://user-images.githubusercontent.com/53224551/84563246-beaddc00-ad77-11ea-80b9-04fa1d984962.png)
"
,,,https://github.com/facebook/react/issues/19082,19082,testing,[],closed,False,,0,2020-06-05T20:13:37Z,2020-06-05T23:04:28Z,2020-06-05T23:04:28Z,NONE,completed,,This is a test issue
,,,https://github.com/facebook/react/issues/19151,19151,React Developer Tool Is not working in my localhost. It was working fine before.,[],closed,False,,14,2020-06-18T05:31:08Z,2022-07-28T03:55:02Z,2020-06-22T15:49:12Z,NONE,completed,,"Hi Team

I am not able to use the react developer tool extension on my chrome browser, Which was working well before.  I have tried by removing and re adding the extension again. Still the problem persists.

I have attached a screenshot of the tool Icon on browser. I am very new to react Environment. Appreciate your help here.

Thank you.

![image](https://user-images.githubusercontent.com/28383863/84981630-8f6de500-b152-11ea-909f-f386f226d7ee.png)
"
,,,https://github.com/facebook/react/issues/19119,19119,Loading chunk 0 failed when change hash route parameter,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2020-06-11T21:29:03Z,2020-06-12T14:32:56Z,2020-06-11T23:26:09Z,NONE,completed,,"I have done a lot of search on line (here and stackoverflow) and it looks none can help or indicate the cause and it has bothered me for couple of months without any solution.

It would be great to get  help from REACT expert.

Here is some introduction about our application
1. It is a WPF/Cocoa application running for Windows/Mac OS X. It embeds a CEF browser in the WPF/NSWindow and load the pages directly from its installation folder, i.e., a local disk.
2. The UI  is a REACT single page application so it is the exactly same version of npm package consumed by Windows and Mac OS.
3. It uses WebPack 4.20.* build and it splits code, the configuration is quite standard from my understanding.
4. It uses REACT's lazy load to load different components according to the router path.
5. It uses hash router.
6. All js files has a meaningful chunk name and hash value in the bundle.
7. The Chromium version is same for Win and Mac. The  Chromium browser won't cache the files.
8. When the application upgrade, it will reboot the application.
 
I find the issue:
1. it reproduces only from several customers' devices in a very low rate and I cannot reproduce locally.
2. it reproduces more from Mac OS than from Windows OS like 100 VS 1 rate in a month.
3. it happens during a router change, for example
- it inits with url:  ***index.en.html?locale=en-GB&os=MacOS&config=Release#HomePage/**AccountPlaceholder/ActivationPlaceholder/StoreIdPlaceholder**""

- then changes to ***index.en.html?locale=en-GB&os=MacOS&config=Release#HomePage/**AccountName/deactivated/1435508**""

4. from Chromium browser's log, it shows that this js file have been loaded completed.

Since these js files are all used by the HomePage, the only change is the router's parameters. 

So I have the questions:
1. Will REACT cancel the JS loading if the router parameter changes? and when it asks it again, it got a reject promise?
2. Any expert would tell me what may the causes?

React version: 16.8 and also see this issue from the previous version.

## Steps To Reproduce
No step to reproduce as it happens in a very local rate and only from some user's machine.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
"
,,,https://github.com/facebook/react/issues/19125,19125,eslint rules: mark certain values as having a stable identity,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":1249821345,""node_id"":""MDU6TGFiZWwxMjQ5ODIxMzQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules"",""name"":""Component: ESLint Rules"",""color"":""f7afdb"",""default"":false,""description"":""""}]",closed,False,,7,2020-06-12T22:54:36Z,2020-07-27T18:37:56Z,2020-07-27T18:29:21Z,NONE,completed,,"eslint-plugin-react-hooks version: 4.0.4

I have the following custom hook:

```js
export function useForceUpdate() {
  const [, setValue] = useState(0);
  return useCallback(() => setValue((v) => v + 1), []);
}
```

But when I use it:

```js
function MyComponent(props) {
  const forceUpdate = useForceUpdate();

  // ... snip ...

  useEffect(() => {
    // do stuff
    forceUpdate();
  }, [foo, bar]);

  // ... continue
}
```

The linter complains (rightfully so):

```
warning  React Hook useEffect has a missing dependency: 'forceUpdate'. Either include it or remove the dependency array
```

It would useful to have a configuration option to tell the linter that `forceUpdate` is guaranteed to have a stable identity, so it can give it the same treatment as e.g. `useState`'s callback. Otherwise, I have to disable the rule every time I use the hook!"
,,,https://github.com/facebook/react/issues/19299,19299,Bug: ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,6,2020-07-09T15:59:34Z,2020-07-12T21:54:03Z,2020-07-09T16:29:11Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.13.1

## Steps To Reproduce

1. Create a React app which ask for camera permission.
2. Create a build od this app and try to use it.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://github.com/Mdsp9070/cameraBrowser

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
The development server works fine, however when I create the build and try to access the route, I get this error:

 ```Component(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.```

### Screenshots:
![Screenshot from 2020-07-09 12-58-21](https://user-images.githubusercontent.com/44469426/87062836-f592d880-c1e3-11ea-9e8f-c9844b29c6c7.png)
![Screenshot from 2020-07-09 12-58-36](https://user-images.githubusercontent.com/44469426/87062851-f9265f80-c1e3-11ea-901d-df04eca7eb6d.png)


## The expected behavior
Ask for camera access and render the camera view with a video playent centered on the screen."
,,,https://github.com/facebook/react/issues/19468,19468,"Error: ""Commit tree already contains fiber 8440. This is a bug in React DevTools.""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,2,2020-07-27T18:13:24Z,2021-04-28T20:30:35Z,2020-07-27T20:35:56Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. Turn on Profiler
2. The app sens a lot of small requests to BE
3. To make sure that all requests fulfilled, I went to Network TAB. When it was finished and stop profiling.
4. The profiler showed some results and then crashed.

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.8.2-fed4ae024

Call stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17786:17)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17717:25)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)
    at ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18265:14)
    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31718:33)

Component stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31701:48)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)
    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)"
,,,https://github.com/facebook/react/issues/19318,19318,Bug: act warning misleading if an effect wasn't run,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":739761016,""node_id"":""MDU6TGFiZWw3Mzk3NjEwMTY="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler"",""name"":""Component: Reconciler"",""color"":""f9a798"",""default"":false,""description"":null}]",closed,False,,3,2020-07-11T12:51:11Z,2021-08-11T12:45:52Z,2021-08-11T12:45:52Z,COLLABORATOR,completed,,"
React version: 16.13.1 and `next`

## Steps To Reproduce

1. Re-render a component where an effect wasn't run because dependencies didn't change
2. Receive missing act warning


Link to code example: https://codesandbox.io/s/missing-act-on-every-effect-ldy3b?file=/src/index.test.js

## The current behavior

React creates warnings for each call of React.useEffect regardless of whether an effect was actually scheduled i.e. the effect was run.

## The expected behavior

If it is impossible for an effect to be run I shouldn't have to wrap it in act. Changing the behavior would help identifying what effects were unexpectedly scheduled. Right now we receive warnings for effects that are unrelated to a specific update.

I consider the current warning misleading and unnecessary because the [documentation](https://reactjs.org/docs/testing-recipes.html#act) talks about ""all updates related to these “units”"" which is not the case here in my opinion. The act warning says ""When testing, code that causes React state updates should be wrapped into act(...):"" which also doesn't apply here: The code in question could not cause a state update from an effect.
"
,,,https://github.com/facebook/react/issues/19490,19490,useState,[],closed,False,,1,2020-07-30T02:38:36Z,2020-07-30T04:42:30Z,2020-07-30T04:38:12Z,NONE,completed,,useState在每次组件re-render的时候都会生成新的值，为什么把这个值传递给子组件，子组件不会re-render
,,,https://github.com/facebook/react/issues/19424,19424,React Dev Tools not working with .NET core react+redux Visual Studio 2019 application,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,6,2020-07-21T05:23:18Z,2020-07-23T23:15:42Z,2020-07-23T23:15:42Z,NONE,completed,francotiveron,"I have an application which I inherited and have to maintain it (cannot contact who developed it). This application has been crated using Visual Studio, as a .NET Core Web App with C# back-end and react+redux frontend (react+redux template).

I am using Visual Studio 2019, and I can open, build and run the application just fine. The problem I have is when I want to debug the front-end. When I open Chrome's dev tools (with react dev tools for Chrome extension installed), the extension doesn't detect react (""This page doesn’t appear to be using React"").

To verify that my environment is healthy, I create a brand new app and the react dev tools work just fine, as they should.

I compared project configurations, appsettings.json, launchSetting.json and the Startup.cs for middleware and services, with no luck. I am asking whether someone can give me hints or clues on what could be missing or what else can I try"
,,,https://github.com/facebook/react/issues/19250,19250,Bug: npm run build failed using with Docker,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2020-07-03T19:03:37Z,2020-07-04T02:14:58Z,2020-07-04T02:14:57Z,NONE,completed,,"<!--
I came up with the impression while running the '`docker run <id> npm run test'` in which this command populated the error Cannot find module '@nodelib/fs.stat'. But, running the similar command using `docker compose up` which it ran successfully and return the output as which was expected.
-->

React version: 6.14.5

## Steps To Reproduce

1.docker run <image-id> npm run test

FYI please find the attached detail log while running the command.

$ docker run 4e6866278613 npm run test 

> frontend@0.1.0 test /app
> react-scripts test

internal/modules/cjs/loader.js:1032
  throw err;
  ^

Error: Cannot find module '@nodelib/fs.stat'
Require stack:
- /app/node_modules/fast-glob/out/adapters/fs-stream.js
- /app/node_modules/fast-glob/out/providers/reader-async.js
- /app/node_modules/fast-glob/out/index.js
- /app/node_modules/fast-glob/index.js
- /app/node_modules/globby/index.js
- /app/node_modules/react-dev-utils/globby.js
- /app/node_modules/react-scripts/scripts/utils/verifyTypeScriptSetup.js
- /app/node_modules/react-scripts/scripts/test.js
    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:1029:15)
    at Function.Module._load (internal/modules/cjs/loader.js:898:27)
    at Module.require (internal/modules/cjs/loader.js:1089:19)
    at require (internal/modules/cjs/helpers.js:73:18)
    at Object.<anonymous> (/app/node_modules/fast-glob/out/adapters/fs-stream.js:17:14)
    at Module._compile (internal/modules/cjs/loader.js:1200:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1220:10)
    at Module.load (internal/modules/cjs/loader.js:1049:32)
    at Function.Module._load (internal/modules/cjs/loader.js:937:14)
    at Module.require (internal/modules/cjs/loader.js:1089:19) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [
    '/app/node_modules/fast-glob/out/adapters/fs-stream.js',
    '/app/node_modules/fast-glob/out/providers/reader-async.js',
    '/app/node_modules/fast-glob/out/index.js',
    '/app/node_modules/fast-glob/index.js',
    '/app/node_modules/globby/index.js',
    '/app/node_modules/react-dev-utils/globby.js',
    '/app/node_modules/react-scripts/scripts/utils/verifyTypeScriptSetup.js',
    '/app/node_modules/react-scripts/scripts/test.js'
  ]
}
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! frontend@0.1.0 test: `react-scripts test`
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the frontend@0.1.0 test script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /root/.npm/_logs/2020-07-03T18_45_43_367Z-debug.log
"
,,,https://github.com/facebook/react/issues/19229,19229,CI missing failing tests?,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":71502270,""node_id"":""MDU6TGFiZWw3MTUwMjI3MA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure"",""name"":""Component: Build Infrastructure"",""color"":""f9d0c4"",""default"":false,""description"":null}]",closed,False,,6,2020-07-01T15:30:08Z,2020-08-18T21:05:13Z,2020-08-18T21:05:12Z,COLLABORATOR,completed,,"PR #19222 recently landed with no CI failures, but `ReactDOMServerSelectiveHydration` was definitely broken as a result of this PR (and was subsequently fixed in #19227). This is just a reminder for one of us to dig into why CI didn't catch this failure."
,,,https://github.com/facebook/react/issues/19477,19477,Bug: Passing valid and then empty style value doesn't remove prior value,"[{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,False,,2,2020-07-28T22:14:41Z,2020-07-29T22:17:13Z,2020-07-28T23:02:45Z,NONE,completed,,"React version: 16.13.1

## Steps To Reproduce

1. Give element a valid backgroundColor: `style={{backgroundColor: 'blue'}}`
2. Update component so that on the next render you have a commented-out value: `style={{backgroundColor: '/*blue*/'}}`, or any value deemed ""invalid"" by React.

Link to code example:

A code sandbox that toggles with the two above examples, and a toggle on click is provided here: https://codesandbox.io/s/adoring-currying-z4x2r?file=/src/App.tsx:316-320

## The current behavior
If I pass a valid string to an element's style property, e.g. `style={{border: '20px solid rebeccapurple'}}`, and then update that value to e.g., `'nonsense'`, the new invalid value is not pushed to the DOM. However the old value is kept on the DOM.

Furthermore, updating a valid value, e.g. `style={{backgroundColor: 'blue'}}` with a valid empty value, e.g. `style={{backgroundColor: '/*blue*/'}}` does the same: the old value is kept on the DOM.

## The expected behavior
An invalid value or an empty valid value would at least either remove the previous value from the DOM, or be pushed through. (I've not understood why invalid values weren't pushed through and am genuinely curious to hear if there is a good reason, would love to learn.)"
,,,https://github.com/facebook/react/issues/19445,19445,Bug: React 16.11.0 Install error: Unexpected end of input,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2020-07-24T06:19:06Z,2020-07-26T07:38:08Z,2020-07-26T07:38:08Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->
## Description
Today, I wanted to learn react-native after learning react. So, I went to [React Native Official Website](https://reactnative.dev). In the setup of the environment, I learnt about expo-cli. I went to [Expo](https://expo.io) and installed by copying the command. It installed well. But when I created a project by `expo init` command, it throwed an error at Installing React@16.11.0. See the below screenshot.
I tried to install every package except React, then `npm install react@~16.11.0` but failed.

My package.json:
```
{
  ""main"": ""node_modules/expo/AppEntry.js"",
  ""scripts"": {
    ""start"": ""expo start"",
    ""android"": ""expo start --android"",
    ""ios"": ""expo start --ios"",
    ""web"": ""expo start --web"",
    ""eject"": ""expo eject""
  },
  ""dependencies"": {
    ""expo"": ""^38.0.8"",
    ""expo-status-bar"": ""^1.0.2"",
    ""react"": ""~16.11.0"",
    ""react-dom"": ""^16.11.0"",
    ""react-native"": ""https://github.com/expo/react-native/archive/sdk-38.0.2.tar.gz"",
    ""react-native-web"": ""^0.11.7""
  },
  ""devDependencies"": {
    ""@babel/core"": ""^7.8.6"",
    ""babel-preset-expo"": ""~8.1.0""
  },
  ""private"": true
}
```

npm Debug Log:
```
0 info it worked if it ends with ok
1 verbose cli [
1 verbose cli   'C:\\Program Files\\nodejs\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'install',
1 verbose cli   'react@~16.11.0'
1 verbose cli ]
2 info using npm@6.14.4
3 info using node@v12.18.0
4 verbose npm-session 928895f1c47b33d6
5 silly install loadCurrentTree
6 silly install readLocalPackageData
7 http fetch GET 304 https://registry.npmjs.org/react 2210ms (from cache)
8 silly fetchPackageMetaData error for react@~16.11.0 Unexpected end of JSON input while parsing near '...1.0"",""object-assign"":'
9 timing stage:rollbackFailedOptional Completed in 1ms
10 timing stage:runTopLevelLifecycles Completed in 32243ms
11 verbose stack SyntaxError: Unexpected end of JSON input while parsing near '...1.0"",""object-assign"":'
11 verbose stack     at JSON.parse (<anonymous>)
11 verbose stack     at parseJson (C:\Program Files\nodejs\node_modules\npm\node_modules\json-parse-better-errors\index.js:7:17)
11 verbose stack     at C:\Program Files\nodejs\node_modules\npm\node_modules\node-fetch-npm\src\body.js:96:50
11 verbose stack     at processTicksAndRejections (internal/process/task_queues.js:97:5)
12 verbose cwd D:\homework\COMPUTER\Programming\Web\Self Tutorials\swag-react-native
13 verbose Windows_NT 6.1.7601
14 verbose argv ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js"" ""install"" ""react@~16.11.0""
15 verbose node v12.18.0
16 verbose npm  v6.14.4
17 error Unexpected end of JSON input while parsing near '...1.0"",""object-assign"":'
18 verbose exit [ 1, true ]
```


React version: 16.11.0

## Steps To Reproduce

1. Run `npm install react@~16.11.0` from the terminal
2. Get an error:
![Capture](https://user-images.githubusercontent.com/54971391/88365179-d7f86e00-cda2-11ea-8ba6-26a37b06bfa3.PNG)


<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: No code, as nothing is installed

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
Throwing the above error.

## The expected behavior
Install React 16.11.0"
,,,https://github.com/facebook/react/issues/19296,19296,Bug: checked attribute doesn't change in DOM even though React handles it's state correctly,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,4,2020-07-09T14:39:06Z,2020-08-20T12:24:55Z,2020-08-20T12:24:55Z,NONE,completed,,"**For inputs of type 'checkbox', the checked attribute doesn't change in the actual DOM to match the react state.**

When the input is checked, the attribute is `checked=""""`, as expected
![When checked, 'checked=""""'](https://user-images.githubusercontent.com/43141484/87051612-cc674d80-c1cd-11ea-905d-a14da9ef9692.png)
---
When the input is unchecked, the attribute is still `checked=""""`
![When unchecked, still 'checked=""""'](https://user-images.githubusercontent.com/43141484/87051904-2c5df400-c1ce-11ea-9825-7f7ab13777c4.png)
This same odd behavior applies to radio buttons too.

React version: 16.13.1

## Steps To Reproduce

1.  Make a Controlled Component Checkbox
2. Check and uncheck the checkbox
3. Notice that the input element's 'checked' attribute remains unchanged regardless of the value of the actual checked prop in the component.

Link to code example:
From the [official React CodePen example](https://codepen.io/gaearon/pen/wgedvV?editors=0010) used in the React Docs
https://codepen.io/gaearon/pen/wgedvV?editors=0010

## The current behavior
'checked' attribute remains unchanged and out of sync with the react component state that should manage the attribute

## The expected behavior
The 'checked' attribute should be the same as a new input that starts unchecked and has never been checked (see image)

(Firefox on the left, chrome on the right)
![Expected attributes](https://user-images.githubusercontent.com/43141484/87053129-96c36400-c1cf-11ea-9465-3429698c6f6c.png)"
,,,https://github.com/facebook/react/issues/19726,19726,Bug: DevTools calls arbitrary generators which may be stateful,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null},{""id"":725156255,""node_id"":""MDU6TGFiZWw3MjUxNTYyNTU="",""url"":""https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)"",""name"":""good first issue (taken)"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,11,2020-08-30T01:03:14Z,2020-09-22T18:23:20Z,2020-09-22T18:23:20Z,MEMBER,completed,bvaughn,"```js
function foo*() {
  yield 1;
  yield 2;
}

let gen = foo()
```

Currently if you put `gen` into state or props and then open this component in DevTools, it will consume that generator while trying to format it. So `gen.next()` will give you `{ done: true }` next time you call it.

This happens here:

https://github.com/facebook/react/blob/60ba723bf78b9a28f60dce854e88e206fab52301/packages/react-devtools-shared/src/utils.js#L616-L623

I think that maybe we should treat iterables differently if they *return themselves* as an iterator. Since that means they're likely stateful and it's not ok to iterate over them.

We detect iterables here (DevTools terminology is wrong btw, it should be `iterable` rather than `iterator`):

https://github.com/facebook/react/blob/60ba723bf78b9a28f60dce854e88e206fab52301/packages/react-devtools-shared/src/utils.js#L438-L439

I think maybe we could split this into `iterable` and `opaque_iterable`, and make sure none of the codepaths attempt to traverse `opaque_iterable` or pass it to something that would consume it (e.g. `Array.from`).

We could detect it based on `data[Symbol.iterator]() === data` — that clearly signals the iterable is its own iterator (which is the case for generators), and therefore it's not OK for DevTools to consume it.

Maybe some other heuristic could work. But overall, the goal is that `Map` and friends is still being iterated over, but an arbitrary generator is not."
,,,https://github.com/facebook/react/issues/19697,19697,Bug: weird behavior when useState hook sets state for the first time vs subsequent times,"[{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,False,,8,2020-08-26T05:10:15Z,2020-08-26T11:06:41Z,2020-08-26T07:50:19Z,CONTRIBUTOR,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1. Create a simple component with a button which sets state on click.
2. inside onClick, add multiple calls to state setter function using updater function to access previous state
3. The first call seems to be synchronous (although state is still set asynchronously) and others are batched. Any subsequent calls work as expected.


Link to code example:
https://codesandbox.io/s/set-state-calls-are-batched-and-all-executed-before-render-hooks-github-issue-09sin

## The current behavior
logs:
```
1
onclick 0
2
3
renderin
```

## The expected behavior
should log:
```
onclick 0
1
2
3
rendering
```


Not sure if it would lead to any unexpected bugs, because state is still set async, though the function execution is synchronous

https://stackoverflow.com/questions/63586754/react-weird-behavior-when-usestate-hook-sets-state-for-the-first-time-vs-subse"
,,,https://github.com/facebook/react/issues/19597,19597,Bug: Wont set file to state with hooks,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,9,2020-08-13T02:21:26Z,2020-08-15T04:30:29Z,2020-08-15T04:30:29Z,NONE,completed,,"I'm having an issue where the state is refusing to be set to a file, below is a summarised version of my code
```
let [files, setFiles] = useState([]);

const handleFile = (file, index) => {
        let old = [...files];
        old[index] = file;
        setFiles(old);
    }

<input type=""file"" accept=""image/jpeg,image/jpg"" onChange={e => handleFile(e.target.files[0], files.length)} />
```

I console logged `old` after i set the file to it and i get `[File]  0: File {name:....` so so the array is what i expect but the state wont be set to it, its still an empty array.
react version `""react"": ""^16.13.0"",`
dependencies list
```
""dependencies"": {
    ""@ckeditor/ckeditor5-build-classic"": ""^20.0.0"",
    ""@ckeditor/ckeditor5-react"": ""^2.1.0"",
    ""@testing-library/jest-dom"": ""^4.2.4"",
    ""@testing-library/react"": ""^9.3.2"",
    ""@testing-library/user-event"": ""^7.1.2"",
    ""bootstrap"": ""^4.4.1"",
    ""easy-peasy"": ""^3.3.0"",
    ""font-awesome"": ""^4.7.0"",
    ""install"": ""^0.13.0"",
    ""jquery"": ""^3.5.1"",
    ""mitt"": ""^1.2.0"",
    ""npm"": ""^6.14.6"",
    ""react"": ""^16.13.0"",
    ""react-bootstrap"": ""^1.0.0-beta.17"",
    ""react-dom"": ""^16.13.0"",
    ""react-icons"": ""^3.10.0"",
    ""react-loader-spinner"": ""^3.1.14"",
    ""react-redux"": ""^7.2.0"",
    ""react-router-dom"": ""^5.1.2"",
    ""react-scripts"": ""3.4.0"",
    ""react-slideshow-image"": ""^1.4.2"",
    ""react-social-icons"": ""^4.1.0"",
    ""react-spring"": ""^8.0.27"",
    ""socket.io-client"": ""^2.3.0"",
    ""typescript"": ""^3.8.3""
  },
```"
,,,https://github.com/facebook/react/issues/19629,19629,Bug: Clicking the troubleshooting instructions button on the devtools opens 2 tabs,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,0,2020-08-17T17:28:59Z,2020-08-18T14:17:01Z,2020-08-18T14:17:01Z,NONE,completed,,"<!--
In the react devtools window, clicking the troubleshooting instructions link opens 2 tabs of the troubleshooting page, instead of once
-->

React version: Devtools 4.8.2
Firefox version: 79.0 64-bit

## Steps To Reproduce

1. Go to a non-react page
2. Open the devtools box
3. Click troubleshooting instructions

## The current behavior
Opens 2 tabs of the github page
## The expected behavior
Should open 1 tab of the github page"
,,,https://github.com/facebook/react/issues/19569,19569,Missing Dependency: ReactDOMServer not available via umd,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2020-08-10T09:53:25Z,2020-08-10T10:55:22Z,2020-08-10T10:55:22Z,NONE,completed,,"Due to technical limitations, I'm currently using react in it's UMD form.
As far as I know, `ReactDOMServer` is both for server use and client use.
I tried to find it in `ReactDOM` global, but I was surprised that it is not included OOTB in react-dom 16.

1. Please provide us a way to consume `ReactDOMServer` as umd (either as part of ReactDom or as another distribution)
2. It seems like [you allowed it in the past](https://stackoverflow.com/questions/38666241/does-react-dom-server-work-on-the-client-side/38666691#38666691), so I'm wondering why did you drop support?

React version: 16.9
ReactDOM version: 16.9"
,,,https://github.com/facebook/react/issues/19653,19653,Bug: Child Component State Updates Applied to Last Sibling Instead of Correct One,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2020-08-19T16:20:26Z,2020-08-19T20:16:31Z,2020-08-19T17:00:23Z,NONE,completed,,"I have a grid component that I am writing where a user is supposed to be able to click on a row and have that row transform into edit mode. A row in the grid is itself a component. I accomplish the transformation within the row component using the click event on cells that are editable. Once the click event fires on an editable row, the state of that component changes with the editing flag set to true. However, it is always the last row in the grid that gets re-rendered instead of the row that was clicked.

React version: v16.13.1

## Steps To Reproduce

1. Create a Row component that will render a single row of data (I'm using flex-box, but not sure if this is important)
2. Add a click event and a state hook to the Row component that will tell the row whether it is in highlight mode or not and highlight the row in yellow if it is being edited. Use the click event to toggle between highlight and normal; initialize this state to not-highlighted.
2. Create a Table or Grid component that will map a data array onto a set of Row components.
3. Run the Table component, click on a row, and notice it highlights the last row and not the one you clicked on.

Link to code example:
https://jsfiddle.net/3ursewLh/

## The current behavior
In the Fiddle listed, clicking on a row will highlight the last row and not the one you clicked on.

## The expected behavior
The row you clicked on should be highlighted instead of the last one.
"
,,,https://github.com/facebook/react/issues/19623,19623,Bug: Event Capture does not work in video environment,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,11,2020-08-15T22:58:11Z,2020-08-17T03:04:58Z,2020-08-17T03:04:58Z,NONE,completed,,"This is related to https://github.com/facebook/react/issues/18932.
It seems that the problem still exists.

React version: 17.0.0-rc.0

## Steps To Reproduce

1. Copy https://gist.github.com/JenniferFuBook/c7c9ffd6dbd4e8b4e64afe9e6c66f66c#file-appwithvideo-js and replace App.js in Create React App.
2. Name a video file IMG_2313.mp4, and put it under public directory.
3. npm start

Another example:

1. Copy https://gist.github.com/JenniferFuBook/04b81149af921efc316844e6783dff21#file-appwithyoutube-js and replace App.js in Create React App.
2. npm i react-player
3. npm start

## The current behavior
If you click on the video control, such as play button, the click event is not captured,

## The expected behavior
If you click on the video control, such as play button, the click event should be captured."
,,,https://github.com/facebook/react/issues/19626,19626,"Bug: When I use the StrictMode component, all my components will be rendered twice.","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2020-08-17T02:57:06Z,2020-08-17T03:27:19Z,2020-08-17T03:27:19Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

16.12.0

## Steps To Reproduce

Check the console

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

https://codesandbox.io/s/wizardly-goodall-w2n0z?file=/src/index.js

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior

Repeated rendering of components


## The expected behavior

Components should not be rendered repeatedly
"
,,,https://github.com/facebook/react/issues/19811,19811,Bug: use lodash.isEqual to compare react elemet can cause infinite loop,"[{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,False,,5,2020-09-11T07:06:05Z,2022-08-08T07:52:37Z,2020-09-11T09:22:45Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: v16.13.1

## Steps To Reproduce

1.Use lodash.isEqual to compare two object, some of their key`s value are react element
2.Causing inifite loop in dev
![bug](https://user-images.githubusercontent.com/38848201/92850547-2202e500-f41f-11ea-989e-43e20072c063.png)

Howerver when I use [fast-deep-equal](https://github.com/epoberezkin/fast-deep-equal) React-specific isEqual, it won`t cause this infinite loop.

![Screenshot from 2020-09-11 11-14-37](https://user-images.githubusercontent.com/38848201/92851375-119f3a00-f420-11ea-9d17-423ba6a5d652.png)

Since I find out React would add a `_owner` property on dev, is my problem related to this?
![Screenshot from 2020-09-11 15-02-10](https://user-images.githubusercontent.com/38848201/92879678-d14fb400-f43f-11ea-83f0-abea56b39ca3.png)

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
"
,,,https://github.com/facebook/react/issues/19736,19736,Bug: ,"[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null}]",closed,False,,2,2020-09-01T08:22:06Z,2020-09-01T12:02:43Z,2020-09-01T12:02:30Z,NONE,completed,,"Please fix the side bar toggle on React Documentation it does not work on my non-touch screen PC....i think it should be scroll-able, it works on my touch screen PC 
![reactbug](https://user-images.githubusercontent.com/38891189/91824890-61694e80-ec33-11ea-9c5b-17a21679d0a8.png)

"
,,,https://github.com/facebook/react/issues/19782,19782,Bug: onDragStart make fired onDragEnter onDragLeave with bad closure !,"[{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,False,,1,2020-09-07T04:14:54Z,2020-09-07T06:38:03Z,2020-09-07T06:38:03Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:i tray last and beta
here guys is this a bug ? when `onDragStart` fired, it also fired random `onDragEnter` AND `onDragLeave` scope.
Try drag a elements and look consoleLog the CLOSURE  in the demo plz
Link to code example:
https://codesandbox.io/s/admiring-paper-6mlwe?file=/src/App.js

## The current behavior
onDragEnter should fired once when onDragStart but with the correct `CLOSURE`

## The expected behavior
"
,,,https://github.com/facebook/react/issues/19799,19799,Bug: renderToString renders srcSet instead of srcset,"[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null}]",closed,False,,5,2020-09-09T14:13:30Z,2022-08-18T15:24:38Z,2020-09-09T14:52:31Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.12.0

## Steps To Reproduce

1. Use `renderToString` to render `<source>` element with `srcset` attribute

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://codesandbox.io/s/react-dom-camelcase-bug-1rnxt

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
`srcSet` isn't transformed to `srcset`

## The expected behavior
`srcSet` becomes `srcset`"
,,,https://github.com/facebook/react/issues/19841,19841,Bug: React 17.0.0-rc.1 checkboxes and radio groups sometimes fire onChange incorrectly,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,19,2020-09-16T00:29:08Z,2020-09-19T23:28:56Z,2020-09-18T16:59:37Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 17.0.0-rc.1

## Steps To Reproduce

1. Open https://9sf7d.csb.app/. The issue seems most easily reproducible in iOS Safari, although we were also able to reproduce in Firefox on macOS.
2. Quickly tap or click one checkbox or radio followed by another one.
3. Notice that sometimes the first checkbox is unchecked rather than the second checkbox you tapped on becoming checked. For radios, the first radio stays selected rather than switching to the radio you tapped on.

Link to code example: https://codesandbox.io/s/optimistic-sound-9sf7d?file=/src/App.js

## The current behavior

There appears to be some sort of race condition where tapping or clicking on a controlled `<input type=""checkbox"">` or `<input type=""radio"">` quickly after clicking on a previous input does not fire `onChange` on the correct element.  As far as I can tell, `onChange` is being fired on the second checkbox rather than the first. It appears to be a timing issue - if you wait long enough between taps, the events are fired on the correct elements. This also appears to only reproduce in React 17.0.0-rc.1, not 17.0.0-rc.0 or React 16 (you can verify by changing the versions in Code Sandbox).

## The expected behavior

The `onChange` event should fire on the correct element, and state should update to check or uncheck the checkbox or radio you tapped, not some other element.
"
,,,https://github.com/facebook/react/issues/19866,19866,Bug(17.0.0-rc.1): useEffect cleanup functions not running in the same order as effect functions ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,3,2020-09-19T12:11:43Z,2020-09-21T12:17:10Z,2020-09-21T03:09:02Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 17.0.0-rc.1

## Steps To Reproduce

```jsx
export default function App() {
  const [counter, setCounter] = useState(1);
  return (
    <div className=""App"">
      <h1>{counter}</h1>
      <p>
        <button onClick={() => setCounter((c) => c + 1)}>button</button>
      </p>
      <Foo name=""1"" />
      <Foo name=""2"" />
      {counter % 2 ? <Foo name=""3"" /> : null}
    </div>
  );
}

const Foo = ({ name }) => {
  useEffect(() => {
    console.log(""effect"", name);
    return () => {
      console.log(""cleanup"", name);
    };
  });
  return <p>I am foo</p>;
};
```

Run above code and click the ""button"" button, then check console log.

Link to code example: https://codesandbox.io/s/react17-useeffect-repro-s4hop

## The current behavior

```
effect 1 
effect 2 
effect 3 
cleanup 3 
cleanup 1 
cleanup 2 
effect 1 
effect 2 
```

## The expected behavior

```
effect 1 
effect 2 
effect 3 
cleanup 1 
cleanup 2 
cleanup 3 
effect 1 
effect 2 
```

## Description

[The blog post for React 17 RC](https://reactjs.org/blog/2020/08/10/react-v17-rc.html) says:

> Additionally, React 17 executes the cleanup functions in the same order as the effects, according to their position in the tree. Previously, this order was occasionally different.

However, as shown by the above example, cleanup functions do not run in the same order as effect functions. Seemingly, cleanup functions for unmounting components run before other ones."
,,,https://github.com/facebook/react/issues/19747,19747,Bug: Using opacity as a percentage value in a css file will become 1% in the production build.,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,7,2020-09-02T10:19:05Z,2020-09-03T12:52:37Z,2020-09-03T12:52:37Z,NONE,completed,mruiz42,"Using opacity as a percentage value in a css file will become 1% in the production build version, even though in the localhost website it will appear correctly. The way around this is to use a decimal value (ex. 0.95) for opacity.

React version: 16.13.1

## Steps To Reproduce

1. Set a css class to have a percentage opacity value (ex. 95%)
2. run npm run-scrips build
3. build version will have incorrect percentage (1%)

code example:

.App {
  font-family: sans-serif;
  text-align: center;
  opacity: 50%;
}


## The current behavior
Opacity will change from any percentage value to 1% in app build version.

## The expected behavior
Opacity will stay the same percentage in build version.
"
,,,https://github.com/facebook/react/issues/20131,20131,Bug: Uncaught Error: Unable to find node on an unmounted component in react 17.0.1,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,False,,16,2020-10-29T18:27:03Z,2022-02-08T20:32:12Z,2021-03-24T16:46:33Z,NONE,completed,,"Hi, I used react-sortable-tree package im my react project in component named Tree:

```
import React, { Component } from ""react"";
import axios from ""axios"";
import axios_config from ""./axios_config"";
import ""react-sortable-tree/style.css"";
import SortableTree, {
} from ""react-sortable-tree"";
class Tree extends Component {
  constructor(props) {
    super(props);
    this.state = {
      treeData: [],
    };
  }
  componentDidMount() {
    (async () => {
      axios_config.url = this.props.treeLink;
      axios_config.data = {};

      try {
        let result = await axios(axios_config);
        console.log(""response from server gotttt..."");
        console.log(result);
        if (result.data.done === true) {
          this.setState({
            treeData: result.data.tree,
            selectedNode: result.data.tree[0],
          });
          this.props.disableLoading();
        } else {
          console.log(result.err);
          this.props.disableLoading();
        }
      } catch (err) {
        console.log(err);
      }
    })();
  }
  render() {
    return (
      <SortableTree
        style={{ height: ""300px"" }}
        treeData={this.state.treeData}
        onChange={(treeData) => this.setState({ treeData })}
      />
    );
  }
}
```
when I use Tree component in my code it works pretty well in react 16.13.1, but fails and get this error is react 17.0.1:

`←→1 of 2 errors on the page
Error: Unable to find node on an unmounted component.
▶ 21 stack frames were collapsed.
(anonymous function)
src/components/utility/Tree.js:114
  111 | console.log(result);
  112 | if (result.data.done === true) {
  113 |   //console.log(result.data.tree);
> 114 |   this.setState({
      | ^  115 |     treeData: result.data.tree,
  116 |     selectedNode: result.data.tree[0],
  117 |   });
`
`react-dom.development.js:24281 Uncaught Error: Unable to find node on an unmounted component.
    at findHostInstanceWithWarning (react-dom.development.js:24281)
    at findDOMNode (react-dom.development.js:24804)
    at ScrollingComponent.componentDidMount (index.js:181)
    at commitLifeCycles (react-dom.development.js:20663)
    at commitLayoutEffects (react-dom.development.js:23426)
    at HTMLUnknownElement.callCallback (react-dom.development.js:3945)
    at Object.invokeGuardedCallbackDev (react-dom.development.js:3994)
    at invokeGuardedCallback (react-dom.development.js:4056)
    at commitRootImpl (react-dom.development.js:23151)
    at unstable_runWithPriority (scheduler.development.js:646)
    at runWithPriority$1 (react-dom.development.js:11276)
    at commitRoot (react-dom.development.js:22990)
    at performSyncWorkOnRoot (react-dom.development.js:22329)
    at react-dom.development.js:11327
    at unstable_runWithPriority (scheduler.development.js:646)
    at runWithPriority$1 (react-dom.development.js:11276)
    at flushSyncCallbackQueueImpl (react-dom.development.js:11322)
    at flushSyncCallbackQueue (react-dom.development.js:11309)
    at scheduleUpdateOnFiber (react-dom.development.js:21893)
    at Object.enqueueSetState (react-dom.development.js:12467)
    at Tree.push../node_modules/react/cjs/react.development.js.Component.setState (react.development.js:365)
    at Tree.js:114`"
,,,https://github.com/facebook/react/issues/20113,20113,Transpile JSX to namespace import in automatic runtime,[],closed,False,,2,2020-10-28T03:10:20Z,2020-11-10T03:33:15Z,2020-11-10T00:13:28Z,CONTRIBUTOR,completed,,"As mentioned in the [blog post](https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html), the current automatic JSX runtime transform transpiles the following code:

```js
<div height={10} />
```

To roughly:

```js
import {jsx as _jsx} from 'react/jsx-runtime'

_jsx('div', {height: 10})
```

Unfortunately, the bundling story for this kind of import from a CJS module like `'react/jsx-runtime'` isn't great, because Webpack needs to be conservative about inter-op. Webpack 4 ends up bundling it as something like this:

```js
Object(R.jsx)('div', {height: 10})
```

Webpack 5 does slightly better:

```js
(0, R.jsx)('div', {height: 10})
```

But these are both pretty unfortunate. The `jsx` family of functions never uses `this` so the context escape is unnecessary, but Webpack doesn't know that. This was [raised on Twitter here](https://twitter.com/dan_abramov/status/1306567501799661570).

However, this can actually be fixed by having the JSX transform create a namespace import instead of a named one. In other words, if it instead transpiled the above code to:

```js
import * as _JSXRuntime from 'react/jsx-runtime'

_JSXRuntime.jsx('div', {height: 10})
```

Webpack 4 and 5 will both bundle that code to something like:

```js
R.jsx('div', {height: 10})
```

Which is the desired output. It's smaller and more efficient than either of the alternatives.

(The only improvement from there would be to call `jsx` directly, but that isn't possible until the runtime is available as an ESM module and Webpack can inline and concatenate it. I won't get into that here, although it would be really nice. 🙂)

I know that this change would get made in the Babel repo rather than here, but I wanted to run it by the React team first. @gaearon and @lunaruan, do you see any reason not to make this change?"
,,,https://github.com/facebook/react/issues/20022,20022,Bug: useRef forget '()',"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2020-10-14T14:58:34Z,2020-10-14T17:46:17Z,2020-10-14T17:46:17Z,CONTRIBUTOR,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1.
2.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:
https://codesandbox.io/s/dazzling-heyrovsky-18u9w?file=/src/App.js
<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
correct execution
## The expected behavior
not correct execution

should we do something, such as a warning?To remind us that we forgot about this Brackets"
,,,https://github.com/facebook/react/issues/20054,20054,Bug: Suspense/fallback adds a style display: none !important and this doesn't get removed on IE 11,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,8,2020-10-19T14:30:45Z,2020-10-28T13:39:25Z,2020-10-28T13:39:14Z,NONE,completed,AbGrS,"  Suspense/fallback wraps the components with `display:none !important` initially and somehow this style doesn't get removed automatically even after the components loads into the DOM on IE 11. Works fine on chrome through. If I manually remove this from the dev tool, you can see it shows up.

Seems like this is re-introduced:
https://github.com/facebook/react/issues/14114

React version: 16.12.0

	
`<Suspense fallback={<CircularProgress />}>
			<Provider store={store}>
				<PersistGate loading={<div>Loading...</div>} persistor={persistor}>
					<Main />
				</PersistGate>
			</Provider>
		</Suspense>
`

![image](https://user-images.githubusercontent.com/17119296/96467074-2dc89f00-1248-11eb-8054-567d079a0665.png)


"
,,,https://github.com/facebook/react/issues/19947,19947,Suggested code cleanup: Update all old https://facebook.github.io and https://github.com/facebookincubator/create-react-app links,[],closed,False,,7,2020-10-02T19:52:07Z,2020-10-09T04:47:05Z,2020-10-09T04:46:08Z,CONTRIBUTOR,completed,sktguha,"So I suggest replacing the links to https://facebook.github.io and https://github.com/facebookincubator/create-react-app with the correct updated links. 
Yes I understand that redirects are setup properly, so there is no broken links but still it is much cleaner if they had the updated links. For example seeing the old link, a person might go to https://github.com/facebookincubator to find some other important projects there, but of course the important projects like flow type checker etc, are at https://github.com/facebook instead

I think atleast for some places like Readme(these old links are there in some Readme files) it should definitely be done, if not all places
If so, I **want to volunteer** for this effort. Please assign this issue to me in that case

Here is a search for these two links in the codebase: 
https://github.com/facebook/react/search?q=https%3A%2F%2Fgithub.com%2Ffacebookincubator%2Fcreate-react-app
https://github.com/facebook/react/search?q=%22facebook.github.io%22"
,,,https://github.com/facebook/react/issues/20077,20077,"Error: ""Commit tree already contains fiber 1. This is a bug in React DevTools.""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,2,2020-10-22T06:18:30Z,2021-04-28T20:31:09Z,2020-10-22T21:03:36Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. Upgrade React & reactDom version to 17.0.0
2. Reloading specific page via profiler
3. Click a chart inside flamegraph chart
3. The page is working just fine but the profiler has stopped working

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.9.0-75726fadfd

Call stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19503:17)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19436:26)
    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19957:11)
    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34003:33)
    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12871:7)
    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13521:7)
    at nk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16162:86)
    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15541:11)
    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15533:23)
    at dk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15517:5)

Component stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33986:50)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28048:3)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35614:50)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29061:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29178:32)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32776:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24164:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24653:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29246:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36049:3)"
,,,https://github.com/facebook/react/issues/20047,20047,Clarify SSR expectations/contract,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,17,2020-10-17T10:31:37Z,2022-03-25T23:13:46Z,2022-03-25T23:13:46Z,CONTRIBUTOR,completed,,"I've been asked about the safety of a certain pattern and I'd like to clarify this with you (the React team). 

In my opinion - the actual SSRed output and the hydrating tree **do not have to match**. This is, of course, a weird space of things and one should understand how things work together to even think about it, but there is no technical aspect forbidding this now. Question is - is it safe to assume that such a ""use case"" will stay supported in the future. I believe it is because the only thing that is used as an input to the rehydration is the current HTML structure and the React team doesn't intend to ship any extra metadata in the SSRed output about the actual render tree that was used to render it.

This can be a little bit of a vague question - so let's take a look at an example. Emotion does 2 things on the server differently than on the client:
1. it does not use `React.forwardRef` (refs are useless on the server, so we don't see a need to grow the render tree rather significantly by using it)
2. we render `<style>` elements ""inline"", together with other elements. This is an example SSRed output:
```html
<div id=""react-root"">
  <style data-emotion-css=""bjcoli"">
    .css-bjcoli{color:green;}
  </style>
  <div class=""css-bjcoli"">
    <style data-emotion-css=""ihiui2"">
      .css-ihiui2{color:hotpink;}
    </style>
    <div class=""css-ihiui2"">
    </div>
    <div class=""css-ihiui2"">
    </div>
  </div>
</div>
```

On the client we:
- use `React.forwardRef` as it's important to do so
- we **move** `<style>` elements to the `<head>` **before** rehydration can even be called

This makes the HTML structure **identical** to what React sees during the first render so there is **no SSR mismatch**, even though initially there kinda is one.

We totally understand this is a gray area and trickery - question is: do u plan to make things like this break in the future? I totally would understand the answer being ""we can't guarantee that"", but at the same time it would be great if it would be accompanied by ""probably not, this is _safe_ to do and there are no plans to make this break now""

cc @eps1lon "
,,,https://github.com/facebook/react/issues/20050,20050,Feature Proposal: className can be an array of class names strings,"[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,4,2020-10-18T13:11:21Z,2021-07-06T23:13:40Z,2020-10-19T14:31:43Z,NONE,completed,,"### Description
The current `className` prop on any JSX element takes only a string, that is supposed to be the class name to add to the corresponding element. This prop expects a string which makes it very easy to attach a single class name to the element.

For example: 
```
<div className=""my-css-class-name""></div>
```

### Problem
The limitation I ran into while using className, is when I wanted to attach a couple classes to the same element, I naturally tried to do something like this:
```
<div className={""my-css-class-name"", ""my-other-css-class-name""}></div>
```
But unfortunately it didn't work, [I then realized that it's not possible with the current JSX specification](https://reactjs.org/docs/faq-styling.html#how-do-i-add-css-classes-to-components).

The proposed solution in the FAQ link I shared above suggests manually attaching the strings and add a space, or use another package called [""Classnames""](https://www.npmjs.com/package/classnames#usage-with-reactjs).

### Feature Proposal
I as a react user, expected naturally that I could provide multiple classes with JSX, so I think it can be useful for other developers, if the prop `className` can take an array of strings (classes) and does a simple `Array.join("" "")` in this case. So that developers won't have to join them manually or use the other package ""Classnames"". I believe this could be beneficial for the simple use case, and also for a more advanced use case like mine (using Material UI's `makeStyles`).

I would appreciate your thoughts on this suggestion. Furthermore, if discussion concludes that you agree to adopt such change, I would be more than happy to contribute it, as by chance I was looking at the beginner-friendly issues for contributors a couple days ago and couldn't find something (they're all assigned)."
,,,https://github.com/facebook/react/issues/20354,20354,Bug: ,"[{""id"":40929154,""node_id"":""MDU6TGFiZWw0MDkyOTE1NA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Invalid"",""name"":""Resolution: Invalid"",""color"":""e6e6e6"",""default"":false,""description"":null}]",closed,False,,0,2020-11-29T23:00:22Z,2020-11-30T09:35:10Z,2020-11-30T09:35:03Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1.
2.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
"
,,,https://github.com/facebook/react/issues/20297,20297,Bug: Infinite loop when following the instructions of Exhaustive Deps.,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2020-11-19T12:19:57Z,2020-11-23T01:16:09Z,2020-11-23T01:16:09Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 17.0.1

Link to code example:

```json

        ""react-hooks/exhaustive-deps"": ""warn"",
```

If you write the following code, `Exhaustive Deps` will spit a warning in deps of` useMemo`

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

### Infinite loop code
The infinite loop code has a negative effect on the browser, so I've included only a sample. If you change the hook used from `useNonInfinite` to` useInfinite`, the code will be similar.

```tsx
import {
  useEffect, useMemo, useState,
} from 'react';

const useInfinite = (a: string[]) => {
  const [state, setState] = useState<string[]>([]);
  const b = useMemo(() => a.concat('b'), [a]);
  useEffect(() => {
    setState(b);
  }, [b]);
  return {
    state,
  };
};

export {
  useInfinite,
};
```

### non infinite loop code
https://codesandbox.io/s/kind-water-4lybu?file=/src/App.js

```tsx
import {
  useEffect, useMemo, useState,
} from 'react';

const useNonInfinite = (a: string[]) => {
  const [state, setState] = useState<string[]>([]);
  const b = useMemo(() => a.concat('b'), []);
  useEffect(() => {
    setState(b);
  }, [b]);
  return {
    state,
  };
};

export {
  useNonInfinite,
};
```

If you follow linter's instructions, you will end up in an infinite loop

## The current behavior


## The expected behavior
"
,,,https://github.com/facebook/react/issues/20240,20240,Bug: dispatched action executes reducer during render,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2020-11-12T17:29:33Z,2020-11-12T20:42:51Z,2020-11-12T20:42:51Z,NONE,completed,,"When a child components communicates with a parent, half of the time an update is batched with a rerender, and a warning `Cannot update a component while rendering a different component` is raised.

![image](https://user-images.githubusercontent.com/576586/98971487-44e66e00-2522-11eb-90f0-9d54e828b428.png)

This seems to be very close to the issue #18098. That one is about a harmless consequence of an unexpected render, this one is about a behavior that [will likely start hard failing in future versions of React](https://github.com/facebook/react/issues/18178#issuecomment-592662192)

React version: 16.14.0

## Steps To Reproduce

1. call `[state, setState] = useState()`
2. pass `setState` to a child component
3. call `[state, dispatch] = useReducer(reducer)` in the child
4. call `setState()` in `reducer`
5. trigger `dispatch` in an event handler in the child twice

Link to code example:
[code sandbox](https://codesandbox.io/s/yanovich-scheduleupdateonfiber-cjpuy)

## The current behavior
Half of the time an update is batched with a rerender, and a warning `Cannot update a component (`App`) while rendering a different component (`Table`)` is raised.

## The expected behavior
Update always happens before rerender."
,,,https://github.com/facebook/react/issues/20328,20328,"Bug: react-scripts 4.0.1 : EBUSY: resource busy or locked, open 'C:\...\project\.eslintcache'","[{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,False,,1,2020-11-24T16:18:42Z,2020-11-24T18:45:06Z,2020-11-24T18:44:59Z,NONE,completed,,"React version:

## Steps To Reproduce

1. Upgrade react-scripts from 4.0.0 to 4.0.1 (It works on 4.0.0)
2. yarn start

Link to code example:

Seems happen only on windows due to locking

## The current behavior

![image](https://user-images.githubusercontent.com/4507910/100120709-907d0e00-2e78-11eb-92e6-bd94c89acfd5.png)

## The expected behavior

No lock error :)

Thanks,"
,,,https://github.com/facebook/react/issues/20334,20334,Bug: Strange lines in the page,"[{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,False,,1,2020-11-27T02:56:35Z,2020-11-27T09:48:39Z,2020-11-27T09:48:28Z,NONE,completed,,"When chrome devtools is opened, some strange lines appear in the page and disappear after disable&enable the react extension.
I'm wondering if there are some bugs on react extension.
Win10x64 Chrome 87.0.4280.66
[Chrome issue 83155766](https://support.google.com/chrome/thread/83155766)
![img](https://storage.googleapis.com/support-forums-api/attachment/thread-83155766-2167922176753088865.jpg)"
,,,https://github.com/facebook/react/issues/20231,20231,"Bug: After quoting ""react-file-viewer"": ""^1.2.1"" plug-in, the project packaging is particularly slow, how to effectively speed up","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2020-11-12T07:10:18Z,2020-11-12T09:06:39Z,2020-11-12T08:54:40Z,NONE,completed,,"<!--
  After quoting ""react-file-viewer"": ""^1.2.1"" plug-in, the project packaging is particularly slow,It takes about an hour to pack
-->

React version:16.13.1

## Steps To Reproduce

1.npm run build



## The current behavior


## The expected behavior
"
,,,https://github.com/facebook/react/issues/20230,20230,Bug: react-hook: value of useState doesn't change when use with useContext and render props,"[{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,False,,2,2020-11-12T06:35:28Z,2020-11-12T15:47:19Z,2020-11-12T08:49:57Z,NONE,completed,,"value of useState doesn't change in inner function that pass to props of render props component but change in DOM and normal call. (it is working fine with class component)

React version: 17.0.0

## Steps To Reproduce

context.js

```js
import { createContext } from ""react"";

export const Context = createContext({ showModal: (func) => {} });
```

FunctionalChild.js

```js
import React, { useCallback, useContext, useEffect, useState } from ""react"";
import { Context } from ""../context"";

export function FunctionalChild() {
  const { showModal } = useContext(Context);
  const [count, setCount] = useState(0);

  const increaseCount = useCallback(
    function () {
      console.log(""functional child"", count);
      setCount((c) => c + 1);
    },
    [count]
  );

  useEffect(() => {
    showModal(() => {
      return <button onClick={increaseCount}>+</button>;
    });
  }, [increaseCount, showModal]);
  return <div>current count{count}</div>;
}

```

Parent.js

```js
import React, { useState } from ""react"";
import { Context } from ""../context"";
import { FunctionalChild } from ""./FunctionalChild"";

let modalComponent;

export default function ParentComponent() {
  const [visible, setVisible] = useState(false);

  function close() {
    setVisible(false);
  }

  function showModal(func) {
    modalComponent = func(close);
    setVisible(true);
  }

  return (
    <Context.Provider value={{ showModal }}>
      <FunctionalChild />
      {visible && <div className=""modal"">{modalComponent}</div>}
    </Context.Provider>
  );
}
```

as above codes the value of `count` in `increaseCount` function is always showing initial value `0` and doesn't change at all. but got updated value at `console.log(""count:"", count)` normal call and it's also got updated value in DOM.

Link to code example: https://codesandbox.io/s/usestate-hook-odw3e  
you can check the behavior of both class and functional component in this link

## The current behavior

value of useState doesn't get update value in function that pass to render props component

## The expected behavior

to get the correct updated value of useState in function that pass to render props component
"
,,,https://github.com/facebook/react/issues/20173,20173,"Error: ""Cannot read property 'length' of undefined""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null},{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,False,,0,2020-11-06T04:25:53Z,2021-03-31T20:41:12Z,2021-03-31T20:41:12Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. Using the profiler I get this error. Can't figure out what to do. Tried clearing my browser data. 
---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.9.0-75726fadfd

Call stack: at getChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19767:32)
    at ProfilingCache_ProfilingCache.getFlamegraphChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19992:11)
    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34007:32)
    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12871:7)
    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13521:7)
    at nk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16162:86)
    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15541:11)
    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15533:23)
    at dk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15517:5)
    at Xj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15129:105)

Component stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33986:50)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28048:3)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35614:50)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29061:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29178:32)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32776:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24164:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24653:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29246:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36049:3)"
,,,https://github.com/facebook/react/issues/20294,20294,"Bug: function in useState hook, setting different value ","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,1,2020-11-19T02:00:47Z,2021-04-13T15:45:51Z,2021-04-13T15:45:51Z,NONE,completed,," useState hook telling me one value then setting another, understand its recommended to use useReducer when working with data structures but i still dont understand why this is happening, this is code block
```
const onAdd = (id, amount = 1) => {
   setItems(old => {
      const idx = old.findIndex(i => i.product_id === id)
      console.log(old[idx].value, amount)
      old[idx].value += amount;
      console.log(""after"", old[idx].value)
      return [...old]
   })
```
value starts at 0, the console logs are as follows

<img width=""461"" alt=""log"" src=""https://user-images.githubusercontent.com/50396417/99610540-24f50400-2a66-11eb-82eb-0c5f3637a825.png"">

the state ""adds"" double what ever the amount is, for the case above, 2, the console logs only run once so the function isnt running twice and it also works fine the non-useEffect safe way below

```
const old = [...items]
const idx = old.findIndex(i => i.product_id === id)
old[idx].value += amount;
setItems(old)
```

React version: react-dom@17.0.1

"
,,,https://github.com/facebook/react/issues/20408,20408,Bug: eslint-plugin-react-hooks does not catch early returns in anonymous default exports,"[{""id"":1249821345,""node_id"":""MDU6TGFiZWwxMjQ5ODIxMzQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules"",""name"":""Component: ESLint Rules"",""color"":""f7afdb"",""default"":false,""description"":""""},{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,False,,3,2020-12-08T21:40:37Z,2020-12-23T10:52:38Z,2020-12-23T10:38:43Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:
17.0.1

## Steps To Reproduce
1.
```jsx
import { useEffect } from 'react'

export default () => {
  if (true) return false

  useEffect(() => {})

  return false
}
```

2. run the linter



<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->



<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
No errors

## The expected behavior
error  React Hook ""useEffect"" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?

failing test-suite case
```
{
  code: `
    export default () => {
      if (cond) {
        useConditionalHook();
      }
    }
  `,
  errors: [conditionalError('useConditionalHook')],
},
```
"
,,,https://github.com/facebook/react/issues/20461,20461,Bug: Module not found: Can't resolve 'react-transition-group' in 'C:file/path,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,0,2020-12-14T19:37:00Z,2020-12-14T19:37:12Z,2020-12-14T19:37:12Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1.
2.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
"
,,,https://github.com/facebook/react/issues/20413,20413,Mistake,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2020-12-09T10:21:30Z,2020-12-09T10:32:59Z,2020-12-09T10:32:59Z,NONE,completed,,"If I write useEffect() without passing the callback as a parameter, the plugin crashes with an error TypeError: Cannot read property 'type' of undefined

React version: 16.12.0

## Steps To Reproduce

1. Create a functional React component
2. Add useEffect() without params

Еhe error occurs here: eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:1734:24

` switch (callback.type) {
        case 'FunctionExpression':
        case 'ArrowFunctionExpression':
          visitFunctionWithDependencies(callback, declaredDependenciesNode, reactiveHook, reactiveHookName, isEffect);
          return;
        // Handled`
I think its needs checking if callback is set 

## The current behavior 
The plugin crashed with TypeError: Cannot read property 'type' of undefined

## The expected behavior
The plugin not crashed and reports that the callback is required 
"
,,,https://github.com/facebook/react/issues/20361,20361,"Error: ""getCommitTree(): Unable to reconstruct tree for root ""1"" and commit 12""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,2,2020-12-01T13:16:05Z,2021-04-28T14:35:30Z,2020-12-01T22:30:44Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.10.0-11a2ae3a0d

Call stack: at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:9)
    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20104:11)
    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34150:33)
    at Fh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12806:7)
    at ni (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13448:7)
    at jk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16065:86)
    at ik (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15450:11)
    at hk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15442:23)
    at Zj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15426:5)
    at Tj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15038:105)

Component stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34133:50)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28195:3)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35761:50)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29208:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29325:32)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32923:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24311:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24800:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29393:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36196:3)"
,,,https://github.com/facebook/react/issues/20450,20450,Bug: Trailing Comma in Arrays and Dict,"[{""id"":40929156,""node_id"":""MDU6TGFiZWw0MDkyOTE1Ng=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Wontfix"",""name"":""Resolution: Wontfix"",""color"":""ffffff"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2020-12-13T02:33:56Z,2020-12-14T14:24:33Z,2020-12-14T14:24:20Z,NONE,completed,,"The learn react tic tac toe game tutorial shows a trailing comma at the end of dictionary values. This is known to cause issues with Internet Explorer. Hoping you can change that.

https://stackoverflow.com/questions/5139205/javascript-can-a-comma-occur-after-the-last-set-of-values-in-an-array

React version:  LTS

## Steps To Reproduce

1. Run tic tac toe tutorial code

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
Internet Explorer throws weird errors

## The expected behavior
Internet Explorer loads the tic toe game without any ussyes"
,,,https://github.com/facebook/react/issues/20452,20452,Bug: document 'keydown' event listener prevents input's onChange handler from firing,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,0,2020-12-13T12:40:43Z,2020-12-13T12:47:55Z,2020-12-13T12:47:55Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

An Input (type='text') component's onChange handler will not fire if the document has a keydown event with event.preventDefault()

React version:

## Steps To Reproduce

1. Render an <input type='text' onChange={handler}></input> with an onChange handler
2. Add a 'keydown' event to the document with event.preventDefault().
3. Attempt to type in input textbox

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://codesandbox.io/s/busy-newton-fr9rx?fontsize=14&hidenavigation=1&theme=dark

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
User cannot type in input textbox because the onChange handler is never called

## The expected behavior
Both the onChange handler and keydown event should fire"
,,,https://github.com/facebook/react/issues/20585,20585,Bug: useImperativeHandle return undefined of ref.current property,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2021-01-14T03:22:14Z,2021-01-14T14:56:46Z,2021-01-14T14:56:46Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: last

## Steps To Reproduce

1. Mouse enter to the text
2. check console log

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://codesandbox.io/s/exciting-platform-f7prw?fontsize=14&hidenavigation=1&theme=dark

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
get an `undefined` in sometimes

## The expected behavior
aways get `roo`"
,,,https://github.com/facebook/react/issues/20634,20634,"Error: ""Commit tree already contains fiber 1. This is a bug in React DevTools.""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,2,2021-01-21T04:46:23Z,2021-04-28T20:30:17Z,2021-01-21T13:50:32Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.10.1-f160547f47

Call stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19661:17)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)
    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)
    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)
    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)
    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)
    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)
    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)
    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)
    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)

Component stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)"
,,,https://github.com/facebook/react/issues/20629,20629,Bug: React not giving error on calling the component on its render.,"[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2021-01-20T17:01:32Z,2021-01-20T17:32:02Z,2021-01-20T17:31:47Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.9.53

## Steps To Reproduce

1. Create a simple react app with create-react-app with typescript


<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

<!-- Link to code example: (The issue can be replicated fairly easily) -->

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

Only changed App.tsx:
```js
const App = () => {
  return (
    <>
      <h1>Hello World</h1>
      <App />
    </>
  );
};


export default App
```

## The current behavior
The page just keeps loading

## The expected behavior
Some kind of error for calling a component inside itself infinitely."
,,,https://github.com/facebook/react/issues/20559,20559,Bug: url misspelled as uri when adding background image,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,3,2021-01-07T20:31:04Z,2021-01-08T18:36:24Z,2021-01-08T18:36:24Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:
17.0.1
## Steps To Reproduce

1. Add an empty url in the background-image tag in css
2. The url will not be fetched and it will say ""Unable to find *uri*""

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->
.chatBody{
    background-image: url("""");
}
## The current behavior
Error: Unable to find URI

## The expected behavior
Error: Unable to find URL


PS: I would love to rectify the issue as I found it :)
"
,,,https://github.com/facebook/react/issues/20590,20590,"Bug: react-test-renderer provides no equivalent to attachTo option of Enzyme, mandatory to snapshot Leaflet and other","[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null}]",closed,False,,1,2021-01-14T15:47:26Z,2021-01-15T10:35:54Z,2021-01-15T10:35:34Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.13.1

## Steps To Reproduce

1. In a project with React, and react-leaflet@2.7.0
2.
```ts
import React from ""react"";
import Renderer from ""react-test-renderer"";
import { Map, TileLayer } from ""react-leaflet"";

let component = Renderer.create(
    <Map>
      <TileLayer
        attribution='&copy; <a href=""http://osm.org/copyright"">OpenStreetMap</a> contributors'
        url=""https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png""
      />
    </Map>
  );
```

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://codesandbox.io/s/react-test-renderer-leaflet-mohzp
<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior

It raise an error `Map container not found.`

## The expected behavior

Enzyme's `attachTo` option allow to mount the comment in a more realistic environment, which fixes this bug. But there is no equivalent feature in `react-test-renderer` as far as I know.

See https://github.com/PaulLeCam/react-leaflet/issues/246 for more info about the Enzyme fix for this issue.

It should render the map as expected."
,,,https://github.com/facebook/react/issues/20540,20540,Bug: TypeScript JSX does not properly detect props when using type union in component props definition,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2021-01-03T21:00:05Z,2021-01-07T18:01:27Z,2021-01-07T18:01:27Z,NONE,completed,,"React version: 16.13.1
Typescript version: 4.1.2

## Steps To Reproduce

See the code examples bellow

1. Create a component that compiles its props based on the props of a child
2. Pass a child with a primitive type and a callback type prop
3. Observe that the primitive type is inferred correctly but the callback prop is not

The motivation for this was to create a `Wrapper` component that inherits all the props from a given child component

Type detected successfully             |  Typescript complains about no implicit any
:-------------------------:|:-------------------------:
<img width=""414"" alt=""Screen Shot 2021-01-03 at 12 48 27 PM"" src=""https://user-images.githubusercontent.com/544097/103488522-15394100-4dc2-11eb-991a-d0ef8dd418f9.png"">  |  <img width=""524"" alt=""Screen Shot 2021-01-03 at 12 51 50 PM"" src=""https://user-images.githubusercontent.com/544097/103488559-7eb94f80-4dc2-11eb-8d0a-8e67d9bd1e73.png"">

**Link to code example:**
- [TypeScript issue example][1] Line 19 is the problem, the `callback` property gets the correct type if you hover over the JSX prop name, but TS complains that `val` is implicit any

- [An equivalent plain TS example without react][2] I did my best to reproduce the behavior in pure typescript to make sure this is specifically a react problem and not a TS problem. 

## The current behavior
Inferred callback props cause TS errors 

## The expected behavior
TS gets the correct type and 

[1]: https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcA5FDvmQNwCwAUIzAJ5hZwDqUyY7UABWJhUAHgAqAPjgBeOAG84uABbAANgBMAXHHEAaOAHcefLFADCAIQD8OgBTHe-AGrI1OgEYQIanADsASllpZD8WOABfeiYGXDU0dG4nMwk4LAAPGCw-DXRsPBgAOnMSSD9smHE2LFFQlklpRjhmtMzs3MwqIpLwCHK-GFEmlpGk00FhMSk4ADI4AHkQYEH8-GLSvoqhCBEJSQMyFXUNSj8ySWHm6XkIxkZcPtR4cWUsc1VNHVWigDFzUUUADc3ABXLA6PwgkAeMxwAA+cC8Pn8BlwbjUHjwAGt7MD3HAnlBgH4AOZBGQhMKRaRyOzk6SQtRqaKMAD0rM6YHiuGJJLgMFeCyWg0KoukfTgamJHAA7EZlso4ABlGDIGDAXDvY7bETypkofAg9HhQzQLFwAjSgweEHwDRYAg4eACjhgEFQSCoLDMarK1XqzUfDQ69ByRbLUTfda9fowEOiVjsCAEXSvLWafbkI6aU7nFkMURjfhwdn81ToMDCMxqcL2rL4dAAAzxYMbiNtSlK8WJ6GQXg7jbRTMxuCxjbZHMLJn4CeqydTbyD0lLAuA6FNUCx6Et5Qt0BQ+pei+OcErO1QlyUQZk8iP6Y0twYIxbWBvAEYAEwAZkfIyHGOxG88WCOBPx-EsOSPflfXnQd0RHMc4DXTsoEofAazgOssHwLANCQlMWAgEE4GUCBAVhMjYRdOA-GQEAsGtDtxCVTtwG7Px0AFNU4GbNw22UNAkLYjVlhQMIDCwci-DLCASRBRVljIdAsJwjRL0ccYrBvDSXDcEDGTUR9WUkIA

[2]: https://www.typescriptlang.org/play?#code/MYGwhgzhAEDCD2BbADvAdgUzQFwDwAUAneZCAPmgG8BYAKGgemWNIC5oiSIBuOx6YOgjZCAV2DZ4hABTMu7TqQCUVaNgAWASwgA6OaWgBeJix7QAvnUu06oSDADqhMMmQZCuACrQMAD2xYACYwCCjoWHhgaACeZBR+AWjBcEiomDi4lAJaIIHs3ubQAGTQAJJoAGbuihBecVR8jIJowmISUrKm7E4ubh6eZADaAOT6EMMAuko09PyMEKJ9nVxKvLMM1ta24FBwOYE+-kEhqeEZWQBuYCCiGOxooogARu7QAD7QT-DwIBhRADQCa4gJ5gYAAa3Y0iuIHYrU0aAA5ipDBQotELBRKOY1nRsNE3GVKtVTF5DolkqE0hFcOj6sZvAljikwuk8AiqoQOKYKAB+blcaD3DAXdy42jNYQCACMRmgmAA7ntNLlpJdrrd2NKAEwAZkBwGBoIh7BhRgo0oADJaLKtbEJsNAFbLjIroD1XO41dkVXkZYCYZroDr9UCQCCwZDoGbUdBtdbbdwgA"
,,,https://github.com/facebook/react/issues/20532,20532,Bug: No transition when reordering nodes with keys,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,4,2021-01-02T15:15:28Z,2021-01-03T21:14:50Z,2021-01-03T21:14:50Z,NONE,completed,,"The following component should display a DOM node that transitions from left to right. This is because there is a JSX element with a key prop and a transition property. However, it does not transition from left to right.

```import React from 'react';
import ReactDOM from 'react-dom';
import { useEffect, useState } from 'react';

function App() {
  const [state, setState] = useState(false)
  useEffect(() => {
    setInterval(() => {
      setState(st => !st)
    }, 1000)
  }, [])

  let e1 = <span
    key=""foo""
    style={{
      left: state ? `100px` : `200px`,
      position: ""absolute"",
      transition: ""left 1s""
    }}>WHAT</span>

  let e2 = <span key=""bar"">HEY</span>

  return state ? [e1, e2] : [e2, e1]
}


ReactDOM.render(<App />, document.getElementById('root'));
```



React version:

17.0.1

## Steps To Reproduce

1. Create a new project with create-react-app
2. Replace the index.js file with the code I provided
3. Use npm start to run


Link to code example:

https://codesandbox.io/s/ecstatic-sky-h6qm5

## The current behavior

The user does not see the span transition from left to right. 

## The expected behavior

A smooth transition from left to right
"
,,,https://github.com/facebook/react/issues/20842,20842,Bug: ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,0,2021-02-18T17:42:25Z,2021-02-18T18:25:20Z,2021-02-18T18:24:17Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1.
2.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
"
,,,https://github.com/facebook/react/issues/20841,20841,Mixin rewrite with React and Higher-order-functions,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,False,,1,2021-02-18T16:23:13Z,2021-02-18T18:24:44Z,2021-02-18T18:24:37Z,NONE,completed,,"@gaearon How would you re-write the following mixins?

https://github.com/gerobit/ivis-core/blob/a51154c8937d4d392f20303caeb8b450ecf9189a/client/src/lib/decorator-
helpers.js"
,,,https://github.com/facebook/react/issues/20797,20797,Bug: react deverloper tools: component state read only,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,3,2021-02-10T23:19:50Z,2021-02-16T18:23:32Z,2021-02-16T18:23:32Z,NONE,completed,,"React version:
react: 17.0.1
react-scripts: 4.0.1.
react developer tools: 4.10.1
chrome: 88.0.4324.150

## Steps To Reproduce

1. create create-react-app
2. build the app `yarn build`
3. Host the app somewhere
4. Open the app with react-developer-tools
5. Try to update the state of components



## The current behavior
State is grayed out and read only.

## The expected behavior
Able to upate the state."
,,,https://github.com/facebook/react/issues/20851,20851,Bug: It seems that the default value in functional React component gets updated after render.,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,3,2021-02-20T01:05:40Z,2022-03-30T18:11:56Z,2021-02-20T22:51:19Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

It seems that the default value in functional React component gets updated after render.

React version: 17.0.1

## Steps To Reproduce

I created a question on StackOverflow: https://stackoverflow.com/questions/66286856/why-default-value-in-functional-react-component-gets-updated-after-render, but also repeat it here:


```
const MyComponent = () => {

  // Initialise data with a random value:
  const [data, setData] = React.useState(
    () => {
      const data = _.sampleSize(_.range(5), 3)
      // Print data on initialisation:
      console.log('init data in default:', data)
      return data
    }
  )

  React.useEffect(() => {
    // Print data after the component is rendered:
    console.log('init data after render:', data)
  })

  return (
    <div>{data}</div>
  );
};
```

The output in console is:

```
[Log] init data in default: – [0, 3, 1] (3)
[Log] init data after render: – [2, 1, 3] (3)
```

My understanding is that before the component is rendered, the function under `useState` is called. The value returned by the function is assigned to `data`, and the `data` values is used to render the component on the screen. The function under `useState` is called only once and we never call `setData`, so the value should be the same. Maybe I miss something?

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

https://codesandbox.io/s/jovial-glade-9jm75?file=/src/App.js

## The current behavior

The output in console before and after render is different.

## The expected behavior

The output in console before and after render should be the same."
,,,https://github.com/facebook/react/issues/20835,20835,Bug: useRef acting weird in Strict mode.,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,False,,5,2021-02-17T19:42:33Z,2022-03-30T17:41:41Z,2021-02-17T21:37:47Z,CONTRIBUTOR,completed,,"React version: latest (tested with 16 and 17 both)

## Steps To Reproduce

Please see attached videos for reference and code sandbox for the live experiment

1.  Set component in StrictMode but wrapping it in `<React.StrictMode>`
2. Have a useRef in that component that takes an empty array as input.
3. Try mutating it on every render, maybe something like `refVar.current.push(""doesn't really matter what goes in here"")`
4. use that array (have made a simple list from that, but should apply to all cases)
5. array is being mutated from a different universe (to me it seems that only 😅 ).

Link to code example:
https://codesandbox.io/s/strict-bug-mrv-w7r11

## The current behavior
There are 2 `console.log` to show the value of the array before and after array mutation.
In strict mode when clicked provided button array gets an extra element, same as pushed valued. (Please see attachment one)

## The expected behavior
I believe this should be the same as when not in not strict mode.


Apart from this I also have tried using the debugger to see what actually is happening. When added breakpoint to `list.current.push()` it seems dev tools is stopping on that line twice. What even more confusing to me is, if in case function ran(rendered) twice, how come there is console only once, please attached video (attachment two ) for the same.

Attachments:
 1. https://user-images.githubusercontent.com/20264337/108258484-12ce5300-7186-11eb-8bb2-6e82a14ac856.mov
 2. https://user-images.githubusercontent.com/20264337/108256943-1fea4280-7184-11eb-9840-2dfc243eb6ae.mov
"
,,,https://github.com/facebook/react/issues/20769,20769,"Error: ""can't access property ""isCollapsed"", child is undefined""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,2,2021-02-09T17:20:35Z,2021-02-16T18:23:54Z,2021-02-16T18:23:53Z,NONE,completed,jarod-a-smith,"Describe what you were doing when the bug occurred:
1. On initializing dev tools for react components


---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.10.1-f160547f47

Component stack: List@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:22629:30
div
AutoSizer@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:3003:19
div
div
Tree_Tree@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:28429:47
div
div
InspectedElementContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:28920:43
OwnersListContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:27557:37
SettingsModalContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:28205:40
Components_Components@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:33383:52
ErrorBoundary_ErrorBoundary@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:29219:5
PortaledContent@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:29336:27
div
div
ProfilerContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:32933:35
TreeContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:24321:31
SettingsContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:24810:35
ModalDialogContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:29403:38
DevTools_DevTools@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:36206:27"
,,,https://github.com/facebook/react/issues/21055,21055,Bug: Lazy loading a component throws Unchaught undefined,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,10,2021-03-22T23:15:57Z,2021-07-06T12:17:50Z,2021-03-24T19:40:23Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 17.0.2

## Steps To Reproduce

1. Upgrade from React 16 to React 17 (react and react-dom both to 17.0.2)
2. Do not touch the source code besides upgrading react versions

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->


<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior

Receiving `Unchaught undefined` when trying to render a lazy-loaded component inside `<Suspense />`

## The expected behavior

The code works as it was on version 16.
"
,,,https://github.com/facebook/react/issues/20990,20990,Bug: performing input.select() in IE11 throws a React error,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":69105383,""node_id"":""MDU6TGFiZWw2OTEwNTM4Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Browser:%20IE"",""name"":""Browser: IE"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,4,2021-03-12T17:51:22Z,2022-03-29T23:06:17Z,2022-03-29T23:06:16Z,NONE,completed,,"The example below is extracted from the app with a spreadsheet-like UI, where cells become editable upon focus (can be achieved either by tabbing into the cells or clicking). The text in such cell immediately becomes selected.

The bug occurs only in IE11, as the user navigates from one such cell to another by clicking.
Likely related to https://github.com/facebook/react/pull/19664.

React version: 17.0.1

## Steps To Reproduce

1. Clone https://github.com/Dremora/react-i11-input-focus-bug
2. Install dependencies (`yarn`) and start the app (`yarn start`)
3. Open http://localhost:3000 in IE11
4. Click on the text saying `hello`
5. Click on the text saying `world`

Link to code example: https://github.com/Dremora/react-i11-input-focus-bug/blob/master/src/App.js

## The current behavior
`Unspecified error` gets logged to the console, followed a few other errors, one of them being `Should not already be working` error. As this is a React internals error, application stops working. Nothing gets thrown in the user-land code.

## The expected behavior
`world` text gets selected."
,,,https://github.com/facebook/react/issues/21026,21026,"Bug: DevTools built-in hook number badges are broken for ""light"" theme","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,0,2021-03-18T00:32:29Z,2021-03-19T13:52:59Z,2021-03-19T13:52:59Z,COLLABORATOR,completed,bvaughn,"I mostly use the ""dark"" theme which these badges looked good in. The ""light"" theme is broken though. No contrast."
,,,https://github.com/facebook/react/issues/20969,20969,Bug: Create-react-app error using bash and tried powershell and more,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,False,,3,2021-03-10T03:38:46Z,2021-03-11T07:47:27Z,2021-03-10T13:29:41Z,NONE,completed,,"  
I decided to try and learn react and was following the instructions listed here https://reactjs.org/docs/create-a-new-react-app.html. So I made a folder opened it in vscode, went into my bash terminal and ran the below code as instructed. 

npx create-react-app my-app // But i used demo 

once completed then cd'ed into my demo folder
cd my-app

and then typed npm start and this is where I get this bug
npm start

error: 

```
PersonalInfo@DESKTOP-C0M5IPI MINGW64 /f/1.Web Development/Tutorials&Courses/Devslopes/learn-react/demo-app (master)
$ npm start

> demo-app@0.1.0 start
> react-scripts start

'Courses\Devslopes\learn-react\demo-app\node_modules\.bin\' is not recognized as an internal or external command,
operable program or batch file.
internal/modules/cjs/loader.js:883
  throw err;
  ^

Error: Cannot find module 'F:\1.Web Development\react-scripts\bin\react-scripts.js'
    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:880:15)
    at Function.Module._load (internal/modules/cjs/loader.js:725:27)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)
    at internal/main/run_main_module.js:17:47 {
  code: 'MODULE_NOT_FOUND',
  requireStack: []
}
```

Now I tried, running npm install and then npm start and still same error. I have tried different folder names and locations ect, i'm starting to think this is a bug with bash because prior to me wanting to learn react was working with node and express and databases(mongodb) all day today.

I have node.js installed globally and i'm sure the npx create-react-app installs node locally to the folder. I'm at a loss here, even went inside discord and asked for help in various channels and people also don't know whats going on here. 

Upon further inspection it seems that inside the error its for some reason trying to locate the node module from this directory which is weird F:\1.Web Development\react-scripts\bin\react-scripts.js because when I ran npx create-react-app demo in this directory /f/1.Web Development/Tutorials&Courses/Devslopes/learn-react/ and then cd into demo. and ran npm start and this gives me the above error. 

React version: what ever version get loaded with npx create-react-app 

## Steps To Reproduce

I just created a main folder inside my other folders called learn-react opened that in visual code and then followed the guide for npx create-react-app demo and then followed the next instructions once i got to the npm start or npm run start tried both commands and it results is said error. 

I tried switching terminal and used default powershell in vscode and still same error. I'm not sure what happened cause like i said above was using npm to install packages all day today and then when i wanted to learn react this is happening to me...

Link to code example:

google drive video: https://drive.google.com/file/d/1bYmT--iQ49ymJ2co0S6YGxBksmVXvCbL/view?usp=sharing

"
,,,https://github.com/facebook/react/issues/21070,21070,asdf,"[{""id"":2392325672,""node_id"":""MDU6TGFiZWwyMzkyMzI1Njcy"",""url"":""https://api.github.com/repos/facebook/react/labels/invalid"",""name"":""invalid"",""color"":""ffefc4"",""default"":true,""description"":""""}]",closed,False,,0,2021-03-24T10:44:57Z,2021-03-24T10:55:31Z,2021-03-24T10:54:09Z,NONE,completed,,
,,,https://github.com/facebook/react/issues/21036,21036,React App Show me this Error,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,3,2021-03-19T15:41:25Z,2021-03-20T03:20:38Z,2021-03-20T03:20:38Z,NONE,completed,sureshjangid,"
![Screenshot (234)](https://user-images.githubusercontent.com/75411144/111806067-9bf8b700-88f7-11eb-8c82-cf96ba48aea4.png)
![Screenshot (233)](https://user-images.githubusercontent.com/75411144/111806017-90a58b80-88f7-11eb-8931-6ac4c0da7221.png)
![Screenshot (235)](https://user-images.githubusercontent.com/75411144/111806390-ed08ab00-88f7-11eb-81bf-69536ba1df64.png)
"
,,,https://github.com/facebook/react/issues/21140,21140,"Error: ""Commit tree does not contain fiber 74. This is a bug in React DevTools.""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,1,2021-03-30T17:21:18Z,2021-03-30T18:29:34Z,2021-03-30T18:29:25Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. I am trying to record using profiler on my react app
2. when , I stop recording .This bug appears
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.10.1-f160547f47

Call stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19729:21)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19574:26)
    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)
    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)
    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)
    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)
    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)
    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)
    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)
    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)

Component stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)"
,,,https://github.com/facebook/react/issues/20988,20988,Bug: React appends element twice when using `document.doby.appendChild()`,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,False,,1,2021-03-12T05:49:52Z,2021-03-12T08:33:32Z,2021-03-12T08:33:26Z,NONE,completed,,"React appends element twice when using `document.doby.appendChild()`

React version: 17.0.1

## Steps To Reproduce

1. Create a sample app with nix with the following code:
    ```
    npx create-react-app test 
    ```
2. Add a child element to the document with  `document.doby.appendChild()` like demonstrated in the code example below.
3. Now save and run the app with code:
    ```
    npm start
    ```
4. Now you gonna see 2 divs  called `Hello` with a 'Hello Test' innerHtml In the Elements tag of your Chrome DevTools
![Screen Shot 2021-03-12 at 13 49 21](https://user-images.githubusercontent.com/17794470/110898229-cc5db580-8339-11eb-9bf8-bcd5fcade783.png)


## Code example:
``` 
    import React, {Component} from 'react';
    import logo from './logo.svg';
    import './App.css';
    
    class App extends Component {
    
        constructor(props) {
            super(props);
    
            let link = document.createElement(""div"");
            link.className = ""Hello"";
            link.innerHTML = ""Hello Test"";
            document.body.appendChild(link);
        }
    
    
        render() {
            return (
                <div className=""App"">
                    <header className=""App-header"">
                        <img src={logo} className=""App-logo"" alt=""logo""/>
                        <p>
                            Edit <code>src/App.js</code> and save to reload.
                        </p>
                        <a
                            className=""App-link""
                            href=""https://reactjs.org""
                            target=""_blank""
                            rel=""noopener noreferrer""
                        >
                            Learn React
                        </a>
                    </header>
                </div>
            );
        }
    }
    
    export default App;

 ```

## The current behavior
Tow `<div class=""Hello"">Hello Test</div>`s in the HTML

## The expected behavior
Only one `<div class=""Hello"">Hello Test</div>` in the HTML
"
,,,https://github.com/facebook/react/issues/21396,21396,"Error: ""Commit tree does not contain fiber ""2456"". This is a bug in React DevTools.""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,1,2021-04-30T09:30:48Z,2021-04-30T14:04:20Z,2021-04-30T14:03:54Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.12.3-8f202a7c8d

Call stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20851:21)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20716:26)
    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:21270:11)
    at CommitRankedAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:38661:33)
    at Rh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13416:7)
    at Ci (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14117:7)
    at vk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16901:86)
    at uk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16421:11)
    at rk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16413:23)
    at jk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16397:5)

Component stack: at CommitRankedAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:38644:34)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29447:3)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40191:34)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33093:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33173:5)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37212:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25675:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26289:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33316:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40587:3)"
,,,https://github.com/facebook/react/issues/21321,21321,"Error: ""can't access property ""isCollapsed"", child is undefined""","[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,3,2021-04-20T15:00:05Z,2021-05-03T13:52:55Z,2021-05-03T13:52:55Z,NONE,completed,Jurrevandenberg,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.12.3-8f202a7c8d

Component stack: List@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:23907:30
div
AutoSizer@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:3140:19
div
div
Tree_Tree@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:29857:47
div
div
OwnersListContextController@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:29005:37
SettingsModalContextController@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:29446:40
Components_Components@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:37593:52
ErrorBoundary_ErrorBoundary@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:33093:5
PortaledContent@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:33172:34
div
div
ProfilerContextController@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:37211:35
TreeContextController@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:25674:31
SettingsContextController@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:26288:35
ModalDialogContextController@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:33315:38
DevTools_DevTools@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:40586:27"
,,,https://github.com/facebook/react/issues/21258,21258,"Error: ""Cannot read property 'isCollapsed' of undefined""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,4,2021-04-14T02:51:57Z,2021-08-11T01:15:56Z,2021-04-29T18:06:25Z,CONTRIBUTOR,completed,,"Describe what you were doing when the bug occurred:
1. Refresh the page I'm inspecting.
2. Notice two warnings in the errors and warnings section, like so: 
<img width=""196"" alt=""Screen Shot 2021-04-13 at 7 44 32 PM"" src=""https://user-images.githubusercontent.com/1285131/114647125-65f9e900-9c91-11eb-8412-c7807a1c7063.png"">
3. Click any arrow, either the one going up or the one going down, to view one of them. The tools crash.

If I restart the tools, things work smoothly again. I also don't see the warnings anymore.

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.11.0-39713716aa

Call stack: at store_Store.getIndexOfElementID (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22245:24)
    at getCurrentValue (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29244:29)
    at useSubscription (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25874:12)
    at SelectedTreeHighlight_SelectedTreeHighlight (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29268:16)
    at Rh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13245:7)
    at Ci (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13944:7)
    at uk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16725:86)
    at tk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16245:11)
    at qk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16237:23)
    at jk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16221:5)

Component stack: at SelectedTreeHighlight_SelectedTreeHighlight (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29213:34)
    at div
    at InnerElementType (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29953:3)
    at div
    at List (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23588:30)
    at div
    at AutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:3111:5)
    at div
    at div
    at Tree_Tree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29531:47)
    at div
    at div
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28680:3)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29121:3)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34645:52)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30035:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30157:5)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34264:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25356:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25963:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30300:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37639:3)"
,,,https://github.com/facebook/react/issues/21371,21371,Bug: calling calling `setState` twice inside `useEffect` creates extra function calls,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,False,,2,2021-04-28T00:12:41Z,2021-04-28T20:04:54Z,2021-04-28T07:47:07Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 17.0.2

## Steps To Reproduce

1. Create a function component
2. Call 2 `setState` functions inside a `useEffect` hook.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

```tsx
import { FC, useEffect, useState } from 'react'

const resolvedPromise = Promise.resolve()

const Test: FC = () => {
  const [a, setA] = useState(2)
  const [b, setB] = useState(0)

  useEffect(() => {
    let canceled = false

    resolvedPromise.finally(() => {
      console.log(a, b, canceled)
      if (canceled) return
      if (a > 0) {
        setA(a - 1)
        setB(b + 1)
      }
    })

    return () => {
      canceled = true
    }
  }, [a, b])

  return null
}
```

Link to code example: https://codesandbox.io/s/react-bug-606s4?file=/src/App.tsx

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
- `b` ends up being `1`.
- There is an extra function call when `a` is `1` and `b` is `0`. I think this is after `setA(a - 1)` but before `setB(b + 1)`.
- The function call with `1 0 false` was not canceled.
- The function call with `1 1 true` was canceled.

Current console output:
```
2 0 false
1 0 false 
1 1 true
0 1 false
```
## The expected behavior
- `b` ends up being `2`
- No extra function call in between `setA()` and `setB()`

Expected console output:
```
2 0 false
1 1 false
0 2 false
```
"
,,,https://github.com/facebook/react/issues/21376,21376,Bug: The digital precision in Style Object is lost.,"[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,3,2021-04-28T13:16:10Z,2021-05-05T21:01:34Z,2021-05-05T21:01:34Z,NONE,completed,,"
React version:
  v17.0.2
## Steps To Reproduce

```javascript
class App extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
    	scaleX: 1/3
    }
  }
  
  render() {
    const { scaleX } = this.state;
    return (
      <div
        className='box'
        data-scaleX={scaleX}
        style={{
      	  transform: `scaleX(${scaleX})`
        }}
       >
         {scaleX}
       </div>
    )
  }
}
```


Link to code example:

https://jsfiddle.net/slaneyang/cduvptLh/

## The current behavior
![image](https://user-images.githubusercontent.com/16184782/116409482-7780ea80-a866-11eb-80c3-3ecbc670fb8f.png)

## The expected behavior
![image](https://user-images.githubusercontent.com/16184782/116409585-92535f00-a866-11eb-9616-a3db697b9f4d.png)

**In this example, the precision of scaleX is lost.**

"
,,,https://github.com/facebook/react/issues/21243,21243,"Error: ""Cannot read property 'isCollapsed' of undefined""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,1,2021-04-12T18:19:06Z,2021-04-12T18:34:38Z,2021-04-12T18:34:30Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.11.0-39713716aa

Call stack: at store_Store.getElementAtIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22171:35)
    at store_Store.getElementIDAtIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22187:26)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29770:63
    at List.render (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23893:18)
    at Ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14002:76)
    at Hi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13993:10)
    at uk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16728:86)
    at tk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16245:11)
    at qk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16237:23)
    at jk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16221:5)

Component stack: at List (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23588:30)
    at div
    at AutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:3111:5)
    at div
    at div
    at Tree_Tree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29531:47)
    at div
    at div
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28680:3)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29121:3)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34645:52)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30035:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30157:5)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34264:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25356:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25963:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30300:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37639:3)"
,,,https://github.com/facebook/react/issues/21241,21241,"Error: ""Cannot read property 'isCollapsed' of undefined""","[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,1,2021-04-12T14:19:56Z,2021-04-12T14:24:09Z,2021-04-12T14:24:04Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.11.0-39713716aa

Call stack: at store_Store.getElementAtIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22171:35)
    at store_Store.getElementIDAtIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22187:26)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29770:63
    at List.render (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23893:18)
    at Ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14002:76)
    at Hi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13993:10)
    at uk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16728:86)
    at tk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16245:11)
    at qk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16237:23)
    at jk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16221:5)

Component stack: at List (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23588:30)
    at div
    at AutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:3111:5)
    at div
    at div
    at Tree_Tree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29531:47)
    at div
    at div
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28680:3)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29121:3)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34645:52)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30035:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30157:5)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34264:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25356:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25963:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30300:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37639:3)"
,,,https://github.com/facebook/react/issues/21191,21191,useCallback memoization,[],closed,False,,2,2021-04-07T18:24:23Z,2021-04-08T00:56:30Z,2021-04-08T00:56:29Z,NONE,completed,,"I want to continue a discussion about the `useCallback` that started on twitter (https://twitter.com/ramon_fritsch/status/1379569928454303749) here, following @gaearon's suggestion.

It's about `useCallback` returning a new reference when dependencies change. I always wondered if that's what we usually want.

Take this example: https://codesandbox.io/s/sipxs

I understand `useCallback` is intended to use on event handlers and regular callback props, thus we need to make it as flexible as possible. But the case for event handlers, I'd suggest to have a new hook `useEventCallback` that would memoize the callback function forever and never return a new reference, helping in not causing a re-render down the chain.

The folks from Formium solved this with https://github.com/formium/formik/blob/2d613c11a67b1c1f5189e21b8d61a9dd8a2d0a2e/packages/formik/src/Formik.tsx#L1193-L1205

Isn't it important enough to become a core hook in the React ecosystem? Or at least have a clear statement in the documentation about this behavior and best practices for event handlers?
"
,,,https://github.com/facebook/react/issues/21315,21315,DevTools doesn't seem to install properly,[],closed,False,,0,2021-04-19T15:58:17Z,2021-04-19T15:59:43Z,2021-04-19T15:59:43Z,NONE,completed,,"I have react devtools ""installed"" on my chrome account: on the installation page it appears to be installed. However, other developer friends of mine say that I don't have any of the features that are supposed to come with it and that it looks like it's not even installed. Any guidance on this would be appreciated because I don't know what else I can do aside from repeatedly clicking the add/remove button."
,,,https://github.com/facebook/react/issues/21534,21534,"[DevTools Error] Cannot remove node ""2315"" because no matching node was found in the Store.","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,5,2021-05-19T20:31:40Z,2021-05-21T14:19:06Z,2021-05-21T14:19:06Z,NONE,completed,AsheshL,"### Website or app

Website

### Repro steps

Not sure

### How often does this bug happen?

Often

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.13.2-e468072e17

### Error message (automated)

Cannot remove node ""2315"" because no matching node was found in the Store.

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot remove node  because no matching node was found in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
,,,https://github.com/facebook/react/issues/21527,21527,"[DevTools Error] Cannot remove node ""527"" because no matching node was found in the Store.","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,2,2021-05-19T14:12:31Z,2021-05-19T15:08:38Z,2021-05-19T15:08:38Z,NONE,completed,khairmuhammadLU,"### Website or app

localhost

### Repro steps

The error was thrown at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:21477:43
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19585:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19745:12
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37733:39)

### How often does this bug happen?

Often

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.13.2-e468072e17

### Error message (automated)

Cannot remove node ""527"" because no matching node was found in the Store.

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:21477:43
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19585:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19745:12
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37733:39)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot remove node  because no matching node was found in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
,,,https://github.com/facebook/react/issues/21435,21435,Bug: ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2021-05-05T15:02:15Z,2021-05-05T15:08:05Z,2021-05-05T15:08:05Z,NONE,completed,,"


"
,,,https://github.com/facebook/react/issues/21560,21560,[Feature Request]: Add array of updated deps indices to `useEffect` hooks arg,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,3,2021-05-25T16:17:20Z,2021-05-25T19:31:38Z,2021-05-25T19:31:38Z,NONE,completed,,"I would like to request adding the indices of updated dependencies of `useEffect`, `useLayoutEffect` as arg of the callback.

## For example:

if `dep1` and `dep3` changes, then indices of the dependencies that triggers the update should be passed to the callback as argument.

```jsx
useEffect((updatedIndices) => {

  console.log(updatedIndices); // Array [1,3]

}, [dep1, dep2, dep3])
```

I think this feature will be useful for most of us all."
,,,https://github.com/facebook/react/issues/21411,21411,Bug: Bug: Error message incorrectly,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,2,2021-05-03T08:41:27Z,2021-05-07T20:33:07Z,2021-05-07T20:33:07Z,NONE,completed,0xdevnet,"Getting this error message:

React Hook ""useStyles"" is called conditionally. React Hooks must be called in the exact same order in every component render

However, I'm pretty darn sure that I'm not actually calling useStyles conditionally. Also, the error messages come and go if I comment out unrelated code.

React version: 16.8"
,,,https://github.com/facebook/react/issues/21408,21408,"Error: ""Commit tree does not contain fiber ""48424"". This is a bug in React DevTools.""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,2,2021-05-02T14:56:52Z,2021-05-25T18:49:52Z,2021-05-25T18:49:52Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.13.0-2a7bb41548

Call stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20430:21)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20295:26)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20288:32)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20288:32)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20288:32)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20288:32)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20288:32)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20288:32)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20288:32)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20288:32)

Component stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35634:34)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29016:3)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37064:34)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30336:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30416:5)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34462:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25252:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25855:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30558:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37572:3)"
,,,https://github.com/facebook/react/issues/21522,21522,"[DevTools Error] Cannot remove node ""771"" because no matching node was found in the Store.","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,6,2021-05-18T16:52:46Z,2021-05-19T04:03:28Z,2021-05-19T02:46:51Z,NONE,completed,aluiscode,"### Website or app

https://soshace.com/react-user-login-authentication-using-usecontext-and-usereducer/

### Repro steps

I'm using a context to manage app global state like in [Website](https://soshace.com/react-user-login-authentication-using-usecontext-and-usereducer/) when get that error

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.13.2-e468072e17

### Error message (automated)

Cannot remove node ""771"" because no matching node was found in the Store.

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:21477:43
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19585:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19745:12
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37733:39)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot remove node  because no matching node was found in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
,,,https://github.com/facebook/react/issues/21716,21716,Bug: ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2021-06-22T07:56:45Z,2021-06-22T08:50:19Z,2021-06-22T08:50:19Z,NONE,completed,,"Test <b>1234<b/>
<img src=""http://img.alicdn.com/tfs/TB1sdP.Q8LoK1RjSZFuXXXn0XXa-48-48.png"">
hello
"
,,,https://github.com/facebook/react/issues/21712,21712,React 18: Error boundaries actually catches errors in effects,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,False,,2,2021-06-21T10:43:39Z,2021-06-24T14:48:50Z,2021-06-24T14:48:28Z,COLLABORATOR,completed,,"Given
```js
function ThrowInEffect() {
  React.useEffect(() => {
    throw new Error('passive effect')
  }, [])
  return null;
}
```

In React 17 this error got logged to the console (and triggered the error overlay in create-react-app) regardless of whether `ThrowInEffect` was a child of an Error Boundary or not.

In React 18 (`createRoot` and legacy root API) an Error Boundary will prevent logging that error to the console (and not trigger the error overlay in create-react-app).

Errors during render work like they did in React 17.

Behavior in React 17: https://codesandbox.io/s/react-17-error-boundaries-vp21e?file=/src/index.js
Behavior in React 18: https://codesandbox.io/s/react-18-error-boundaries-psd56?file=/src/index.js


Recording of effect errors in React 17 and 18 and with and without Error Boundaries_

https://user-images.githubusercontent.com/12292047/122749780-053ced00-d28e-11eb-98ce-075dcdc53ee2.mp4

"
,,,https://github.com/facebook/react/issues/21653,21653,"[DevTools Bug] Cannot remove node ""5"" because no matching node was found in the Store.","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,1,2021-06-10T05:13:29Z,2021-06-10T17:14:39Z,2021-06-10T17:14:31Z,NONE,completed,asirhameem,"### Website or app

https://github.com/facebook/react-devtools

### Repro steps

This bug is shown when I am reloading the page. It will be very helpful if someone provide me with a solution.

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.13.5-0ae5290b54

### Error message (automated)

Cannot remove node ""5"" because no matching node was found in the Store.

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:21178:43
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19286:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19446:12
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37413:39)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot remove node  because no matching node was found in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
,,,https://github.com/facebook/react/issues/21725,21725,Hooks at a Glance,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,2,2021-06-23T00:58:30Z,2021-07-14T22:55:07Z,2021-07-14T22:55:07Z,NONE,completed,tomasdelaveau,"In the _Effect Hook_ section, it reads **By default, React runs the effects after every render — including the first render.**
I just copied and pasted the example in a Next JS page, and upon page load (ie. first render) I see the title remains unchanged (even if I remove the `<title>` tag from the head in `_app.js`). It only changes to ""You clicked 1 times"" after the first click (ie. second render)."
,,,https://github.com/facebook/react/issues/21708,21708,Some way to fuzz setState timing/usage,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2021-06-20T14:53:35Z,2021-06-21T00:01:03Z,2021-06-20T18:24:34Z,NONE,completed,,"One of the more common problems people have with setState is stale refs or other timing and concurrency mistakes. For native code, we have things like Application Verifier's concurrency fuzzer, which can randomly delay some APIs to see if user code correctly handle uncommon timing issues.

So, why don't we have something like that for React APIs like setState? Randomly delay them for a set time? It looks like there's some internal fuzzing to test React's own correctness, but I don't see anything that I could enable to fuzz my React code."
,,,https://github.com/facebook/react/issues/21644,21644,Request for Package Release,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,3,2021-06-08T05:31:47Z,2021-06-08T20:45:45Z,2021-06-08T14:48:39Z,NONE,completed,,"I'm sorry if this is the wrong place to file this, but I wasn't sure how else to get ahold of the React team. The #21392 by @bvaughn fixes an issue that was causing MobX components to display components in stack traces as `wrappedComponent`, making it very hard to debug issues. This PR was merged back in April, but there hasn't been a React release since March. Is there any chance you guys would be willing to release React 17.0.3 with this fix?

Thanks!"
,,,https://github.com/facebook/react/issues/21919,21919,Bug: React component library with dependency that has a React dependency gets Error: Invalid hook call when using npm link,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2021-07-20T03:22:21Z,2021-07-20T04:20:50Z,2021-07-20T04:20:15Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.3.1

## Steps To Reproduce

1. Create a react project `npx create-react-app app`
2. Create a react library `npx create-react-library library`
3. Add a dependency to `library` that has a dependency on React `cd library && yarn add @material-ui/core`
4. Link between the two `cd library && npm link`, `cd library && npm link library`
5. In the `library` project, make a component using the dependency:
```javascript
import { Button } from ""@material-ui/core"";
export const ExampleComponent = ({ text }) => {
  return <Button>Example Component: {text}</Button>
}
```
6. In the `app` project, use the component

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: Can't really make a code example because it requires two projects

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior

Error: Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.

I know that this is falling under the 3rd case. `library/node_modules/react` definitely exists, but it isn't clear what the solution is to this issue.

## The expected behavior

The app to run without an error
"
,,,https://github.com/facebook/react/issues/21845,21845,Bug: import preact component with hooks in React Page ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2021-07-10T04:37:00Z,2021-07-10T10:05:31Z,2021-07-10T10:04:15Z,NONE,completed,,
,,,https://github.com/facebook/react/issues/21878,21878,[Proposal] Add extra props argument when calling getChildHostContext,[],closed,False,,2,2021-07-14T13:27:50Z,2021-09-27T22:47:39Z,2021-09-26T19:28:43Z,NONE,completed,,"Hi 👋 

We are building a custom React renderer using the `react-reconciler` package and we ran in a situation where we would need to have access to the props of a instance in the call to `getChildHostContext`.

In short, here is the pseudo-code of what we need:

```tsx
const hostConfig = {
  /**
   * Our root will have a driver that is a default for the entire React tree
   */
  getRootHostContext: function (rootContainerInstance) {
    return { driver: rootContainerInstance.driver };
  },

  /**
   * But we want to allow overriding the value of the `driver` via a special tag
   * 
   * Ex: <special-tag driver={customDriver}>....</special-tag>
   */
  getChildHostContext: function (
    parentContext,
    type,
    rootContainerInstance,
    props
  ) {
    if (type === ""special-tag"") {
      return { driver: props.driver };
    }

    // Otherwise we forward the original parent context
    return parentContext;
  },

  /**
   * Then on creating instances (or updating) we can use the relevant driver based on the ancestor tree
   */
  createInstance: function (externalType, newProps, container, hostContext) {
    const driver = hostContext.driver;
  },
};
```

We saw that [in the implementation of the function](https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberHostContext.new.js#L77) that calls `getChildHostContext`, it has access to a `fiber` instance that has access to ""props"". Would something the change below make sense?

```diff
function pushHostContext(fiber: Fiber): void {
  const rootInstance: Container = requiredContext(
    rootInstanceStackCursor.current,
  );
  const context: HostContext = requiredContext(contextStackCursor.current);
-  const nextContext = getChildHostContext(context, fiber.type, rootInstance);
+  const nextContext = getChildHostContext(context, fiber.type, rootInstance, fiber.pendingProps);

  // Don't push this Fiber's context unless it's unique.
  if (context === nextContext) {
    return;
  }

  // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.
  push(contextFiberStackCursor, fiber, fiber);
  push(contextStackCursor, nextContext, fiber);
}
```

We don't understand the internals of the Fiber/reconciler implementation and the implications it would have to expose these props. I guess a potential issue is that they change in re-renders?

Thank you so much for all the efforts on making React such a fantastic and extendable library ❤️.

cc: @xaviervia"
,,,https://github.com/facebook/react/issues/21819,21819,"[DevTools] Improve ""retry"" function for inspected component props/state/hooks","[{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,1,2021-07-07T19:27:38Z,2021-07-08T18:07:15Z,2021-07-08T18:07:15Z,COLLABORATOR,completed,bvaughn,"Currently if an error occurs when inspecting a component, an error overlay is shown in the right hand side of DevTools along with a ""dismiss"" button to allow the inspection to be retried. However, currently this ""retry"" does not clear the entry from the cache and so it will immediately fail again if the same component is re-selected. We should clear the cache entry so that we actually retry when the modal is dismissed"
,,,https://github.com/facebook/react/issues/21939,21939,DevTools: Order of higher-order component badges,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,8,2021-07-22T09:48:55Z,2022-07-25T07:02:13Z,2022-07-25T07:02:13Z,COLLABORATOR,completed,,"Given 

```jsx
const StyleDiv = forwardRef(function Component({ children }, ref) {
  return <div ref={ref}>{children}</div>;
});

StyleDiv.displayName = `styled(connected(div))`;
```

-- https://codesandbox.io/s/little-sky-y8h1b?file=/src/App.js

I would expect that the badges from the display name are prioritized in the component tree.
However, devtools currently displays the `ForwardRef` badge first:

> `div ForwardRef +2`
![Screenshot from 2021-07-22 11-44-32](https://user-images.githubusercontent.com/12292047/126619858-20b3747b-8723-4306-b5b0-13457d8f45e2.png)

Oddly enough, the inline devtools in codesandbox do prioritize the badge from the `displayName` (maybe this regressed?):

> `div styled +2` ![Screenshot from 2021-07-22 11-45-27](https://user-images.githubusercontent.com/12292047/126620032-bda9ef1a-ab26-4df3-a10c-e0e8c5cfc3d3.png)


There's also an argument to be made that devtools should not display the `ForwardRef` badge to begin with (since we explicitly omitted it in `displayName`). That can be discussed separately but would solve the issue entirely."
,,,https://github.com/facebook/react/issues/21895,21895,react developer tools ,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,1,2021-07-16T04:26:13Z,2021-07-16T13:58:18Z,2021-07-16T13:58:03Z,NONE,completed,,I successfully installed the extensions but i am not able to see the the news tabs ( components and react
,,,https://github.com/facebook/react/issues/21989,21989,Bug: createPortal anywhere in the tree makes native events be ran too late,"[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,5,2021-07-29T18:41:56Z,2021-07-30T08:48:58Z,2021-07-30T08:48:53Z,NONE,completed,,"## Summary
Native events added via `useEffect` are called too late (and with improper (new) state, rather than the state during listener attachment) if there's a `ReactDOM.createPortal` anywhere in the tree. First the effect is re-run and a new listener is attached, and only then the native event is called.

React version:
17.0.2

Link to code example:

[CodeSandbox](https://codesandbox.io/s/late-star-1izm6)

## Reproduction 

* Anywhere in the tree is a `createPortal`. It can even be `createPortal(null, document.body)`
* Somewhere, there is a component with `useState`.
* It renders a div. The div has an `onClick` handler passed.
* On top of that, `useEffect` is used to attach a `click` event to `window`
* Both event handlers (both the native event attached to window, and the React event passed to `div`) use `setState`.

## The current behavior

* The React handler is called. It calls setState
* The component rerenders with the new state, and its effects are re-run.
* Since the effect is re-run, a new native listener is attached (which is bound to the new state)
* Only then, the new listener (with the NEW state) is called.

## The expected behavior

* The React handler is called. It calls setState
* The component might rerender or not (doesn't matter)
* The native handler is called with the old state.

In other words
```
const [popupOpen, setPopupOpen] = useState(false);
useEffect(() => {
   // close popup if clicked anywhere on the screen, some code ignored for brevity 
  const listener = () => {
    console.log('NATIVE', popupOpen);
    if (popupOpen) setPopupOpen(false);
  };
  window.addEventListener(""click"", listener);
  return () => window.removeEventListener(""click"", listener);
}, [popupOpen]);

return (
  <>
    <div
      onClick={() => {
        console.log('REACT', popupOpen); // REACT HANDLER STATE
        if (!popupOpen) setPopupOpen(true);
      }}
    >
      Open popup
    </div>
    {ReactDOM.createPortal(null, document.body)}
  </>
);
```

Logs

![image](https://user-images.githubusercontent.com/45483493/127549843-763c1ee1-4976-4d7b-855e-91b16b8c4e3e.png)

But without `createPortal`, the following is logged:

![image](https://user-images.githubusercontent.com/45483493/127550018-901aee68-c9d9-4c66-9897-9466789256ce.png)
"
,,,https://github.com/facebook/react/issues/21834,21834,[DevTools] Skip loading and parsing source for unnamed built-in hooks,"[{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,0,2021-07-08T20:11:17Z,2021-07-08T20:47:40Z,2021-07-08T20:46:17Z,COLLABORATOR,completed,bvaughn,"Hooks like `useEffect` or `useLayoutEffect` will _never_ have names, so if a the only hooks for a given source file are these ""unnamed"" built-in hooks, we should skip loading the source code."
,,,https://github.com/facebook/react/issues/22131,22131,Potential expensive operation optimisation,[],closed,False,,2,2021-08-19T06:50:14Z,2021-09-21T15:27:51Z,2021-09-21T15:27:51Z,NONE,completed,,"This seems to be an expensive operation - 
https://github.com/facebook/react/blob/aa25824f3ebbdbbea01be48417f2f99251be1a12/packages/react-reconciler/src/ReactFiberTreeReflection.js#L325

used in loops in -

i) https://github.com/facebook/react/blob/aa25824f3ebbdbbea01be48417f2f99251be1a12/packages/react-reconciler/src/ReactFiberCommitWork.new.js#L322
ii) https://github.com/facebook/react/blob/aa25824f3ebbdbbea01be48417f2f99251be1a12/packages/react-reconciler/src/ReactFiberCommitWork.new.js#L345

Can/Should we use memoize this somehow?
"
,,,https://github.com/facebook/react/issues/22033,22033,Question: How dispatchAction will update the current fiber in react 17,[],closed,False,,1,2021-08-05T12:10:54Z,2021-08-06T07:37:07Z,2021-08-06T07:36:51Z,NONE,completed,,"  useState would return an array，then the second argument is a function that invoking the dispatchAction.bind() returns.
`var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);`
I have a question. In this case，the first parameter of dispatchAction is always determined. There will be a closure that will shallowly copy its value, if you need to modify it, you have to get its reference, and then manually modify the properties of the object.

Could someone help me answer？ how to modify the current fiber?"
,,,https://github.com/facebook/react/issues/22115,22115,DevTools: Better Bundle Names for Dynamically Imported Modules,"[{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null},{""id"":725156255,""node_id"":""MDU6TGFiZWw3MjUxNTYyNTU="",""url"":""https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)"",""name"":""good first issue (taken)"",""color"":""b60205"",""default"":false,""description"":null}]",closed,False,,13,2021-08-17T20:46:42Z,2021-09-15T17:51:34Z,2021-09-15T17:51:34Z,CONTRIBUTOR,completed,akgupta0777,"In the DevTools extension, webpack currently uses an automatically assigned ID as the chunk name for dynamically imported modules (ie. `parseHookNames` and associated code will get bundled into `6.js`).

We've tried adding `chunkFilename: '[name].js'` to `output` in `webpack.config.js` and  magic comments (ie.`/* webpackChunkName: ""parseHookNames"" */`) to the dynamic import to fix, but neither works. "
,,,https://github.com/facebook/react/issues/22120,22120,Bug: ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2021-08-18T06:49:28Z,2021-08-18T14:55:50Z,2021-08-18T14:53:51Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1.
2.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
"
,,,https://github.com/facebook/react/issues/22123,22123,[DevTools Bug]: Profiler freezes when navigating through commits,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,8,2021-08-18T09:33:30Z,2021-08-20T18:08:23Z,2021-08-20T18:08:23Z,COLLABORATOR,completed,,"### Website or app

https://github.com/eps1lon/material-ui/tree/757f6cf571557f8b03a372db5c7cc1cf3837c944

### Repro steps

1. Enable chrome://flags/#enable-throttle-display-none-and-visibility-hidden-cross-origin-iframes
1. goto https://611f52616dca6500083055f2--material-ui.netlify.app/components/slider/#ContinuousSlider
1. record at least 2 commits via Profiler

The larger the component tree the more reliable the crash. When I reduce the component tree in the UI the crash stops at some point.


https://user-images.githubusercontent.com/12292047/129874688-1f38e1ea-6f80-4fbc-a331-b76fdde32b99.mp4



### How often does this bug happen?

Every time

### DevTools package (automated)

1d2528097

### DevTools version (automated)

4.16

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
profiler freeze
```
"
,,,https://github.com/facebook/react/issues/22079,22079,Bug: `TypeError: Cannot call a class as a function` when rendering class component inside a functional component,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,0,2021-08-12T06:55:14Z,2021-08-12T07:50:04Z,2021-08-12T07:50:04Z,NONE,completed,,"React version: 17.0.2

## Steps To Reproduce

**It won't reproduce in codesandbox,, etc**

Link to code example: https://codesandbox.io/s/react-playground-forked-inft2

1. Make parents component as functional
2. Make child component as class (and I also add `extends React.Component`)
3. Render child in parents as `prop.child`
4. Error

Here's my codes..

1. child component (class)
<img width=""925"" alt=""Screen Shot 2021-08-12 at 3 48 13 PM"" src=""https://user-images.githubusercontent.com/44552838/129150686-7c3afcfc-e683-4003-89f8-b564263cc9ee.png"">

2. assigned as props
<img width=""405"" alt=""Screen Shot 2021-08-12 at 3 49 08 PM"" src=""https://user-images.githubusercontent.com/44552838/129150772-dba814cc-94c6-4227-a069-0a32b90e75d3.png"">

3. parents component (funtional)
<img width=""709"" alt=""Screen Shot 2021-08-12 at 3 53 00 PM"" src=""https://user-images.githubusercontent.com/44552838/129151250-ec4f5740-0a72-41f4-9985-3839385cc64a.png"">


## The current behavior
<img width=""752"" alt=""Screen Shot 2021-08-12 at 3 54 56 PM"" src=""https://user-images.githubusercontent.com/44552838/129151467-e6165133-b999-42e1-9f6d-9144fc6ede5d.png"">


## The expected behavior
Render nomally"
,,,https://github.com/facebook/react/issues/22336,22336,app:lintVitalReleaseBug issue,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,0,2021-09-16T12:30:35Z,2021-09-17T12:10:18Z,2021-09-17T12:10:18Z,NONE,completed,,"
```
* What went wrong:
Could not determine the dependencies of task ':app:lintVitalRelease'.
> Could not resolve all artifacts for configuration ':app:debugRuntimeClasspath'.
   > Could not resolve org.webkit:android-jsc:+.
     Required by:
         project :app
      > Failed to list versions for org.webkit:android-jsc.
         > Unable to load Maven meta-data from https://jcenter.bintray.com/org/webkit/android-jsc/maven-metadata.xml.
            > Could not HEAD 'https://jcenter.bintray.com/org/webkit/android-jsc/maven-metadata.xml'.
               > Read timed out
```

**Screen-shot**

<img width=""654"" alt=""Local_issue_jcenter"" src=""https://user-images.githubusercontent.com/90843653/133613659-70ee0e0a-ceac-430f-8ede-b93b78063c67.PNG"">

_React Native version:_

**""react-native"": ""0.63.2""**
## Steps To Reproduce

1.gradlew assembleRelease  (on local machine, windows system)

"
,,,https://github.com/facebook/react/issues/22301,22301,found an empty rule set ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,3,2021-09-13T11:23:58Z,2021-09-14T14:08:03Z,2021-09-14T13:58:23Z,CONTRIBUTOR,completed,,"this is the file path - packages/react-devtools-shared/src/devtools/views/Settings/SettingsShared.css

going here i found a empty rule set called selector which had nothing inside it and it is not a good practice to keep empty ruleset .


here is the PR link for the same - https://github.com/facebook/react/pull/22298

hope to get a feedback soon!"
,,,https://github.com/facebook/react/issues/22225,22225,A11y_CDE - Mission Control and APIs_Measure Failure Investigation-Measure Drilldown_Screen Reader: Narrator is just reading as Group for Add dimension drop down.,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2021-09-01T09:46:44Z,2021-09-01T11:56:29Z,2021-09-01T11:56:29Z,NONE,completed,,"Check out Accessibility Insights! - Identify accessibility bugs before check-in and make bug fixing faster and easier.

Environment Details:
OS: Windows 20H2 1903(OS Build 19042.508)​
Microsoft Edge Dev Version 93.0.926.0 (Official build) dev (64-bit)
URL:  https://mission-control-ci.azurewebsites.net/​
​
Repro Steps:​​
1) Hit the URL : https://mission-control-ci.azurewebsites.net/​
2) Login with Valid login credentials​​
3) Start Narrator
4) Home page will get open ​​
5) Tab till left navigation bar and Press enter on Windows icon​​
6) Tab till Release Readiness (RQV) and press enter ​​
7) Tab till Compliance from left Navigation bar  and press enter ​​
8) Tab till Compliance expandable button present in the page and press enter​​
9) Tab till any graph and press enter​
10) Graph pop-up will get open​
11) Tab till Investigate Measure Link and press enter
12) Measure Failure Investigation page will get open 
13) Tab till Jump to related views (Three dots) and press enter
14) Tab till Data Landscape and press enter
15) Measure: 20203773 - [RQV Compliance Measure] Privacy - Reset page will get open
16) Tab till Add dimension drop down and check whether Narrator is reading as Group or not

Actual Result:​​
Narrator is not reading descriptive information when focus land on the 'Select a dimension' combo box. It is announcing add dimension edit scan off space space 0 result available select is focus to find the dimension list......... 

Expected Result:​​
Narrator should read descriptive information when focus land on the 'Select a dimension' combo box. It should announce 'Select a dimension combo box collapsed editable' 

Note: Same issue repro with NVDA & JAWS screen reader as well.
NVDA is narrating 'Add dimension edit has auto complete' and JWAS is narrating 'Add dimension column edit type and text'.

User Impact:​​
Screen Reader users will have difficulty in understanding if Narrator is just reading as Group for Add dimension drop down with out reading the role assigned to the drop down

MAS Reference:​​
(https://microsoft.sharepoint.com/:w:/r/teams/msenable/_layouts/15/WopiFrame.aspx?sourcedoc={54f28d1f-a2d1-4dcd-84e1-5c9b87e8aba4}[](url)
<img width=""942"" alt=""BUG1"" src=""https://user-images.githubusercontent.com/89897257/131650206-60865ec3-39e4-4d1a-948b-197dc9a6ca94.png"">
"
,,,https://github.com/facebook/react/issues/22333,22333,"Error: ""Cannot read property 'length' of undefined""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,4,2021-09-16T05:45:36Z,2021-11-15T15:51:57Z,2021-11-15T15:51:57Z,NONE,completed,drager,"Describe what you were doing when the bug occurred:
1. Just trying to profile an React Native app

![Screenshot_2021-09-16_07-44-35](https://user-images.githubusercontent.com/1957563/133556382-73ddabab-f985-4fd2-9d60-1a1438d8bd8b.png)


---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.10.1-3a8c04e3b2

Call stack: at Jc (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:56:342921)
    at ii (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:24:59391)
    at Kl (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:24:114564)
    at Ns (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:24:101189)
    at Is (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:24:101117)
    at Os (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:24:100980)
    at gs (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:24:96690)
    at w (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:40:1749)
    at MessagePort.A.port1.onmessage (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:40:2251)

Component stack: at Jc (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:56:341665)
    at div
    at div
    at fi (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:56:235808)
    at /nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:56:347533
    at Hi (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:56:249715)
    at /nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:56:251980
    at div
    at div
    at lu (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:56:305412)
    at En (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:56:173743)
    at jn (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:56:184811)
    at Ji (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:56:253490)
    at Nd (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:56:353738)"
,,,https://github.com/facebook/react/issues/22432,22432,The source code of v16.14.0 is inconsistent with the release package.,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,True,,7,2021-09-26T13:26:01Z,2022-01-12T13:45:10Z,2021-09-27T17:19:02Z,NONE,completed,,"I downloaded and compiled the source code of v16.14.0. It is found that the compiled code is inconsistent with the code of the release package. Some bugs [#18539](https://github.com/facebook/react/pull/18539) that were only fixed in version 17.0.0 have been fixed in my compiled code. Of course, it has not been fixed in the v16.14.0 release package. I checked the merge record of these repair codes, and it has indeed been merged into the v16.14.0 tag.

 I want to know which commit record corresponds to the actual source code of the v16.14.0 release package.
@gaearon Please help me.

React version: 16.14.0

## Steps To Reproduce


## The current behavior


## The expected behavior
"
,,,https://github.com/facebook/react/issues/22570,22570,"[DevTools Bug] Cannot add node ""1"" because a node with that id is already in the Store.","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,9,2021-10-15T19:16:38Z,2021-10-21T20:04:12Z,2021-10-20T16:23:55Z,NONE,completed,,"### Website or app

https://wayray.com/#how-we-work

### Repro steps

not able to see

### How often does this bug happen?

Sometimes

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.19.2-20ca9b565

### Error message (automated)

Cannot add node ""1"" because a node with that id is already in the Store.

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25708:41
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23923:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24083:12
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:52511:39)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot add node  because a node with that id is already in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
,,,https://github.com/facebook/react/issues/22536,22536,Bug: Typescript definitions don't let me define function types that may return Destructors,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2021-10-10T18:51:14Z,2021-10-10T23:21:17Z,2021-10-10T23:21:17Z,NONE,completed,,"Move Destructor into the React namespace so my typescript can use it.

React version: 17.0.2

## Steps To Reproduce

I want to create functional hook components that replace commonly duplicated code - for instance, I am commonly using my event bus.

```typescript
// somewhere...
const AppContext = createContext<{ eventbus: EventEmitter }>({ eventbus: new EventEmitter() })
// elsewhere...
const { eventBus } = useContext(AppContext)
useEffect(() => {
  if (!eventBus) return
  if (!otherThing) return
  if (someStateThing) eventBus.emit(""setup"", otherThing.bit(someStateThing))
  return (): void => void eventBus.emit(""cleanup"", otherThing.bit(someStateThing))
}, [ eventBus, otherThing, someStateThing ] )
```
But I want to compose something I can use like this:
```typescript
useEffectWithEventBus((eventBus) => {
  if (!otherThing) return
   eventBus.emit(otherThing.bit(someStateThing))
   (): void => void eventBus.emit(""cleanup"", otherThing.bit(someStateThing))
}, [otherThing, someStateThing])
```
But when I go to try and define that
```typescript
const useEffectWithEventBus: (cb: (eventbus: EventEmitter) => void | Destructor, deps: DependencyList) => void = (cb, deps) => {
   const { eventBus } = useContext(AppContext) 
   useEffect(() => cb(eventBus), [ eventBus, ...deps ])
}
```
`Cannot find name Destructor`

But EffectCallback IS `() => void | Destructor`

And destructor is `type Destructor = () => void | { [UNDEFINED_VOID_ONLY]: never };`

Its not inside the React Namespace - Destructor is mysteriously limited to the File scope of the react index? So I can't define my custom hook to have a function that can return a destructor... because I don't have access to the Destructor type.

I thought, well, maybe I can just do functional composition on that... but... how do I define my callback out of the scope where eventBus is pulled from the context?  I might be able to get it in there functionally by using the .call(this) context...

```typescript
const useEffectWithEventBus: (cb: EffectCallback, deps: DependencyList) => void = (cb, deps) => {
   const { eventBus } = useContext(AppContext) 
   useEffect(() => cb.call(eventBus), [ eventBus, ...deps ])
}
useEffectWithEventBus(() => {
  if (!otherThing) return
   this?.emit(otherThing.bit(someStateThing))
   (): void => void this?.emit(""cleanup"", otherThing.bit(someStateThing))
}, [otherThing, someStateThing])
```

But then the compiler thinks that this might be undefined (true) and it has no idea that this refers to an `EventEmitter` - and it eludes me how(or even if is possible) to type narrow `this` to an `EventEmitter`.  (that's pretty advanced typing don't you think?)


## The current behavior

Destructor type not exported enough to use in my code

## The expected behavior

Destructor type is exported enough to use in my code
"
,,,https://github.com/facebook/react/issues/22479,22479,"[DevTools Bug] Could not inspect element with id ""15"". Error thrown:Cached data for element ""15"" not found","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,2,2021-10-01T13:24:11Z,2021-10-01T15:50:37Z,2021-10-01T13:29:17Z,NONE,completed,,"### Website or app

https://github.com/santhosh-reddy03/react_practice

### Repro steps

$cd repo
and then start the server using npm start

in browser(mozilla firefox)
when i try to add the user and age, and trying to debug the output in ListUsers component, I m facing this error
![Screenshot from 2021-10-01 18-52-36](https://user-images.githubusercontent.com/53914022/135627139-ca7132b6-f39d-4330-8b7d-0cc5281ab552.png)


### How often does this bug happen?

Only once

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.19.0-2178a831a

### Error message (automated)

Could not inspect element with id ""15"". Error thrown:Cached data for element ""15"" not found

### Error call stack (automated)

_No response_

### Error component stack (automated)

```text
InspectedElementContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:38121:43
Suspense
ErrorBoundary_ErrorBoundary@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:36518:5
div
InspectedElementErrorBoundaryWrapper@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:36967:46
NativeStyleContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:39541:38
div
div
OwnersListContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:34741:37
SettingsModalContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:35182:40
Components_Components@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:41481:52
ErrorBoundary_ErrorBoundary@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:36518:5
div
div
ThemeProvider@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:36635:23
PortaledContent@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:36669:34
div
div
div
ThemeProvider@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:36635:23
SchedulingProfilerContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:42673:45
ProfilerContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:41106:35
TreeContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:29603:31
SettingsContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:30214:35
ModalDialogContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:37030:38
DevTools_DevTools@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:52130:27
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Could not inspect element with id . Error thrown:
Cached data for element  not found in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
,,,https://github.com/facebook/react/issues/22564,22564,Bug: shows duplicate the last elements of an array stored with useRef,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,4,2021-10-14T23:13:04Z,2022-03-30T17:40:23Z,2021-10-15T15:40:01Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

I'm keeping the last values passed as props without force a re-render, I'm using the `useRef` to store the elements without re-render the output.

The weird part is that the values showed are different from what I'm storing, duplicating the last elements.


React version: 17.0.2
![image](https://user-images.githubusercontent.com/14454/137406585-c89f359b-7777-4d66-ba2d-ecaebae5ac47.png)


<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

https://codesandbox.io/s/stupefied-ride-m1did?file=/src/App.js

```
import React from ""react"";

const ComR = React.memo(function Compo({ id, value }) {
  const lastElements = React.useRef([0, 0, 0, 0, 0]);
  const [_, ...m] = [...lastElements.current, value]; // remove first and insert last
  lastElements.current = m;
  console.log(""rendering"", id, value, memo.current);
  return (
    <div>
      {id} - {lastElements.current.join("", "")}
    </div>
  );
});

export default function App() {
  const [value, setValue] = React.useState(0);

  React.useEffect(() => {
    setInterval(() => {
      setValue(Math.ceil(Math.random() * 10000));
    }, 7000);
  }, [setValue]);

  return (
    <div className=""App"">
      <ComR id=""1"" value={value} />
    </div>
  );
}
```

## The current behavior

The console.log is showing different what is printing into the component

![image](https://user-images.githubusercontent.com/14454/137407532-d1fff912-0542-43f8-8c99-5d87da094da2.png)

## The expected behavior

expects work as linear array operations, since was called/rendered once"
,,,https://github.com/facebook/react/issues/22623,22623,I have been learning react for quite some time and I just recently came across the term React.memo() that helps us to optimize our functional components thus increase our application's performance. I understood what's it for but one thing I don't understand is that when to use it? does it make sense to use it in our every primary child components besides App.js?,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,False,,3,2021-10-25T09:13:58Z,2021-10-26T06:27:32Z,2021-10-26T06:27:32Z,NONE,completed,,"<!--
  Ask a question or share feedback about the React 18 release here.
-->
"
,,,https://github.com/facebook/react/issues/22654,22654,Bug: setState bail out doesn't work sometimes when updating from an effect,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2021-10-29T14:12:55Z,2021-10-29T14:43:00Z,2021-10-29T14:43:00Z,CONTRIBUTOR,completed,,"## Description

The codesandboxed example doesnt make much sense, but I've stumbled upon this when trying to handle source change gracefully with `useSubscription`. I've wanted to rely on the bail-out behavior that is documented [here](https://beta.reactjs.org/reference/usestate#passing-the-same-value-to-setstate) but it turns out that for some reason I can't because the component rerenders twice here (and this is caused by that `setState` within `useEffect`).

React version: 17.0.2

## Steps To Reproduce

1. Trigger some update/rerender
2. setState to the same value from within the `useEffect`

Link to code example:

https://codesandbox.io/s/stupefied-euclid-oo26w?file=/src/App.js

## The current behavior

The component rerenders twice after a click

## The expected behavior

The component should only rerender once after a click
"
,,,https://github.com/facebook/react/issues/22704,22704,[ESLint Bug]: Rules of Hooks breaks with IIFEs,[],closed,False,,5,2021-11-05T15:01:38Z,2021-11-05T19:26:25Z,2021-11-05T18:33:12Z,NONE,completed,,"### Summary

It seems like the rules of hooks break on [IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE)s when it seems like they shouldn't.

[This codesandbox is the best way to see what I'm talking about.](https://codesandbox.io/s/rules-of-hooks-trouble-with-iife-kz1f7?file=/src/index.tsx) However, I've included more details below in the (1) **_Flat Reproduction Steps_** and (2) **_Example Use-case_** sections.

### Flat Reproduction Steps
<ol>
<li>
Create some custom hook.
<pre lang=""tsx""/>
// This one is fine
const useStateRegular = (initVal: any) => useState(initVal);
</pre>
</li>
<li>
Modify the hook to use an <a href=""https://developer.mozilla.org/en-US/docs/Glossary/IIFE"">IIFE</a>
<pre lang=""tsx""/>
// This one breaks rules of hooks. ❌
const useStateIFFE = (initVal: any) => (() => useState(initVal))()
</pre>
</li>
<li>
Observe that this triggers ESLint (in an ESLint compatible environment; see <a href=""https://codesandbox.io/s/rules-of-hooks-trouble-with-iife-kz1f7?file=/src/index.tsx"">codesandbox also linked above</a>)
</li>
</ol>

### Example Use-case
```tsx
// Example usage: a sort-of-functional style for a toggle boolean hook 
const useToggle = (init: any) =>
  (([myBool, setMyBool]): [boolean, () => void] => [
    myBool,
    // useRef breaks the rules of hooks here ❌
    useRef(() => setMyBool((prevValue) => !prevValue)).current
  ])(useState(!!init));

function ExampleUsage() {
  const [value, toggleValue] = useToggle(true);
  return (
    <>
      <h2>example usage</h2>
      <button onClick={toggleValue}>
        <code>{`value:${value}`}</code>
      </button>
    </>
  );
}
```

```
DISCLAIMER: 
1. Although this may be an odd style, this doesn't really break the rules of hooks.
2. Again about the style, it's OK to prefer `useCallback` here if you want. 
I'm not trying to write something perfect for this example, I'm just trying to give one.
```

<hr /> 

EDIT: ~`1. Although this may be an odd style, this doesn't really break the rules of hooks.`~

<details><summary>
<b>I was wrong. <i>It does break the rules of hooks.</i></b>
Specifically, the ""nested functions"" part of the first rule ""<a href=""https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level"">Only call hooks at the top level.</a>""</summary><br/>

1. IFFEs used like this are in fact, nested functions. (see more: [Nested Functions MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#nested_functions_and_closures))

2. Here's the thing I missed <img src=""https://user-images.githubusercontent.com/23425952/140564599-f1621702-e8a8-45f0-8b0e-f4e700bc266e.png"" />
<hr/>

</br></details>"
,,,https://github.com/facebook/react/issues/22742,22742,How can I optimise and speed up react js app with multiple tabs,[],closed,False,,9,2021-11-11T09:22:14Z,2021-11-22T16:13:48Z,2021-11-22T16:13:48Z,NONE,completed,,"Hello,
I have a react application with multiple tabs, in each tab we can add one or multiple highcharts. Once we reach the third tab, the application becomes very slow, took more than 15 seconds to do actions like adding new tab, delete tab, adding or removing highcharts. I'm already using functions of optimisation like memo, useMemo, useCallback, ... So I'm wondering if there is a possibility to unmount or kill the already visited tabs without hiding them in order to save the memory for the active tab. If you have any idea of how I can modify the architecture in order to speed up the application, because, I'm wondering how big applications for example handle multiple tabs without decreasing the performance. Tech : react js, redux, highcharts"
,,,https://github.com/facebook/react/issues/22728,22728,Bug: I dont like it,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,0,2021-11-09T07:25:46Z,2021-11-09T07:26:27Z,2021-11-09T07:26:27Z,NONE,completed,,
,,,https://github.com/facebook/react/issues/22741,22741,"Bug: React instrumentation encountered an error: Error: Could not find ID for Fiber ""Portal""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,2,2021-11-11T08:34:48Z,2021-11-15T15:51:47Z,2021-11-15T15:51:47Z,NONE,completed,jackluson,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:  17.0.2

## Steps To Reproduce
1. 
> when i execute `Modal.hide()` 

2.
![image](https://user-images.githubusercontent.com/36684351/141264440-be0f55b9-4aa8-4ff4-a9de-1c8c0291f813.png)

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:
![image](https://user-images.githubusercontent.com/36684351/141264419-bcb20cd5-8f69-44d8-a8b2-2cf5c64882b8.png)

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
"
,,,https://github.com/facebook/react/issues/22823,22823,Can't edit a editable div in facebook post field(Keys not working),"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,1,2021-11-24T05:04:55Z,2021-11-24T21:43:08Z,2021-11-24T21:43:07Z,NONE,completed,,"I am trying to make a extension like grammarly.When i want to make it work on facebook and twitter post field it doesn't work.When i write something in facebook post field and want to replace a suggestion of a existing wrong word by DOM modification using javascript,replacing suggestion does occur nicely.But after that no key including backspace,delete seems to stop working.This happens only in case of facebook and twitter.I wonder how grammarly manage this.Can anyone show me the path to solve this?

I think react dom of facebook does not permit these type of dom manipulation.What could be the ways to solve this problem from facebook react side.
`document.activeElement.innerText=""hello, world""`"
,,,https://github.com/facebook/react/issues/22896,22896,Bug: onChange not working with custom elements,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,0,2021-12-09T13:23:20Z,2021-12-09T13:28:04Z,2021-12-09T13:28:04Z,NONE,completed,,title says it all!
,,,https://github.com/facebook/react/issues/23030,23030,[DevTools Bug] Cannot read properties of undefined (reading 'push'),"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,1,2021-12-25T22:22:58Z,2021-12-26T02:02:21Z,2021-12-26T00:43:08Z,NONE,completed,,"### Website or app

https://nickretallack.github.io/nameless-language/

### Repro steps

Just view the components tab.

This site is written in Rescript.

Actually, this is all the Rescript code you need to break devtools:

```rescript
@react.component
let make = () => {
  let _ = ReactUpdate.useReducer((_: unit, _: unit) => ReactUpdate.NoUpdate, ())
  React.useEffect(() => None)
  <div />
}
```

`ReactUpdate` is provided by [`rescript-react-update`](https://github.com/bloodyowl/rescript-react-update)


### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.22.0-0229baee2

### Error message (automated)

Cannot read properties of undefined (reading 'push')

### Error call stack (automated)

```text
at F (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:13216:7)
    at H (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:13250:10)
    at exports.inspectHooksOfFiber (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:13310:12)
    at inspectElementRaw (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:8067:65)
    at Object.inspectElement (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:8350:38)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:10183:56
    at Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:4225:18)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:4868:14
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:12176:9)
```


### Error component stack (automated)

```text
at InspectedElementContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:38950:3)
    at Suspense
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37307:5)
    at div
    at InspectedElementErrorBoundaryWrapper (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37796:3)
    at NativeStyleContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40436:3)
    at div
    at div
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33294:3)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35907:3)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42439:52)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37307:5)
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37450:3)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37480:5)
    at div
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37450:3)
    at TimelineContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42619:3)
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42065:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30204:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30826:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37859:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:53732:3)
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot read properties of undefined (reading 'push') in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
,,,https://github.com/facebook/react/issues/22905,22905,Bug: onChange not working with custom elements,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,0,2021-12-09T13:23:31Z,2021-12-09T13:27:45Z,2021-12-09T13:27:45Z,NONE,completed,,title says it all!
,,,https://github.com/facebook/react/issues/23047,23047,React 18 ,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,False,,0,2021-12-30T03:30:25Z,2022-01-07T18:48:15Z,2022-01-07T18:48:15Z,NONE,completed,,"<!--
  Ask a question or share feedback about the React 18 release here.
-->
"
,,,https://github.com/facebook/react/issues/22993,22993,Bug: Refs are becoming null after setting state ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,0,2021-12-20T03:17:36Z,2021-12-20T04:00:06Z,2021-12-20T04:00:06Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->
Setting state after using mouse event listeners causes refs to become null.  The sandbox is from https://stackoverflow.com/questions/61371579/ref-is-strangely-turning-null-in-react   
setting state on line 67 causes the ref to become magically null on line 68.  



<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:
https://codesandbox.io/s/reverent-http-khjj0?file=/src/App.js
<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
Setting refs to null after setting state should not happen.  This is a huge bug. "
,,,https://github.com/facebook/react/issues/22869,22869,"Bug:在联通4g或wifi网络环境下,引用在线cdn报错","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,5,2021-12-05T13:24:51Z,2022-04-06T06:17:36Z,2021-12-07T18:32:16Z,NONE,completed,wangjia0525,"
<script crossorigin src=""https://unpkg.com/react@17.0.2/umd/react.production.min.js""></script>
<script crossorigin src=""https://unpkg.com/react-dom@17.0.2/umd/react-dom.production.min.js""></script>
引用这两个资源在联通4g或wifi网络环境下,引用react和react-dom报错




<img width=""779"" alt=""023059F6-585C-47D0-A095-072A6829C4C5"" src=""https://user-images.githubusercontent.com/29113575/144748521-465243b7-4895-48a0-a377-6e055f4c301e.png"">

"
,,,https://github.com/facebook/react/issues/22849,22849,"Bug: Clicking button type=""button"" submits form","[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,False,,9,2021-12-01T21:56:24Z,2021-12-07T12:45:53Z,2021-12-07T12:45:53Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: tested in `16.13.1`, `17.0.2`, and `18.0.0-beta-a65ceef37-20211130`

## Steps To Reproduce

1. Click a button `type=button`
2. Cause a rerender where that same DOM button will be converted into a button `type=submit`
3. Observe that any form linked to the submit button is submitted, even though the submit button was never clicked

Adding a `key` to force a remount circumvents the issue, but it still seems very unexpected.

## Example component

```
const App = () => {
  const [showForm, setShowForm] = React.useState(false);

  if (showForm) {
    return (
      <div>
        <div>
          <form
            id=""form""
            onSubmit={(e) => {
              e.preventDefault();
              console.log(""form submitted"");
            }}
          >
            <p>
              Why was this form submitted? It didn't even exist when the ""Show
              form"" button was clicked.
            </p>
          </form>
        </div>

        <button
          form=""form""
          type=""submit""
          onClick={() => console.log(""submit clicked"")}
        >
          Submit
        </button>
      </div>
    );
  }

  return (
    <div>
      <div></div>
      <button type=""button"" onClick={() => setShowForm(true)}>
        Show form
      </button>
    </div>
  );
};
```


## Live examples
- [Example 1](https://codepen.io/tamlyn/pen/qBPEvLr) - the form is submitted even though it doesn't exist in the DOM at the time of the click
- [Example 2](https://codepen.io/tamlyn/pen/vYeEJRb) - simpler example where wrong form is submitted

"
,,,https://github.com/facebook/react/issues/23035,23035,"[DevTools Bug] Cannot add node ""1"" because a node with that id is already in the Store.","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,13,2021-12-27T20:33:10Z,2022-01-12T13:48:41Z,2022-01-12T13:48:32Z,NONE,completed,,"### Website or app

It's empty project creating with 'react-native init'

### Repro steps

1. Start rn app in debug mode

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-core

### DevTools version (automated)

4.14.0-d0ec283819

### Error message (automated)

Cannot add node ""1"" because a node with that id is already in the Store.

### Error call stack (automated)

```text
at /Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:48:140545
    at c.emit (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:48:89515)
    at /Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:48:90986
    at /Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:48:347787
    at Array.forEach (<anonymous>)
    at S.Gc.e.onmessage (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:48:347771)
    at S.n (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:40:3009)
    at S.emit (events.js:315:20)
    at e.exports.P (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:8:9318)
    at e.exports.emit (events.js:315:20)
    at e.exports.dataMessage (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:8:15409)
    at e.exports.getData (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:8:14651)
    at e.exports.startLoop (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:8:12066)
    at e.exports._write (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:8:11421)
    at doWrite (_stream_writable.js:403:12)
    at writeOrBuffer (_stream_writable.js:387:5)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot add node  because a node with that id is already in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
,,,https://github.com/facebook/react/issues/23011,23011,[DevTools Bug]: ,"[{""id"":71502270,""node_id"":""MDU6TGFiZWw3MTUwMjI3MA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure"",""name"":""Component: Build Infrastructure"",""color"":""f9d0c4"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,5,2021-12-21T17:47:18Z,2021-12-21T18:57:17Z,2021-12-21T18:57:17Z,NONE,completed,,"### Website or app

react-devtools-extension

### Repro steps

$ yarn build-for-devtools
yarn run v1.22.17
$ cross-env RELEASE_CHANNEL=experimental yarn build react/index,react-dom,react-is,react-debug-tools,scheduler,react-test-renderer,react-refresh --type=NODE
$ node ./scripts/rollup/build.js react/index,react-dom,react-is,react-debug-tools,scheduler,react-test-renderer,react-refresh --type=NODE
node:internal/modules/cjs/loader:936
  throw err;
  ^

Error: Cannot find module 'rollup'
Require stack:
- /sda1/git/react/scripts/rollup/build.js
    at Function.Module._resolveFilename (node:internal/modules/cjs/loader:933:15)
    at Function.Module._load (node:internal/modules/cjs/loader:778:27)
    at Module.require (node:internal/modules/cjs/loader:1005:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at Object.<anonymous> (/sda1/git/react/scripts/rollup/build.js:3:16)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [ '/sda1/git/react/scripts/rollup/build.js' ]
}
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.


### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
,,,https://github.com/facebook/react/issues/22894,22894,Bug: onChange not working with custom elements,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,0,2021-12-09T13:23:16Z,2021-12-09T13:28:06Z,2021-12-09T13:28:06Z,NONE,completed,,title says it all!
,,,https://github.com/facebook/react/issues/23083,23083,Adding the Warning when defaultValue = {Symbol | Function},[],closed,False,,2,2022-01-09T02:15:00Z,2022-04-29T17:14:49Z,2022-04-29T17:14:48Z,NONE,completed,,"Hi, React Core Team, @gaearon  , @bvaughn , @philipp-spiess. New to open source community. I've been go through the issue #11734 and found out that there's no warning when defaultValue = {Symbol | Function}. I did see some TODOs in ReactDOMInput-test.js and I would like to help.

I tried to add up toErrorDev(""Invalid value for prop `defaultValue`"") matcher in ReactDOMInput-test.js and got the result of ""Expected warning was not recorded"". I went to study the /fixtures/dom/src/toWarnDev.js file and find out the argument might not match the condition set in line 125 - 139. But I'm stuck in the understanding of util.format(format, ...args) in line 97, it seems to be a string formatting function to me. 

Am I in the right direction to fix the issue? I'm looking forward to your reply, thanks for your time. 

![image](https://user-images.githubusercontent.com/83269073/148666556-17e6d382-dfda-486c-a444-c65d1ff9431d.png)
This is the warning that I mentioned."
,,,https://github.com/facebook/react/issues/23128,23128,beforeunload event not firing in ReactJS but working in standard javascript.,[],closed,False,,2,2022-01-17T11:23:29Z,2022-01-25T04:08:36Z,2022-01-19T18:09:34Z,NONE,completed,,"OS: 5.14.21-2-MANJARO, Windows7
Browser: Firefox 95.0.2, Brave Version 1.33.106 Chromium: 96.0.4664.110, and Gnome Web 41.3
React: 17.0.2, 15.5.4

Codebase: https://github.com/azat-co/react-quickly/tree/master/ch05/note

Can replace react.js and react-dom.js with respective versions for 17.0.2 in the note/js folder for the codebase url.

After running the program, there are no errors. However, changing tabs or closing the tab does not launch a confirmation dialog.

This **[article](https://www.igvita.com/2015/11/20/dont-lose-user-and-app-state-use-page-visibility/)** suggests using event **visibilityState** for displaying the confirmation dialog.

After modifying **note.jsx** receive a confirmation dialog when switching tab however, the page running the application loses focus and the clicked tab gets focus. The application page should not lose focus. Still able to close tab running application:

```
class Note extends React.Component {
    confirmLeave(e) {
      let confirmationMessage = 'Do you really want to close?'
      //e.returnValue = confirmationMessage     // Gecko, Trident, Chrome 34+
      //e.returnValue = confirm(confirmationMessage)     // Gecko, Trident, Chrome 34+
      //return confirmationMessage              // Gecko, WebKit, Chrome <34
      if (window.confirm(confirmationMessage)) {
        e.returnValue = confirmationMessage
      } else {
        e.preventDefault();
      }
      return confirmationMessage
  }
    componentDidMount() {
      console.log('Attaching confirmLeave event listener for beforeunload')
      this.props.document.addEventListener('visibilitychange', this.confirmLeave)
      window.addEventListener('beforeunload', this.confirmLeave)
    }
    componentWillUnmount() {
      console.log('Removing confirmLeave event listener for beforeunload')
      this.props.document.removeEventListener('visibilitychange', this.confirmLeave)
      window.removeEventListener('beforeunload', this.confirmLeave)
    }
    render() {
      console.log('Render')
      return <div>Here will be our input field for notes 
        (parent will remove in {this.props.secondsLeft} seconds)</div>
    }
  }
```

The following javascript code works as required to prevent tab from being closed or switched:
```<!DOCTYPE html>
<html>
<body>
	<h1>Demo: confirm()</h1>
	<p id=""msg""></p>
	
	<script>
		 var userPreference;

		if (window.confirm(""Do you want to save changes?"") == true) {
			userPreference = ""Data saved successfully!"";
		} else {
			userPreference = ""Save Canceled!"";
		}

		document.getElementById(""msg"").innerHTML = userPreference; 

    </script>
</body>
</html>```



"
,,,https://github.com/facebook/react/issues/23122,23122,React 18,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,False,,0,2022-01-16T13:34:40Z,2022-01-16T14:52:29Z,2022-01-16T14:52:29Z,NONE,completed,,"<!--
  Ask a question or share feedback about the React 18 release here.
-->"
,,,https://github.com/facebook/react/issues/23155,23155,[DevTools Bug]: Different results in chrome and firefox,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,3,2022-01-20T18:17:36Z,2022-01-21T10:33:41Z,2022-01-20T20:37:45Z,NONE,completed,,"### Website or app

https://www.youtube.com/, https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox,https://docs.github.com/en

### Repro steps

I was using the YouTube website. I have a habit of checking if the website i have visited was using react or not. As always I checked for YouTube website too. But the react developer tools extension was showing the youtube website is using react. 

Just to make sure it was right I have installed the firefox browser then installed the react developer tools extension and opened the youtube website, But in firefox, the extension was saying the youtube is not using react. 

For confirming with other websites, I have visited mdn and GitHub docs in both chrome and firefox. The chrome react developer tools extension says that the mdn is using react and the firefox react developer tools extension says that the mdn is not using react. For the GitHub docs website, the chrome extension says that the GitHub docs website was using the react whereas the firefox react developer tools extension shows that the Github docs website doesn't use the react. 

I am attaching the screen recording. To differentiate what websites I have visited in chrome and firefox I previously opened the websites in chrome and showed the results, for firefox I have typed the query and showed the results. Can you tell why it was happening like this?


https://user-images.githubusercontent.com/59245935/150397327-1cae5d73-0e63-4a32-b54b-5aa3da522db4.mov



Repro steps
1. Login to the website
2. Scrolling  the website
3. Noticed the bug 

Versions:

Chrome: 97.0.4692.99
Firefox: 96.0.2
React Developer Tools:4.22.0


### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
,,,https://github.com/facebook/react/issues/23123,23123,React 18,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,False,,0,2022-01-16T14:39:30Z,2022-01-16T14:52:32Z,2022-01-16T14:52:32Z,NONE,completed,,"<!--
  Ask a question or share feedback about the React 18 release here.
-->"
,,,https://github.com/facebook/react/issues/23093,23093,Bug: react-test-renderer: promise returned from `findByProps` query must be handled,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2022-01-11T11:01:34Z,2022-01-11T17:07:52Z,2022-01-11T17:07:51Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React (and react-test-renderer) version: 17.0.2
Eslint version: 8.6.0

## Steps To Reproduce

1. create a `ReactTestInstance` using `create` from `react-test-renderer`
2. Try to run access `findByProps` of the root of `ReactTestInstance`
3. Eslint(`testing-library/await-async-query`) will show an error 

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

code example:
```jsx
// simulate nav toggle click event
create(<Nav onToggle={mockFunction} items={[]}></Nav>)
  .root.findByProps({
    className: ""app__nav-toggler"",
  })
  .props.onClick();
```

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior

Eslint(testing-library/await-async-query) will show an error:

<img width=""416"" alt=""Screenshot 2022-01-11 at 11 57 52"" src=""https://user-images.githubusercontent.com/11424820/148930814-dd143b6b-60b4-4690-b633-da17b0f33780.png"">
<img width=""642"" alt=""Screenshot 2022-01-11 at 12 00 31"" src=""https://user-images.githubusercontent.com/11424820/148930866-c6898b22-fb56-415b-bb52-237040e6ad13.png"">

## The expected behavior
Since the return type of `findByProps` is not actually a promise, the error should not appear. `findByProps` appears to be synchronous.
"
,,,https://github.com/facebook/react/issues/23274,23274,"React app works as intended in development mode, but in production mode has another behaviour. ","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,0,2022-02-10T20:51:24Z,2022-02-11T14:25:14Z,2022-02-11T14:25:14Z,NONE,completed,," I made a simple React App as a beginner. My application worked fine on development mode, but after building it ... I saw that it does not work as it worked in development. I am very confuse because of that. There are no errors or warnings anywhere. 

Type of app: Tic-Tac-Toe.

##Behavior
Behavior in development: the app works, buttons on click shows 'X' or 'O' as expected.
Behavior in production: app it's compiled fine. UI shows up, but buttons on click do nothing.

My thinking is that if a part of code runs in a way in development it should runs the same thing also in production. I'm just confuse why both of them does not run in the same way. 

You can test the application in both development and production to see the difference. 

React version: 17.0.2

## Steps To Reproduce

1.Test the app in development mode to see that everything works properly. All the buttons work fine.
2.Test the app in production build to see that has an unexpected behavior and buttons don't do anything.

##Link
Link to my repo with the logical parts of my code there: 

  https://github.com/RaduHero/Tic-Tac-Toe-React-version-/blob/main/src/app.jsx 

If there is a misunderstanding on my part about how React works, I really apologize again! I'm trying to be useful to the community. Thank you very much and have a nice day! "
,,,https://github.com/facebook/react/issues/23238,23238,Bug: React cancels pointer event in certain cases?,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,4,2022-02-07T02:27:59Z,2022-02-07T21:33:54Z,2022-02-07T21:20:31Z,NONE,completed,,"When I call a useReducer dispatch function, subsequent events seem to be suppressed....but ONLY if the dispatch function results in a state change AND the event that triggered the dispatch function is a functional component (as opposed to a div (or nested div) in the top level App component).

e.g. this sandbox: https://codesandbox.io/s/pointerdown-prevent-default-react-forked-vwwgy?file=/src/index.js

When I touch an element, I expect to see both pointerdown and pointerenter fired. If you interact with the rendered sandbox in touch screen mode, you can see that this is true for all of the elements except for the ""Component div with state change"" element. For that element, the pointerenter event is fired (which calls the dispatch function) but pointerdown is never fired. (If you interact with a mouse instead of touch, everything behaves as expected.)

<details><summary>Code from the sandbox:</summary>

## JSX
```javascript
import ""./styles.css"";
import React from ""react"";
import ReactDOM from ""react-dom"";

export default function App() {
  function handlePointerDown(e) {
    console.log(`pointer down`);
    e.target.releasePointerCapture(e.pointerId);
  }

  function handlePointerEnterStateChange(e) {
    e.preventDefault();
    console.log(`pointer enter`);
    dispatch({ type: ""state-change"" });
  }

  function handlePointerEnterNoStateChange(e) {
    e.preventDefault();
    console.log(`pointer enter`);
    dispatch({ type: ""no-state-change"" });
  }

  function init(initialCount) {
    return { count: initialCount };
  }

  // the reducer (the first argument to useReducer)
  function reducer(state, action) {
    switch (action.type) {
      case ""no-state-change"":
        return state;
      case ""state-change"":
        return { count: state.count + 1 };
      default:
        throw new Error();
    }
  }

  const [state, dispatch] = React.useReducer(reducer, 3, init);

  function ComponentNoStateChange() {
    return (
      <div
        className=""letter""
        key=""2""
        onPointerDown={(e) => handlePointerDown(e)}
        onPointerEnter={(e) => handlePointerEnterNoStateChange(e)}
      >
        Component div with no state change
      </div>
    );
  }

  function ComponentStateChange() {
    return (
      <div
        className=""letter""
        key=""3""
        onPointerDown={(e) => handlePointerDown(e)}
        onPointerEnter={(e) => handlePointerEnterStateChange(e)}
      >
        Component div with state change
      </div>
    );
  }
  console.log(""render app"");
  return (
    <div className=""App"">
      <div
        className=""letter""
        key=""1""
        onPointerDown={(e) => handlePointerDown(e)}
        onPointerEnter={(e) => handlePointerEnterNoStateChange(e)}
      >
        Regular div no state change
      </div>
      <div
        className=""letter""
        key=""4""
        onPointerDown={(e) => handlePointerDown(e)}
        onPointerEnter={(e) => handlePointerEnterStateChange(e)}
      >
        Regular div state change
      </div>

      <ComponentNoStateChange />
      <ComponentStateChange />
      <div>
        <div
          className=""letter""
          key=""5""
          onPointerDown={(e) => handlePointerDown(e)}
          onPointerEnter={(e) => handlePointerEnterNoStateChange(e)}
        >
          Regular nested div no state change
        </div>
        <div
          className=""letter""
          key=""6""
          onPointerDown={(e) => handlePointerDown(e)}
          onPointerEnter={(e) => handlePointerEnterStateChange(e)}
        >
          Regular nested div state change
        </div>
      </div>
    </div>
  );
}

const rootElement = document.getElementById(""root"");
ReactDOM.render(<App />, rootElement);
```

## CSS
```css
.App {
  display: flex;
  flex-direction: column;
  background-color: lightblue;
}

.letter {
  touch-action: none;
  /*   pointer-events: all; */
  border: 1px solid lightgray;
  border-radius: 5px;
  background-color: lightgray;
  padding: 10px;
  font-family: ""Gill Sans"", ""Gill Sans MT"", Calibri, ""Trebuchet MS"", sans-serif;
  font-weight: bold;
}
```

## HTML
```html
<!DOCTYPE html>
<html lang=""en"">
  <head>
    <meta charset=""utf-8"" />
    <meta
      name=""viewport""
      content=""width=device-width, initial-scale=1, shrink-to-fit=no""
    />
    <title>Test pointer dispatch</title>
  </head>

  <body>
    <noscript>
      You need to enable JavaScript to run this app.
    </noscript>
    <div id=""root""></div>
 
  </body>
</html>
```

</details>

React version: 17.0.2 and 16.10.2

## Steps To Reproduce

1. Go to https://codesandbox.io/s/pointerdown-prevent-default-react-forked-vwwgy?file=/src/index.js or copy the code
2. In touch mode, click on the ""Component div with state change"" element. Observe that pointerenter fires but not pointerdown.

Link to code example: https://codesandbox.io/s/pointerdown-prevent-default-react-forked-vwwgy?file=/src/index.js


## The current behavior

When I touch an element that is a functional component and the pointerenter event handler calls a useReducer dispatch function that results in a state change, the pointerdown event, which I expect to fire along with the pointerenter event, does not fire. If I interact with a mouse instead of touch, it works as expected. If I change the functional component to be a div (or nested div) in the top level App component, it works as expected. If I change the dispatch function to return the same state, it works as expected.

You can observe this in the linked codesandbox. If you use touch mode and interact with the ""Component div with state change"" element, pointerenter is fired but not pointerdown. If you interact with the other elements or you interact with mouse instead of touch, you see both pointerdown and pointerenter fire.

## The expected behavior

When I touch an element, I expect to see both pointerdown and pointerenter fired.
"
,,,https://github.com/facebook/react/issues/23284,23284,Bug: using useEffect makes the function get the initital state even though I change the state by useState hook,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,4,2022-02-13T01:04:04Z,2022-02-14T01:44:01Z,2022-02-14T01:44:01Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 17.0.2

## Steps To Reproduce

1.define a functin component or jsx obj, I call it 'obj' in the following steps;
2.define a state called status, and to useEffect to listen the status change, set a callback in the effect;
3.the callback is try to set the obj value into a new state called newObj;
4.render newObj in the page;

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:
<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->
[demo.txt](https://github.com/facebook/react/files/8055608/demo.txt)


## The current behavior
1.the page show count: 0;
2.click the button--changeCount, and count++, then click the getCount--innner, console.log is printing the initial value of count, this shouldn't happen;
3.click the button-getCount-outside, console.log is printing current value of count, this is correct;
4.use the useCallBack hook to wrap the function named showCount, click the getCount--innner, console.log is still printing the initial value of count, this shouldn't happen;

I want to know why the count is not change. In order to get the current count, I must click the button--changeStatus or set the count into useEffect's deps, these behaviors try to make useEffect to refresh. I want to look for some help for this question. Thanks!
"
,,,https://github.com/facebook/react/issues/23374,23374,Bug: CustomError: Cannot find module react/jsx-runtime,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,False,,2,2022-02-26T18:40:05Z,2022-02-28T11:02:28Z,2022-02-28T11:02:24Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 17.0.2

## Steps To Reproduce

Not sure

## The current behavior 
CustomError: Cannot find module react/jsx-runtime

## The expected behavior
No Error

I switch from common js to esm & after done that I am getting this error.
I added `.js` & here is my `tsconfig`

```
""target"": ""es5"",
""module"": ""es2020"",
""lib"": [""dom"", ""dom.iterable"", ""esnext""],
""jsx"": ""react-jsx"",
""moduleResolution"": ""node"",
""allowJs"": true,
""checkJs"": true,
""noImplicitAny"": true,
""noImplicitReturns"": true,
""strictNullChecks"": true,
""strictFunctionTypes"": true,
""noUnusedLocals"": true,
""noUnusedParameters"": true,
""removeComments"": true,
""strict"": true,
""noFallthroughCasesInSwitch"": true,
""allowSyntheticDefaultImports"": true,
""esModuleInterop"": true,
""skipLibCheck"": true,
""forceConsistentCasingInFileNames"": true,
""resolveJsonModule"": true,
""isolatedModules"": true,
""importHelpers"": true
```
"
,,,https://github.com/facebook/react/issues/24170,24170,[React DevTools] Component Stacks for Timeline Profiler,"[{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,1,2022-03-25T22:21:08Z,2022-06-28T21:15:24Z,2022-06-28T21:15:24Z,CONTRIBUTOR,completed,blakef,"In the Timeline Profiler, we currently denote each state update with a dot. If you hover on the state update, you get some information about it, such as which component caused the update, the lane the update was rendered at, and the time that the update happened. This is useful for unique components. However, for components (ex. library components) that are used in multiple places, just having the component name is less helpful. 

It would be most useful to get a stack of component owners (like in the rendered by section in the Components tab). However, we only have owner metadata in DEV mode, and it usually only makes sense to profile in production. The next best thing we can do, then, is to get all the parent components and create a stack out of that (ie the return path of the fiber rather than the owner path). 

<img width=""1209"" alt=""image"" src=""https://user-images.githubusercontent.com/2735514/160208568-771861d3-59a3-4a82-9719-c8f5663ee574.png"">

We want to add component stacks so that we also know which parent(s) caused the update. For this task, a potential solution is:
* [ ] When a state update happens, walk the fiber's return path and save all the component names and their source. (See `markStateUpdateScheduled` for code pointers on where to put this)
* [ ] After we're done profiling, process the stack so that we create a stack of return fibers
* [ ] Pass the stack to the DevTools front end and add the component stacks to the UI when a user hovers over a state update"
,,,https://github.com/facebook/react/issues/24155,24155,React 18 - infinite loop and function as child issue with transition and suspense with useMemo,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,False,,9,2022-03-24T15:33:16Z,2022-03-24T20:45:21Z,2022-03-24T20:07:26Z,NONE,completed,,"I've turned off strict mode, and tried to create a simple example that breaks in v18 rc3.

 I'm trying to use `useMemo` to detect when some state changes and create a new memoized promise. Another `useMemo` call detects when the promise changes and wraps it in a ""resource"" object. I am passing the resource down to a child. There are multiple suspense boundaries between where I am creating the ""resource"" and where I'm calling `.read()`. I expect this to load once with no errors, and when I click the button I expect a single transition. Instead, although the app loads I get this error `react-dom.development.js:86 Warning: Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function`. When I click the button, it then goes into an infinite loop. This is unexpected because `<App>` should not be suspending, only `<Child>`. I'm also not returning any components without calling them from what I can tell.

If I set the ""resource"" into state it works fine. This only seems to happen if I try to create the ""resource"" with `useMemo`.


Minimal reproduction case
```js
import {
  startTransition,
  Suspense,
  useRef,
  useEffect,
  useState,
  useMemo,
} from ""react"";
import logo from ""./logo.svg"";
import ""./App.css"";

function App() {
  const ref = useRef(0);
  const [validQueryParams, setValidQueryParams] = useState();

  const promise = useMemo(() => {
    console.log(""making promise that resolves in 3s"", ref.current);
    ref.current++;
    return new Promise((res) => {
      setTimeout(() => {
        console.log(validQueryParams);
        return res();
      }, 3000);
    });
  }, [validQueryParams]);

  const query = useMemo(() => {
    console.log(""wrapping promise in resource object"");
    return wrapPromise(promise);
  }, [promise]);

  useEffect(() => {
    console.log(""mount"");
    return () => console.log(""unmount"");
  }, []);

  console.log({ query });
  return (
    <>
      <Suspense fallback={() => <div>fallback</div>}>
        <Child query={query} />
        <button
          onClick={() => {
            startTransition(() => {
              setValidQueryParams(Math.random());
            });
          }}
        >
          Start transition
        </button>
      </Suspense>
    </>
  );
}

function Child({ query }) {
  if (!query) return null;
  return (
    <Suspense fallback={() => <div>fallback</div>}>
      <div>{JSON.stringify(query.read())}</div>
    </Suspense>
  );
}

export default App;

export function wrapPromise(promise) {
  let status = ""pending"";
  let result;
  const suspender = promise.then(
    (r) => {
      status = ""success"";
      result = r;
    },
    (e) => {
      status = ""error"";
      result = e;
    }
  );
  return {
    read() {
      if (status === ""pending"") {
        throw suspender;
      } else if (status === ""error"") {
        throw result;
      } else if (status === ""success"") {
        return result;
      }
    },
  };
}

```"
,,,https://github.com/facebook/react/issues/24063,24063,Bug: Boolean Values is not updating while submitting the form  for the first time,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,7,2022-03-09T15:03:31Z,2022-09-07T10:53:43Z,2022-03-11T16:31:45Z,NONE,completed,,"

React version: 17.0.2
```javascript
import React,{useState} from 'react';
import './App.css';

function App() {
  const [email,setEmail]=useState("""");
  const [password,setPassword]=useState("""");
  const [emailErr,setEmailErr]=useState(false);
  const [passwordErr,setPasswordErr]=useState(false);

  const loginSubmit=(e)=>{
        e.preventDefault();
                if(email.length<5){
                  setEmailErr(true);
                }else{
                  setEmailErr(false);
                }
                console.log('this is email: ' + email);
                console.log('this is emailErr: ' + emailErr);
                if(password.length<5){
                  setPasswordErr(true)
                }else{
                  setPasswordErr(false);
                }
                console.log('this is password: ' + password);
                console.log('this is passwordErr: ' + passwordErr);
  }
  return (
    <div className=""App"">
      <form onSubmit={(e)=>loginSubmit(e)}>
     <div>Email</div>
     <input type='text' value={email} onChange={(event)=>setEmail(event.target.value)} />
     <div>Password</div>
     <input type='text' value={password} onChange={(event)=>setPassword(event.target.value)}/>
     <button type='submit'>Submit</button> 
      </form>
    </div>
  );
}

export default App;

```
## Steps To Reproduce

1.In above code when you  click on submit button for the first time , the emailErr and passwordErr values are not updating even the code is logically correct 

## The current behavior
emailErr and passwordErr values are not updating

## The expected behavior
 emailErr and passwordErr values should be updated  (emailErr and passwordErr should be true)
"
,,,https://github.com/facebook/react/issues/24208,24208,React 18 - typescript gives an error when reproducing official Upgrade Guide,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,False,,3,2022-03-30T06:30:40Z,2022-04-05T09:43:14Z,2022-03-30T07:08:29Z,NONE,completed,,"<img width=""1224"" alt=""image"" src=""https://user-images.githubusercontent.com/6984143/160765911-c2c7704c-c4d6-4f2b-a6a8-6f36ef0bbfac.png"">

Looks like a type mismatch when recreating switch from `render` to `createRoot` way with typescript code base"
,,,https://github.com/facebook/react/issues/24039,24039,Props UI is not showing on right panel,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,8,2022-03-08T06:54:37Z,2022-03-11T04:28:35Z,2022-03-11T01:35:53Z,NONE,completed,Shyam268,I see the props UI is helpful to know the change in property on each commit in a **profile** tab. but i don't see the props UI on right panel. i am using react version 17+.is there any reason why this is not shown.?
,,,https://github.com/facebook/react/issues/23496,23496,Bug: 做技术就做技术，非要出来站队，NMSL,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,12,2022-03-03T09:40:54Z,2022-07-03T17:07:29Z,2022-07-03T17:07:28Z,NONE,not_planned,,"# 俄罗斯加油！俄罗斯加油！俄罗斯加油！
# 俄罗斯加油！俄罗斯加油！俄罗斯加油！
# 俄罗斯加油！俄罗斯加油！俄罗斯加油！
# 俄罗斯加油！俄罗斯加油！俄罗斯加油！
# 俄罗斯加油！俄罗斯加油！俄罗斯加油！"
,,,https://github.com/facebook/react/issues/24142,24142,"[DevTools Bug] Unsupported Bridge operation ""0""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,13,2022-03-22T06:19:18Z,2022-03-24T13:07:47Z,2022-03-23T21:05:20Z,NONE,completed,bvaughn,"### Website or app

React Native Init App

### Repro steps

Just run the React-DevTools and then forward to port 8087 to debug in real device


### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-core

### DevTools version (automated)

4.24.1-ac574d688

### Error message (automated)

Unsupported Bridge operation ""0""

### Error call stack (automated)

```text
at /Users/tb921t/.npm-global/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:335334
    at f.emit (/Users/tb921t/.npm-global/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:278775)
    at /Users/tb921t/.npm-global/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:280316
    at /Users/tb921t/.npm-global/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:664831
    at Array.forEach (<anonymous>)
    at A.Zh.e.onmessage (/Users/tb921t/.npm-global/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:664815)
    at A.t (/Users/tb921t/.npm-global/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:39:2836)
    at A.emit (events.js:315:20)
    at e.exports.L (/Users/tb921t/.npm-global/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:3:58322)
    at e.exports.emit (events.js:315:20)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Unsupported Bridge operation  in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
,,,https://github.com/facebook/react/issues/24467,24467,"Bug: Page renders twice when use ""ReactDOM.createRoot"" in the index.tsx in React 18","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,False,,4,2022-04-29T12:36:52Z,2022-05-01T10:00:46Z,2022-04-29T13:39:21Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:18.1.0

## Steps To Reproduce

1. create-react-app test-render --template typescript
2. go to  src/App.tsx write useEffect( ) in the function before return, such as ""console.log('app') "" in the callback
3. npm run start
4. checkout the console, you will find this function runs two times
5. if I use the React 17 ,there will be only once print

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:
https://github.com/voiceu-zuixin/react18-test-render

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior

![image](https://user-images.githubusercontent.com/77840482/165945523-d206aa39-9a09-4a75-8827-c399892ea0e4.png)


## The expected behavior
![image](https://user-images.githubusercontent.com/77840482/165945482-4c956b6f-7f88-4fae-8188-5836d7cee08a.png)
"
,,,https://github.com/facebook/react/issues/24432,24432,[DevTools Bug]: Type '{}' is not assignable to type 'ReactNode',"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,False,,1,2022-04-24T23:07:53Z,2022-04-25T05:47:44Z,2022-04-25T05:47:35Z,NONE,completed,,"### Website or app

https://github.com/devnautas/happy-app

### Repro steps

Creating a custom component with styled-components

![image](https://user-images.githubusercontent.com/71651661/165000428-8eded19a-8a61-4078-8ec7-da6c98f54b75.png)


### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

dwdw

### Error message (automated)

Type '{}' is not assignable to type 'ReactNode'.

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
,,,https://github.com/facebook/react/issues/24347,24347,Compatible issue about createRoot between 17 & 18,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,6,2022-04-12T07:49:32Z,2022-04-14T15:27:46Z,2022-04-14T15:27:46Z,CONTRIBUTOR,completed,,"Hi,
Our component lib [Ant Design](https://ant.design/components/modal/#components-modal-demo-confirm) modal component provides static function to simplify developer code logic. It use `ReactDOM.render` for tmp content render and destroy when modal closed.

For React 18, we want to use `createRoot` to avoid render warning:

> Warning: ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot

But `createRoot` comes from `react-dom/client` module which not exist in prev version which will throw warning by webpack.

And use `createRoot` from `react-dom` will also throw warning to tell to import from `react-dom/client`.

Seems no way to hide the realize detail to the upper user."
,,,https://github.com/facebook/react/issues/24379,24379,Facebook,[],closed,False,,0,2022-04-14T16:55:28Z,2022-04-14T16:58:35Z,2022-04-14T16:58:35Z,NONE,completed,,"https://www.facebook.com/profile.php?id=100016695042794

_Originally posted by @MrAugMyo in https://github.com/facebook/facebook-android-sdk/issues/1061#issuecomment-1099403015_"
,,,https://github.com/facebook/react/issues/24243,24243,Bug: After upgrade to React 18,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,False,,1,2022-04-01T12:51:43Z,2022-04-05T02:19:08Z,2022-04-05T02:19:08Z,NONE,completed,ctsvenkat,"Hi 

I upgraded React from 17.2.0 to React 18 Rc0 vserion after that I am betting below error, I could not understand why this happening and I am new react as well.


Error is: export 'jsxDEV' (imported as '_jsxDEV') was not found in 'react/jsx-dev-runtime' (module has no exports)
Thanks in Advance.

"
,,,https://github.com/facebook/react/issues/24397,24397,when to use useCallback and useMemo,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,3,2022-04-19T11:42:41Z,2022-04-24T11:25:13Z,2022-04-24T11:25:13Z,NONE,completed,,"I am a fan of React/hooks. As the usage scenarios in business projects gradually increase, I find the useCallback/useMemo hooks are a bit annoying. Whenever I use components developed by others, when I need to pass function props, I will wrap it with useCallback first. But it might work fine without the wrapping.

This can be divided into two cases, one is to avoid unnecessary re-render, and the other is to ensure the correctness of the logic. For example, useEffect depends on the incoming function props. Using too many useCallback/useMemo will make the code look bloated, and if you don't use it, you may be worried about bugs.

I learned what some developers in the community think:

> MOST OF THE TIME YOU SHOULD NOT BOTHER OPTIMIZING UNNECESSARY RERENDERS. React is VERY fast and there are so many things I can think of for you to do with your time that would be better than optimizing things like this. from kent C. Dodds.

I would like to ask the community if there are any suggestions for using useCallback/useMemo. It can reduce the mental burden when writing code. For example, is it possible to agree that useCallback/useMemo is usually not needed in the code? If it needs to be used, the component should be clearly stated, such as adding comments to props and so on."
,,,https://github.com/facebook/react/issues/24370,24370,"[DevTools Bug] Cannot add child ""foo"" to parent ""bar"" because parent node was not found in the Store.","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,2,2022-04-13T19:42:01Z,2022-04-14T17:32:23Z,2022-04-14T17:32:22Z,NONE,completed,,"### Website or app

https://github.com/abybaddi009/react-bug-report

### Repro steps

Steps to reproduce:

1. Install all dependencies
2. Run the project with `npm start`
3. Navigate to http://localhost:3000/login
4. Enter any number into _phone number_ and click on **GET OTP**.
5. Enter any number into the text boxes and click on **SIGN IN**.
6. Allow access to location.
7. Check the Dev Tools for the error


### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.24.3-46a98cff2

### Error message (automated)

Cannot add child ""986"" to parent ""985"" because parent node was not found in the Store.

### Error call stack (automated)

```text
emit@moz-extension://33a37ecb-24c1-4ab5-9400-2d8a276f2472/build/main.js:24430:22
bridge_Bridge/this._wallUnlisten<@moz-extension://33a37ecb-24c1-4ab5-9400-2d8a276f2472/build/main.js:24599:14
listener@moz-extension://33a37ecb-24c1-4ab5-9400-2d8a276f2472/build/main.js:54423:41
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot add child  to parent  because parent node was not found in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
"
,,,https://github.com/facebook/react/issues/24374,24374,[Bug] Possible solution to: unstable_flushDiscreteUpdates,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2022-04-14T01:53:44Z,2022-05-19T00:37:21Z,2022-04-14T15:22:52Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->
This is the exact message: 
_Warning: unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering._

Being relatively new to ReactJS I've encountered this warning when I was using **focus** events, people say there is no problem on _production_ to. This comment offers a possible solution https://github.com/Availity/react-block-ui/issues/40#issuecomment-595438654 and so I reproduced his solution.

React version: 17.0.2

## Steps To Reproduce
Here I did the replicate of the bug on codesandbox
1. Click on the page, press F and watch the console.
2.Uncomment the useEffect on content.jsx, and repeat step 1.
![image](https://user-images.githubusercontent.com/65568682/163298830-4a69a9b8-743a-4445-b03f-700c556c0e40.png)

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://codesandbox.io/s/react-bug-unstable-flushdiscreteupdates-3bvmhl?file=/src/content.js

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## My opinion
Please, feel free to correct any of my comments from here.

I think this issue is happening because you are trying directly manipulate a component by external means[1], meanwhile that **Component** is unchanged during it's current life cycle since it was mounted.

[1] I initialized a function(event listener) outside the component i'm directly manipulating, in **App.js**, _useKeyboard()_

## My solution
For my case, I wrapped the specific function causing this issue with an **useEffect**, so that _.focus()_ is applied when the component is finally mounted.

"
,,,https://github.com/facebook/react/issues/24520,24520,Bug: ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,0,2022-05-09T10:35:16Z,2022-05-09T17:19:38Z,2022-05-09T17:19:38Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1.
2.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
"
,,,https://github.com/facebook/react/issues/24502,24502,"Bug: useEffect runs twice on component mount (StrictMode, NODE_ENV=development)","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,True,,41,2022-05-05T15:38:46Z,2022-06-23T03:42:45Z,2022-05-05T16:11:45Z,NONE,completed,,"React version: 18.0.x, 18.1.x, 18.2.x

## Steps To Reproduce

1. Visit provided sandbox
2. Open console and observe logs displayed twice.
3. Click the button and observe the rendering log happens twice, the effect log happens once.

Link to code example: https://codesandbox.io/s/react-18-use-effect-bug-iqn1fx

## The current behavior

The useEffect callback runs twice for initial render, probably because the component renders twice. After state change the component renders twice but the effect runs once.

## The expected behavior

I should not see different number of renders in dev and prod modes.

## Extras

The code to reproduce:

```jsx
import { useEffect, useReducer } from ""react"";
import ""./styles.css"";

export default function App() {
  const [enabled, toggle] = useReducer((x) => !x, false);

  useEffect(() => {
    console.log(
      ""You will see this log twice for dev mode, once after state change - double effect call""
    );
  }, [enabled]);

  console.log(""You will see this log twice for dev mode - double rendering"");

  return (
    <div className=""App"">
      <h1>Hello CodeSandbox</h1>
      <h2>Start editing to see some magic happen!</h2>
      <button onClick={() => toggle()}>
        Toggle me: {enabled ? ""on"" : ""off""}
      </button>
    </div>
  );
}

```
"
,,,https://github.com/facebook/react/issues/24528,24528,How to make a shareable widget with react 18 (plugin name should be static or shareable in some way)?,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,False,,2,2022-05-10T11:20:52Z,2022-05-10T13:18:55Z,2022-05-10T12:05:15Z,NONE,completed,,"I am developing a shareable widget with client as react 18 which can be called by using following approach:

OS : windows 10 64 bit
Node: 14.15.3
NPM: 6.14.9

When I try to run the npm run build command then I can see the following index.html page in build directory and there are some js, css plugins and images in the build directory.
```

<!doctype html><html lang=""en"">
    <head><meta charset=""utf-8""/>
    <link rel=""icon"" href=""/favicon.ico""/>
    <meta name=""viewport"" content=""width=device-width,initial-scale=1""/>
    <meta name=""theme-color"" content=""#000000""/>
    <meta name=""description"" content=""Web site created using create-react-app""/>
    <link rel=""apple-touch-icon"" href=""/logo192.png""/>
    <link rel=""manifest"" href=""/manifest.json""/>
    <title>React App</title>
    <script defer=""defer"" src=""/static/js/main.6134db66.js""></script>
    <link href=""/static/css/main.073c9b0a.css"" rel=""stylesheet"">
</head>
<body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id=""root"">        
    </div>
</body>
</html>
```
Now my main focus is on calling js, css and image resources if I develop the widget. My widget can be accessed through a js and css plugin including a div element.

Now see following URLs will be dynamically generated each time.

```
src=""/static/js/main.6134db66.js""
href=""/static/css/main.073c9b0a.css""
```
How would I give it to my customers/clients if name 'll be changed after each npm run build.

You can see my client application source below which is calling my widget.

 ```
<!DOCTYPE html>
    <html lang=""en"">
        <head>
            <meta charset=""UTF-8"" />
            <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"" />
            <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"" />
            <title>Document</title>
            <link href=""http://localhost:3000/static/css/main.073c9b0a.css"" rel=""stylesheet""></head>
            <script defer=""defer"" src=""http://localhost:3000/static/js/main.6134db66.js""></script>
        </head>
        <body>
            <div id=""root""></div>
        </body>
    </html>
```
I can place it on one of my server domain but how to keep the plug name same ? I am also curios about my widget images. Will my widget image work correctly or 'll I have do something more for it ?

Any help will be appreciated.

See my package.json

```
{
    ""name"": ""widget"",
    ""version"": ""0.1.0"",
    ""private"": true,   
    ""dependencies"": {
        ""@testing-library/jest-dom"": ""^5.16.3"",
        ""@testing-library/react"": ""^12.1.4"",
        ""@testing-library/user-event"": ""^13.5.0"",
        ""react"": ""^18.0.0"",
        ""react-dom"": ""^18.0.0"",
        ""react-scripts"": ""5.0.0"",
        ""web-vitals"": ""^2.1.4""
    },
    ""scripts"": {
        ""start"": ""react-scripts start"",
        ""build"": ""react-scripts build"",
        ""test"": ""react-scripts test"",
        ""eject"": ""react-scripts eject""
    },
    ""eslintConfig"": {
        ""extends"": [
            ""react-app"",
            ""react-app/jest""
        ]
    },
    ""browserslist"": {
        ""production"": [
            "">0.2%"",
            ""not dead"",
            ""not op_mini all""
        ],
        ""development"": [
            ""last 1 chrome version"",
            ""last 1 firefox version"",
            ""last 1 safari version""
        ]
    }
}

``````

As I am using react-18 so I can use multiple modes if there is some preferable approach

```
ReactDOMClient.createRoot(/*...*/);

ReactDOMClient.hydrateRoot(/*...*/);

or 
ReactDOMServer
```

I can't use IFrame so please refer/suggest something except it. I need to use a Div."
,,,https://github.com/facebook/react/issues/24627,24627,Bug: @types/react^18 useDeferredValue JSDoc outdated,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2022-05-27T01:03:22Z,2022-05-28T10:52:42Z,2022-05-28T10:52:42Z,NONE,not_planned,,"> Apologies in advance for potential wrong category of the issue, but the documentation issue seems to link to the `reactjs.org` repo which is even more unrelated to the actual problem.

<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: `^18.0.0` (`18.0.0`)

## The current behavior
https://github.com/DefinitelyTyped/DefinitelyTyped/blob/19b70b2c6cbd626b1f861d4eef0954b0bf3fa5a5/types/react/index.d.ts#L1119-L1121 currently still references
> Returns a deferred version of the value that may “lag behind” it for at most `timeoutMs`.

which is outdated due to the fact `timeoutMs` is [already removed](https://github.com/facebook/react/pull/19703).

## The expected behavior
It shows the correct documentation JSDoc as mentioned in [the official React documentation](https://17.reactjs.org/docs/concurrent-mode-reference.html#usedeferredvalue)
> Returns a deferred version of the value that may “lag behind” it.
"
,,,https://github.com/facebook/react/issues/24708,24708,Bug: Strict mode rendering twice causing the checkbox to deselect,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2022-06-11T09:16:55Z,2022-06-11T11:31:54Z,2022-06-11T11:31:54Z,NONE,completed,,"I am displaying checkboxes list and upon clicking checkbox, changing the value to opposite of previous value

React version: 18.1.0

## Steps To Reproduce

1. Open Stackblitz and try selecting checkboxes, checkboxes don't get selected

The issue is with this logic
```typescript
currentCategory.selected = !currentCategory.selected;
```
I check the previous value of checkbox and assign the opposite of it, in 2nd render this will deselect the selected checkbox

I can solve the problem by removing strict mode, but it is recommended to use strict mode, then how do I solve the problem?

Link to code example:
https://stackblitz.com/edit/react-ts-wks5wl?file=App.tsx

## The current behavior
Checkboxes get deselected after 2nd rendering

## The expected behavior
Checkboxes should be selected after 2nd rendering
"
,,,https://github.com/facebook/react/issues/24674,24674,[DevTools Bug]: Warning: Internal React error: Expected static flag was missing. Please notify the React team.,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,0,2022-06-05T03:26:15Z,2022-06-05T05:48:45Z,2022-06-05T05:48:45Z,NONE,not_planned,,"### Website or app

https://codepen.io/alejozarate/pen/zYRLKww

### Repro steps

The component is successfully rendered with all the interactions working properly.

As far as I can tell, the error is only shown in the console. The traceback point to the line 15 of the codepen:

const _ahr = await SContract.methods.rewardPerHour().call();

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
,,,https://github.com/facebook/react/issues/24721,24721,Bug: Script included multiple times on this page (Google maps API),"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2022-06-14T11:01:09Z,2022-06-17T09:44:49Z,2022-06-16T08:09:30Z,NONE,not_planned,,"Hi, 
I'm trying to update react-dom from 17 to the latest (18.1.0). I used [use-places-autocomplete](https://github.com/wellyshen/use-places-autocomplete) previously to autocomplete addresses on a form. Using this package also involves loading a script as follows:

```
const GOOGLE_MAPS_URL = `https://maps.googleapis.com/maps/api/js?key=${process.env.NEXT_PUBLIC_PLACES_API_KEY}&libraries=places&callback=initMap`
```

The script is then loaded in a useEffect:
```
  useEffect(() => {
    if (window.initMap) {
      load(GOOGLE_MAPS_URL, function (error) {
        if (error) {
          setIsError(true)
        }
      })
    }
  }, [])
```

And produces the following errors when visiting the page with the form:

> You have included the Google Maps JavaScript API multiple times on this page. This may cause unexpected errors.

> TypeError: Cannot read properties of undefined (reading 'Iv')

And the form field autocomplete now does not work. Does anyone know why this might be?

React version: ""18.1.0""

"
,,,https://github.com/facebook/react/issues/24804,24804,SSR performance optimization: cache or bind getters for writing chunks in `react-dom/server`,[],closed,False,,1,2022-06-28T08:21:44Z,2022-06-28T12:50:18Z,2022-06-28T12:50:18Z,NONE,completed,,"In both `renderToPipeableStream` and `renderToReadableStream`, it seems like the function signatures in `ReactServerStreamConfig*` cause a performance issue in JSC and V8:
```ts
export function writeChunk(
  destination: Destination,
  chunk: PrecomputedChunk | Chunk,
): void {
  destination.write(chunk);
}

export function writeChunkAndReturn(
  destination: Destination,
  chunk: PrecomputedChunk | Chunk,
): boolean {
  return !!destination.write(chunk);
}

export function completeWriting(destination: Destination) {
  destination.drain();
}

export function close(destination: Destination) {
  destination.end();
}

export function closeWithError(destination: Destination, error: mixed): void {
  // $FlowFixMe: This is an Error object or the destination accepts other types.
  destination.close(error);
}
```

Specifically, these functions are not being inlined due to getting the property:
- `destination.write`
- `destination.drain`
- `destination.end`

To fix this, instead of the signature being shaped like this:

https://github.com/facebook/react/blob/a4bed469697a1e23c398fe80228df31ef6d4b612/packages/react-server/src/forks/ReactServerStreamConfig.custom.js#L32-L38

It could be something like this:
```js
// Before:
export const writeChunk = $$$hostConfig.writeChunk;

// After:
export const getWriteChunk = (destination) => {
  // This returns a function
  return $$$$hostConfig.getWriteChunk(destination);
};

// A more real example:
export const getWriteChunk = (destination) => {
   var write = destination.write;
   return (chunk) => {
        return write.call(destination, chunk);
   };
};
```

This would mean that functions like `pushAttribute` would need to be re-created per `destination` (or at least, per unique `stringToChunk` function):

https://github.com/facebook/react/blob/a4bed469697a1e23c398fe80228df31ef6d4b612/packages/react-dom/src/server/ReactDOMServerFormatConfig.js#L549-L555

JSC profile (`operationGetById`)
<img width=""858"" alt=""image"" src=""https://user-images.githubusercontent.com/709451/176123622-31a2a59e-fb3d-44eb-8daa-ddde6b039bc7.png"">

Node.js 18 profile: (`Builtins_LoadIC`)
<img width=""687"" alt=""image"" src=""https://user-images.githubusercontent.com/709451/176123757-2205c053-f382-43e8-8ce0-8256585b80c8.png"">

This was run on the [fizz fixture](https://github.com/facebook/react/blob/a4bed469697a1e23c398fe80228df31ef6d4b612/fixtures/fizz)
"
,,,https://github.com/facebook/react/issues/24938,24938,Use of styled components ?,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,False,,1,2022-07-15T22:35:48Z,2022-07-16T07:43:51Z,2022-07-16T07:43:41Z,NONE,not_planned,,
,,,https://github.com/facebook/react/issues/24944,24944,"Bug: Initial render happens twice, causes NS_BINDING_ABORTED errors ","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2022-07-17T07:19:37Z,2022-07-19T17:18:22Z,2022-07-19T17:18:22Z,NONE,completed,,"React is rendering a component twice when it creates it (is my assumption). This results in `NS_BINDING_ABORTED` errors in Firefox if you're trying to render something like an image. The errors appear in the network log and seem benign, but they clog up the logs and it's not a good look.

You can verify the double render is happening by adding a `console.log` to the component. 

On the first render, Firefox starts fetching the resource. When the second render happens, I'm wondering if the DOM element is different, because Firefox is cancelling the fetch. If the DOM element is removed, Firefox has no reason to continue fetching the resource, so it cancels it. A more common scenario for `NS_BINDING_ABORTED` is navigating away from a page that's still loading.

I found by using `useEffect` and `useState` I can avoid the error by not trying to fetch the image when the component is initially created. Basically, once the component is ready, `useEffect` is called and stores the URL as state, and the `img` element uses the state as the `src`.

React version: 18.2

## Steps To Reproduce

1. Use latest Firefox
2. Open repro sandbox: https://codesandbox.io/s/loving-thompson-ixcf3l?file=/src/App.js
3. Open network devtool, click disable cache, set `Filter URLs` to `github` (the image is my github avatar)
4. Refresh the sandbox view
5. Notice two network entries where one has a NS_BINDING_ABORTED error
6. Uncomment line 16, refresh sandbox view
7. Check network tab, you should see a new non-cached fetch with no error

I rendered `Bad()` 3 times, switched to rendering `Good()`, and rendered 3 more times. Note the `initiator` column.
![image](https://user-images.githubusercontent.com/2302541/179388032-4b32272a-ff19-4e6d-9633-8e778ec089ad.png)

"
,,,https://github.com/facebook/react/issues/24923,24923,[Proposal/Discussion]: Opposite of `setError()`,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,False,,2,2022-07-13T19:40:42Z,2022-07-22T09:08:32Z,2022-07-22T09:08:26Z,NONE,not_planned,,"Currently, to remove previously set erros, one uses `setError(null)` or similar. This seems like a flawed design choice. I'd like to propose adding something to set the error state back to default. This could be done with `clearError()`, `resetError()`, `unsetError()`, or really lots of different things"
,,,https://github.com/facebook/react/issues/24996,24996,"[DevTools Bug]: ""open in editor"" not working for vscode remote files","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,False,,1,2022-07-27T06:25:25Z,2022-07-27T06:25:42Z,2022-07-27T06:25:42Z,NONE,completed,Linrstudio,"### Website or app

empty

### Repro steps

/data/home/xxxx/src/test.tsx

1. Inspect component
2. User clicks ""open in editor""
3. file not found

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_"
,,,https://github.com/facebook/react/issues/25141,25141,Please reopen issue,[],closed,False,,0,2022-08-25T11:31:55Z,2022-09-09T11:57:26Z,2022-09-09T11:57:26Z,NONE,completed,,"https://github.com/facebook/react/issues/12811 - this issue was marked as stale and closed, but it's still relevant. Please reopen. Thank you."
,,,https://github.com/facebook/react/issues/25061,25061,Bug: useState inside pure JavaScript/TypeScript class violates rules of hooks,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1249821345,""node_id"":""MDU6TGFiZWwxMjQ5ODIxMzQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules"",""name"":""Component: ESLint Rules"",""color"":""f7afdb"",""default"":false,""description"":""""}]",closed,False,,8,2022-08-07T23:29:51Z,2022-08-26T11:03:30Z,2022-08-26T11:03:30Z,NONE,not_planned,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 18.x

## Steps To Reproduce

1. use the following code in React project 
2. see a compilation error

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

```
class ThemeService {
  private _theme: any;
  private _setTheme: any;
  constructor() {
    const [theme, setTheme] = useState(""Red"");
    this._theme = theme;
    this._setTheme = setTheme;
  }

  get theme(): string {
    return this._theme;
  }

  ToggleTheme() {
    this._setTheme(this._theme === ""Red"" ? ""Blue"" : ""Red"");
  }
}

```

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
above usage generates the following compilation error

ERROR in [eslint] 
src/App.tsx
  Line 8:31:  React Hook ""useState"" cannot be called in a class component. React Hooks must be called in a React function component or a custom React Hook function

## The expected behavior
I understand that the class Component has diff state management so ""useState"" is not allowed inside the class-based react component but I am not sure why usage inside the pure class is restricted. 
"
,,,https://github.com/facebook/react/issues/25059,25059,realease all tags to object https://github.com/facebook/,[],closed,False,,0,2022-08-07T20:04:38Z,2022-08-09T12:55:25Z,2022-08-09T12:49:50Z,NONE,not_planned,,Realease now and update to Android 13
,,,https://github.com/facebook/react/issues/25047,25047,Bug: Functions in initial state keep executing when updating state,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,2,2022-08-05T06:53:11Z,2022-08-05T08:44:15Z,2022-08-05T08:44:15Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 18.0.0 / 18.1.0

## Steps To Reproduce

1. Create an state which calls a function for get initial state, add to this function a console.log()
2. Update the state with setState
3. You will see that this function is executing everytime that you update state
4. Happens with and without StrictMode, with plain states (like numbers, strings) and also with objects.
5. Also happens if you separate initialValue in a variable which calls a function and then use it inside state

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://codesandbox.io/s/charming-grothendieck-cg1ev0?file=/src/App.js
Open console and check console.logs

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
The function is executed as many times as the state is updated, this could be a performance problem for the application and it is annoying to debug some things.

## The expected behavior
The function should only be called when the state is initialized
"
,,,https://github.com/facebook/react/issues/25250,25250,Error,[],closed,False,,1,2022-09-13T13:30:14Z,2022-09-15T00:14:53Z,2022-09-15T00:14:53Z,NONE,not_planned,,https://github.com/fAndreuzzi/TUI-ConsoleLauncher/blob/master/settings.gradle
,,,https://github.com/facebook/react/issues/25263,25263,Bug: It seems that the concurrent mode does not work as expect,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,4,2022-09-14T09:54:58Z,2022-09-14T16:15:07Z,2022-09-14T14:37:09Z,NONE,completed,,"React version: 17.0.1

## Steps To Reproduce

Here I use a while loop to simulate a long task.When I click on the div, the animation stops

```jsx
import React from ""react"";
import ReactDOM from ""react-dom"";

const NumberComp = ({ count }) => {
  const start = new Date().getTime();
// Simulate time-consuming tasks
  while (new Date().getTime() - start < 1) {}
  return count;
};
const arr = [];
for (let i = 0; i < 1000; i++) {
  arr.push(i);
}
class Home extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0,
    };
  }

  render() {
    return (
      <>
        <div
          onClick={() => this.setState({ count: this.state.count + 1 })}
          className=""animation""
        >{`count：${this.state.count}`}</div>
        {arr.map((i) => (
          <NumberComp key={i} count={i} />
        ))}
      </>
    );
  }
}

ReactDOM.unstable_createRoot(document.getElementById(""root"")).render(<Home />);

```
the css
```css
.animation {
    display: block;
     width: 100px;
     height: 100px;
     background: lightyellow;
     animation: myfirst 5s;
     animation-iteration-count: infinite;
}
@keyframes myfirst {
   from {
        width: 30px;
        height: 30px;
        border-radius: 0;
  }
      to {
        width: 200px;
        height: 200px;
        border-radius: 50%;
      }
}
```

## The current behavior

When I click on the div, the animation stops.And the performance is as follows:

<img width=""1434"" alt=""image"" src=""https://user-images.githubusercontent.com/14917591/190122954-78a155ea-75fb-4bb3-9181-2c00c326706b.png"">

It seems that the concurrent mode does not work

## The expected behavior

Since it's concurrent mode, when I click on the div, the animation shouldn't stop and the page shouldn't freeze"
,,,https://github.com/facebook/react/issues/25245,25245,"I have issue  React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: object. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2022-09-12T18:35:07Z,2022-09-12T19:28:16Z,2022-09-12T19:28:16Z,NONE,completed,,"Plz help me to solve this 
### This is my feed.jsx file

import React,{useState,useEffect} from 'react';
import { useParams } from 'react-router-dom';


import { client } from '../client';
import { feedQuery, searchQuery } from '../utils/data';

import MasonryLayout from './MasonryLayout';
import Spinner from './Spinner';


const Feed = () => {
  const [pins, setPins] = useState();
  const [loading, setLoading] = useState(false);
  const { categoryId } = useParams();

  useEffect(() => {
    if (categoryId) {
      setLoading(true);
      const query = searchQuery(categoryId);
      client.fetch(query).then((data) => {
        setPins(data);
        setLoading(false);
      });
    } else {
      setLoading(true);

      client.fetch(feedQuery).then((data) => {
        setPins(data);
        setLoading(false);
      });
    }
  }, [categoryId]);

          

   if (loading) return <Spinner message=""We are adding new ideas to your feed!"" />

   return (
    <div>
    Feed
    </div>
   )
}

export default Feed


### This is MasonryLayout.jsx file 
import React from 'react';
import  Masonry from 'react-masonry-css';
import Pin from './Pin';

const breakpointObj = {
  default: 4,
  3000: 6,
  2000: 5,
  1200: 3,
  1000: 2,
  500: 1,
};

const MasonryLayout= ({ pins })=>  (
  
  <Masonry className=""flex animate-slide-fwd"" breakpointCols={breakpointObj}>
    {pins?.map((pin) => <Pin key={pin._id} pin={pin} className=""w-max"" />)}
  </Masonry>

  

);



export default  MasonryLayout;
###     When i put simply ""Feed"" in return in feed.jsx file it is okay but when i put 
**  {pins && 
        <MasonryLayout pins={pins} />
      }** 
### It show empty page

![Screenshot from 2022-09-12 21-46-09](https://user-images.githubusercontent.com/100952840/189730151-32dddfb9-0ce8-483d-8630-e9f8b20d7b
![Screenshot from 2022-09-12 21-47-06](https://user-images.githubusercontent.com/100952840/189730203-96e1ce96-80b5-460c-8908-6639b5ccd915.png)
03.png)


![Screenshot from 2022-09-12 21-46-09](https://user-images.githubusercontent.com/100952840/189730446-0d01f07d-0863-48e5-a368-2095c11a26d6.png)


"
,,,https://github.com/facebook/react/issues/25330,25330,Bug: Unexpected useState behavior on StrictMode,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,3,2022-09-27T12:22:57Z,2022-09-27T14:56:43Z,2022-09-27T12:30:09Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->
Not sure if this is a bug, but when using `StrictMode` whether it is for production/development build, the callback in a setState `setState(callback)` is correctly called once. But the next call to setState will trigger the callback twice using the example described below.

React version: 18.2.0

## Steps To Reproduce

1. Open https://codesandbox.io/s/recursing-firefly-gwcp3m?file=/src/App.js
2. Click ""Add"" counter will increment to 2
3. Click ""Add"" again, counter will increment to 5 (should be 3)

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://codesandbox.io/s/recursing-firefly-gwcp3m?file=/src/App.js

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
setState callback is called twice on the 2nd++ setState call

## The expected behavior
setState callback is called once on the 2nd++ setState call
"
,,,https://github.com/facebook/react/issues/25589,25589,Bug: Internal React error: Expected static flag was missing. Please notify the React team.,"[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2022-10-31T04:37:59Z,2022-10-31T08:06:51Z,2022-10-31T08:06:44Z,NONE,not_planned,,"After I upgraded the React version of the project from 16.14.0 to 18.2.0, the console reported the following warning after the project started

```
Warning: Internal React error: Expected static flag was missing. Please notify the React team.
```
![image](https://user-images.githubusercontent.com/52249626/198931381-bf4cb492-398d-480a-9d9b-a8576a1aa430.png)

I don't know the specific cause of the bug
"
,,,https://github.com/facebook/react/issues/25451,25451,Bug: Issue with absolute imports in react application,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,False,,5,2022-10-08T11:57:51Z,2022-10-08T13:48:05Z,2022-10-08T12:03:08Z,NONE,not_planned,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 18.2.0

There seems to be an issue with the way that absolute imports are being handled in react 18. Even with a properly configured `tsconfig.json`, some of the absolute imports works but some of them don't (see section The expected behavior). 
For example, I am able to do an absolute import on a type, but the demo crashes when I try to import a function the same way

I have opened this issue because I cannot figure out if the issue is coming from create-react-app or the react official repository.

I have created a reproducible demo available on this [link](https://github.com/Vikmanatus/reactjs-absolute-imports-issue)

## Steps To Reproduce

Clone the repository of this [link](https://github.com/Vikmanatus/reactjs-absolute-imports-issue) and please follow the next steps :

1. Run yarn install
2. Run yarn start

You will see the following error in your browser Module not found: Error: Can't resolve '@/utils'

I have written a small documentation on the README.md of the reproducible issue repo to add some important details

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

https://github.com/Vikmanatus/reactjs-absolute-imports-issue
<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior

An error is thrown saying that @/utils cannot be resolved

`Module not found: Error: Can't resolve '@/utils' in '/Users/someUser/Desktop/SomeFolder/reactjs-absolute-imports-issue/src'`

## The expected behavior

The import of the `makeId` function of this [repo](https://github.com/Vikmanatus/reactjs-absolute-imports-issue) should work with the following absolute import:

```javascript
import { makeid } from ""@/utils"";       // Throws an error
```

The strange thing is that the compiler throws an error when it imports the function but accepts the absolute import of a type 🤔

```javascript
import { FakeObjectType } from ""@/types"";   // No error
```
"
,,,https://github.com/facebook/react/issues/25444,25444,Bug: React.memo and generics won't work,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,False,,1,2022-10-07T06:47:01Z,2022-10-07T08:21:46Z,2022-10-07T08:21:46Z,NONE,completed,,"When using `React.memo` and generics in Typescript, there is an issue with props, at-least for me, when providing a function in props.

React version: 18.2.0

## Steps To Reproduce

1. Typescript will complain for props types immediately when compiling Typescript


Link to code example:
https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wG4Aoc4AOxiSk3STgEkB5MGYCagHgBUAfHADe5OBLhEUAEx4AbAJ5wAbinkBXJAC44-CpKmo51JXHkoARknm6AzjCg0A5hQC+lGnQZNWABRwwOwFhMUNpEzMuGHkdOAcnaldxSQiFZQhObmo7XXYsnhCAbQBdA1TjdPibJAwkGQ4uHl19FIk00wzqAGUajEbs3QAKNU04-gBKOABeYRUIYBl3SjQeBzgAMWB5bwA1YCQAdxm4AQAaQSGwQNzEYhgAOgDMuwB1YBgACwBhT+2ZIh8FjPIIhQRTWaiNpGGAaKDUOBDaGGXgyYAqQTIwySXifACsghE1xeD2isTcvAA9PjMVjsaJiUEHpkmjkHiAUGAhkMWdkznAaDIkAAPCHCJH0yU4ywaGAwHh0qXYgDWSEU0xEgpFHiVurgMEUYCQ0wARDK5TwTYq9XAeN95MA0MqNUMxXBGXZmT0+jABjweQVqA9RloJjqbZJMRHJSJeTwHhZrPJw9Gqeb5dQo3qJmHFVS0RjoRN3BQVmt4FsdvR9kcAKLCyCweonZDoR4gJAgCBDSt7A6HYueWj0RhoZjAm4AJhCUPClU6+o+sXsjhc5Xa87McZyeT9fCEpXXRlkVTsPvqe5aR46W+9sX6geGIfGbvmi2W5FWOQr228J3OlwerorYYE8NzvF8vz-ICvATi805COCMzitCvC9tW-b1o2dAyIqZLGkSNykkuSApti252BqHrMoGdhkYYZ73jhe5UURjG1Mxgb0ZIPC9ExLGESSvE+nubhwJSlJwGwyooIo0KUpig5AA

## The current behavior
Typescript complain about function in props

## The expected behavior
Should not complain

## Manual fix
Can be fixed if doing:
```ts
declare module ""react"" { // augment React types
    function memo<A, B>(Component: (props: A) => B): (props: A) => React.ReactElement | null
    // return type is same as ReturnType<ExoticComponent<any>>
}
```"
,,,https://github.com/facebook/react/issues/25665,25665,Bug: React.isValidElement( ) Unable to check the hok function component,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,False,,1,2022-11-11T09:27:28Z,2022-11-11T14:30:44Z,2022-11-11T14:30:40Z,NONE,not_planned,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1.
2.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior



React.isValidElement( ) Unable to check the hook function component ， 

With the hook function component, babel, which is compiled into es5 code, is sometimes not executed with createElement, but mutated into a function, Like the compiled code in the image below。
![123456](https://user-images.githubusercontent.com/20044598/201306350-c3dc9be6-3afb-4ef0-bc1d-6c29bcd35d7c.jpg)

It's not compiled like this
<img width=""972"" alt=""image"" src=""https://user-images.githubusercontent.com/20044598/201306838-b1d072b9-2b8d-4461-bc7c-15d648a79bb8.png"">

But rendering is fine。

But my react route requires the isValidElement api，Because I want to know whether the current variable is a component or a function, and choose a different way to execute it。
the reason for this problem is that my imported component is in promise mode.

If you have time, can you help me look at this bug？

Here's how I wrote react-lazy-router-dom  https://github.com/qq281113270/react-lazy-router-dom  ，I need this isValidElement to determine whether it's a component or a function 。

In addition, if you think I wrote react-lazy-router-dom well, could you please help me make a friendship link











"
,,,https://github.com/facebook/react/issues/25647,25647,| Platform | Engine | Arch | Size (bytes) | Diff |,[],closed,False,,0,2022-11-08T06:14:55Z,2022-11-09T14:28:26Z,2022-11-09T14:28:26Z,NONE,not_planned,,"        | Platform | Engine | Arch | Size (bytes) | Diff |
|:---------|:-------|:-----|-------------:|-----:|
| android | hermes | arm64-v8a | 7,066,170 | -7 |
| android | hermes | armeabi-v7a | 6,438,557 | -4 |
| android | hermes | x86 | 7,481,483 | -12 |
| android | hermes | x86_64 | 7,340,888 | -1 |
| android | jsc | arm64-v8a | 8,932,008 | +13 |
| android | jsc | armeabi-v7a | 7,666,372 | +33 |
| android | jsc | x86 | 8,992,394 | +28 |
| android | jsc | x86_64 | 9,471,150 | +29 |

Base commit: 3d9a15da870a75ed76d60d0c9b0d38c351a15003
Branch: main

_Originally posted by @analysis-bot in https://github.com/facebook/react-native/issues/35196#issuecomment-1302809166_
      "
